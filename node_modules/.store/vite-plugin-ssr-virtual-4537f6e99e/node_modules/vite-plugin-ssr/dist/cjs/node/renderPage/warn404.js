"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.warn404 = void 0;
const route_1 = require("../../shared/route");
const utils_1 = require("../utils");
async function warn404(pageContext) {
    const { pageRoutes } = await (0, route_1.loadPageRoutes)(pageContext);
    (0, utils_1.assertUsage)(pageRoutes.length > 0, 'No page found. Create a file that ends with the suffix `.page.js` (or `.page.vue`, `.page.jsx`, ...).');
    const { urlPathname } = pageContext;
    if (!pageContext._isProduction && !isFileRequest(urlPathname) && !pageContext._isPageContextRequest) {
        (0, utils_1.assertWarning)(false, [
            `URL \`${urlPathname}\` is not matching any of your ${pageRoutes.length} page routes (this warning is not shown in production):`,
            ...getPagesAndRoutesInfo(pageRoutes),
        ].join('\n'), { onlyOnce: false });
    }
}
exports.warn404 = warn404;
function getPagesAndRoutesInfo(pageRoutes) {
    return pageRoutes
        .map((pageRoute) => {
        const { pageId, filesystemRoute, pageRouteFile } = pageRoute;
        let route;
        let routeType;
        if (pageRouteFile) {
            const { routeValue } = pageRouteFile;
            route =
                typeof routeValue === 'string'
                    ? routeValue
                    : truncateString(String(routeValue).split(/\s/).filter(Boolean).join(' '), 64);
            routeType = typeof routeValue === 'string' ? 'Route String' : 'Route Function';
        }
        else {
            route = filesystemRoute;
            routeType = 'Filesystem Route';
        }
        return `\`${route}\` (${routeType} of \`${pageId}.page.*\`)`;
    })
        .sort(utils_1.compareString)
        .map((line, i) => {
        const nth = (i + 1).toString().padStart(pageRoutes.length.toString().length, '0');
        return ` (${nth}) ${line}`;
    });
}
function truncateString(str, len) {
    if (len > str.length) {
        return str;
    }
    else {
        str = str.substring(0, len);
        return str + '...';
    }
}
function isFileRequest(urlPathname) {
    (0, utils_1.assert)(urlPathname.startsWith('/'));
    const paths = urlPathname.split('/');
    const lastPath = paths[paths.length - 1];
    (0, utils_1.assert)(typeof lastPath === 'string');
    const parts = lastPath.split('.');
    if (parts.length < 2) {
        return false;
    }
    const fileExtension = parts[parts.length - 1];
    (0, utils_1.assert)(typeof fileExtension === 'string');
    return /^[a-z0-9]+$/.test(fileExtension);
}
