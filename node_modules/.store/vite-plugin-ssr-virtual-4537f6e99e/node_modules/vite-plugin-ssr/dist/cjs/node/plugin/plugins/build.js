"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const path_1 = __importDefault(require("path"));
const utils_1 = require("../utils");
function build() {
    return {
        name: 'vite-plugin-ssr:build',
        apply: 'build',
        async config(config) {
            var _a, _b;
            const input = Object.assign(Object.assign({}, entryPoints(config)), normalizeRollupInput((_b = (_a = config.build) === null || _a === void 0 ? void 0 : _a.rollupOptions) === null || _b === void 0 ? void 0 : _b.input));
            return {
                build: {
                    outDir: getOutDir(config),
                    manifest: true,
                    rollupOptions: { input },
                    polyfillDynamicImport: false,
                },
                //*
                ssr: { external: ['vite-plugin-ssr'] },
                /*/
                // Try Hydrogen's `noExternal: true` bundling strategy for Cloudflare Workers
                ssr: { noExternal: true },
                //*/
            };
        },
    };
}
exports.build = build;
function entryPoints(config) {
    if ((0, utils_1.isSSR_config)(config)) {
        return {
            pageFiles: resolve('dist/esm/node/page-files/pageFiles-node.js'),
            importBuild: resolve('dist/cjs/node/importBuild.js')
        };
    }
    else {
        return {
            ['entry-client-routing']: resolve(`dist/esm/client/router/entry.js`),
            ['entry-server-routing']: resolve(`dist/esm/client/entry.js`),
        };
    }
}
function resolve(filePath) {
    (0, utils_1.assert)(filePath.startsWith('dist/'));
    return require.resolve(`../../../../../${filePath}`);
}
function getOutDir(config) {
    var _a, _b;
    let outDir = (_a = config.build) === null || _a === void 0 ? void 0 : _a.outDir;
    if (!outDir) {
        outDir = 'dist';
    }
    outDir = path_1.default.posix.join(outDir, ((_b = config.build) === null || _b === void 0 ? void 0 : _b.ssr) ? 'server' : 'client');
    return outDir;
}
function normalizeRollupInput(input) {
    if (!input) {
        return {};
    }
    // Usually `input` is an oject, but the user can set it as a `string` or `string[]`
    if (typeof input === 'string') {
        input = [input];
    }
    if (Array.isArray(input)) {
        return Object.fromEntries(input.map((input) => [input, input]));
    }
    (0, utils_1.assert)((0, utils_1.isObject)(input));
    return input;
}
