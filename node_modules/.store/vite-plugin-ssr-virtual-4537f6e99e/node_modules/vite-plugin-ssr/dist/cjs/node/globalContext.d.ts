export { getGlobalContext };
export { setViteDevServer };
export { getViteDevServer };
export type { GlobalContext };
import { PromiseType } from './utils';
import type { ViteDevServer } from 'vite';
declare type GlobalContext = PromiseType<ReturnType<typeof getGlobalContext>>;
declare function setViteDevServer(viteDevServer_: ViteDevServer): void;
declare function getViteDevServer(): ViteDevServer | null;
declare function getGlobalContext(isPreRendering: boolean): Promise<({
    _isProduction: true;
    _manifestClient: import("./viteManifest").ViteManifest;
    _manifestPlugin: {
        version: string;
        baseUrl: string;
        baseAssets: string;
        usesClientRouter: boolean;
    };
} | {
    _isProduction: false;
    _manifestClient: null;
    _manifestPlugin: null;
}) & {
    _baseUrl: string;
    _baseAssets: string | null;
    _viteDevServer: ViteDevServer | null;
    _objectCreatedByVitePluginSsr: boolean;
}>;
