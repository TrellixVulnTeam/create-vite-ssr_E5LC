"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.retrieveAssetsDev = exports.retrieveAssetsProd = void 0;
const utils_1 = require("./utils");
const getManifestEntry_1 = require("./getManifestEntry");
const extractStylesAddQuery_1 = require("./plugin/plugins/extractStylesPlugin/extractStylesAddQuery");
async function retrieveAssetsDev(clientDependencies, viteDevServer) {
    const visitedModules = new Set();
    const assetUrls = new Set();
    await Promise.all(clientDependencies.map(async ({ id }) => {
        if (id.startsWith('@@vite-plugin-ssr'))
            return; // vps doesn't have any CSS
        (0, utils_1.assert)(id);
        const { moduleGraph } = viteDevServer;
        const [_, graphId] = await moduleGraph.resolveUrl(id);
        (0, utils_1.assert)(graphId, { id });
        const mod = moduleGraph.getModuleById(graphId);
        if (!mod) {
            // `moduleGraph` is missing `.page.client.js` files on the very first render
            (0, utils_1.assert)(id.includes('.page.client.'), { id });
            return;
        }
        (0, utils_1.assert)(mod, { id });
        collectCss(mod, assetUrls, visitedModules);
    }));
    return Array.from(assetUrls);
}
exports.retrieveAssetsDev = retrieveAssetsDev;
async function retrieveAssetsProd(clientDependencies, clientManifest) {
    let assetUrls = new Set();
    (0, utils_1.assert)(clientManifest);
    const visistedAssets = new Set();
    clientDependencies.forEach(({ id, onlyAssets }) => {
        (0, utils_1.assert)(!onlyAssets || id.includes('.page.server.'));
        if (onlyAssets) {
            id = (0, extractStylesAddQuery_1.extractStylesAddQuery)(id);
        }
        const entry = (0, getManifestEntry_1.getManifestEntry)(id, clientManifest);
        (0, utils_1.assertUsage)(entry, `You stumbled upon a rare Rollup bug. Reach out to the vite-plugin-ssr maintainer on GitHub or Discord. (The entry ${id} is missing in the manifest.)`);
        /*
        assertWarning(
          entry,
          "You stumbled upon a Rollup bug that is known to the vite-plugin-ssr maintainer. It's usually benign but it may cause problems. Feel free to reach out on GitHub or Discord.",
          { onlyOnce: true },
        )
        if (!entry) {
          // Circumvent Rollup Bug, see https://github.com/brillout/vite-plugin-ssr/issues/51
          return
        }
        */
        const { manifestKey } = entry;
        collectAssets(manifestKey, assetUrls, visistedAssets, clientManifest, onlyAssets);
    });
    return Array.from(assetUrls);
}
exports.retrieveAssetsProd = retrieveAssetsProd;
function collectAssets(manifestKey, assetUrls, visistedAssets, manifest, onlyCollectStaticAssets) {
    if (visistedAssets.has(manifestKey))
        return;
    visistedAssets.add(manifestKey);
    const manifestEntry = manifest[manifestKey];
    (0, utils_1.assert)(manifestEntry, { manifestKey });
    const { file } = manifestEntry;
    if (!onlyCollectStaticAssets) {
        assetUrls.add(`/${file}`);
    }
    const { imports = [], assets = [], css = [] } = manifestEntry;
    for (const manifestKey of imports) {
        const importManifestEntry = manifest[manifestKey];
        (0, utils_1.assert)(importManifestEntry);
        collectAssets(manifestKey, assetUrls, visistedAssets, manifest, onlyCollectStaticAssets);
    }
    for (const cssAsset of css) {
        assetUrls.add(`/${cssAsset}`);
    }
    for (const asset of assets) {
        assetUrls.add(`/${asset}`);
    }
}
function collectCss(mod, styleUrls, visitedModules) {
    (0, utils_1.assert)(mod);
    if (!mod.url)
        return;
    if (visitedModules.has(mod.url))
        return;
    visitedModules.add(mod.url);
    if (mod.url.endsWith('.css') || (mod.id && /\?vue&type=style/.test(mod.id))) {
        styleUrls.add(mod.url);
    }
    mod.importedModules.forEach((dep) => {
        collectCss(dep, styleUrls, visitedModules);
    });
}
