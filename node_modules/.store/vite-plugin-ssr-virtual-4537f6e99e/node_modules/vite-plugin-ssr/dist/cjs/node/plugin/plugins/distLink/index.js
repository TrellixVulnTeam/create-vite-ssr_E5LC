"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.distLink = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const utils_1 = require("../../utils");
const { sourceDir, distEntriesFilePath } = getSourceDir();
/*/
const DEBUG = true
/*/
const DEBUG = false;
//*/
function distLinkReset() {
    const code = ['// Generated File.', '', 'exports.distEntries = null;', ''].join('\n');
    if (DEBUG) {
        console.log('RESET');
        console.log(code);
    }
    (0, fs_1.writeFileSync)(distEntriesFilePath, code);
}
function distLink() {
    let ssr;
    let root;
    let distServer;
    return [
        {
            name: 'vite-plugin-ssr:distLinkReset',
            apply: utils_1.applyDev,
            configResolved() {
                distLinkReset();
            },
        },
        {
            name: 'vite-plugin-ssr:distLink',
            apply: 'build',
            configResolved(config) {
                ssr = (0, utils_1.isSSR_config)(config);
                root = config.root ? (0, utils_1.toPosixPath)(config.root) : (0, utils_1.toPosixPath)(process.cwd());
                distServer = config.build.outDir;
                (0, utils_1.assert)(distServer);
                if (ssr) {
                    distLinkReset();
                }
            },
            generateBundle() {
                (0, utils_1.assert)(typeof ssr === 'boolean');
                if (!ssr) {
                    return;
                }
                const distPath = getDistPath();
                const code = [
                    '// Generated File.',
                    '',
                    'exports.distEntries = {',
                    `  pageFiles: () => import('${path_1.default.posix.join(distPath, '/server/pageFiles.js')}'),`,
                    `  serverManifest: () => require('${path_1.default.posix.join(distPath, '/server/manifest.json')}'),`,
                    `  clientManifest: () => require('${path_1.default.posix.join(distPath, '/client/manifest.json')}'),`,
                    `  pluginManifest: () => require('${path_1.default.posix.join(distPath, '/client/vite-plugin-ssr.json')}'),`,
                    '};',
                    '',
                ].join('\n');
                if (DEBUG) {
                    console.log('\nGEN\n');
                    console.log(code);
                }
                (0, fs_1.writeFileSync)(distEntriesFilePath, code);
            },
        },
    ];
    function getDistPath() {
        (0, utils_1.assert)(root);
        (0, utils_1.assert)(distServer.endsWith('/server'));
        (0, utils_1.assertPosixPath)(sourceDir);
        (0, utils_1.assertPosixPath)(root);
        const rootRelative = path_1.default.posix.relative(sourceDir, root); // To `require()` an absolute path doesn't seem to work on Vercel
        const distPath = path_1.default.posix.join(rootRelative, path_1.default.posix.join(distServer, '..'));
        return distPath;
    }
}
exports.distLink = distLink;
function getSourceDir() {
    const sourceDir = (0, utils_1.toPosixPath)(__dirname + (() => '')()); // trick to avoid `@vercel/ncc` to glob import
    const distEntriesFilePath = `${sourceDir}/distEntries.js`;
    (0, utils_1.moduleExists)(distEntriesFilePath);
    return { sourceDir, distEntriesFilePath };
}
