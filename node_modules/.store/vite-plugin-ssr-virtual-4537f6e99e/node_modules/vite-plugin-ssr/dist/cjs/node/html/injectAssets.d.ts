import type { MediaType } from './inferMediaType';
import type { ViteDevServer } from 'vite';
export { injectAssets__public };
export { injectAssets };
export { injectAssetsBeforeRender };
export { injectAssetsAfterRender };
export type { PageContextInjectAssets };
export { PageAsset };
declare type PageAsset = {
    src: string;
    assetType: 'script' | 'style' | 'preload';
    mediaType: null | NonNullable<MediaType>['mediaType'];
    preloadType: null | NonNullable<MediaType>['preloadType'];
};
declare function injectAssets__public(htmlString: string, pageContext: Record<string, unknown>): Promise<string>;
declare type PageContextInjectAssets = {
    urlPathname: string;
    _getPageAssets: () => Promise<PageAsset[]>;
    _pageId: string;
    _passToClient: string[];
    _skipAssetInject?: true;
    _isHtmlOnly: boolean;
    _pageContextProvidedByUserPromise: Promise<unknown> | null;
    _renderHook: {
        hookFilePath: string;
        hookName: 'render';
    };
    _isProduction: boolean;
    _viteDevServer: null | ViteDevServer;
    _baseUrl: string;
};
declare function injectAssets(htmlString: string, pageContext: PageContextInjectAssets): Promise<string>;
declare function injectAssetsBeforeRender(htmlString: string, pageContext: PageContextInjectAssets): Promise<string>;
declare function injectAssetsAfterRender(htmlString: string, pageContext: PageContextInjectAssets): Promise<string>;
