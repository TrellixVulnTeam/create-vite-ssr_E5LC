"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.manifest = void 0;
const utils_1 = require("../utils");
const assertPluginManifest_1 = require("./manifest/assertPluginManifest");
const runtimeConfig_1 = require("../../globalContext/runtimeConfig");
function manifest() {
    let ssr;
    let runtimeConfig;
    return [
        {
            name: 'vite-plugin-ssr:runtimeConfig',
            apply: utils_1.applyDev,
            configResolved(config) {
                configResolved(config);
                (0, runtimeConfig_1.setRuntimeConfig)(runtimeConfig);
            },
        },
        {
            name: 'vite-plugin-ssr:pluginManifest',
            apply: 'build',
            configResolved,
            generateBundle(_, bundle) {
                (0, utils_1.assert)(typeof ssr === 'boolean');
                (0, utils_1.assert)(runtimeConfig);
                if (ssr)
                    return;
                const manifest = Object.assign({ version: utils_1.projectInfo.projectVersion, usesClientRouter: includesClientSideRouter(bundle) }, runtimeConfig);
                (0, assertPluginManifest_1.assertPluginManifest)(manifest);
                this.emitFile({
                    fileName: `vite-plugin-ssr.json`,
                    type: 'asset',
                    source: JSON.stringify(manifest, null, 2),
                });
            },
        },
    ];
    function configResolved(config) {
        ssr = (0, utils_1.isSSR_config)(config);
        runtimeConfig = (0, runtimeConfig_1.resolveRuntimeConfig)(config);
    }
}
exports.manifest = manifest;
function includesClientSideRouter(bundle) {
    // Current directory: vite-plugin-ssr/dist/cjs/node/plugin/plugins/
    const filePath = require.resolve('../../../../../dist/esm/client/router/useClientRouter.js');
    for (const file of Object.keys(bundle)) {
        const bundleFile = bundle[file];
        (0, utils_1.assert)(bundleFile);
        const modules = bundleFile.modules || {};
        if (filePath in modules || (0, utils_1.normalizePath)(filePath) in modules) {
            return true;
        }
    }
    return false;
}
