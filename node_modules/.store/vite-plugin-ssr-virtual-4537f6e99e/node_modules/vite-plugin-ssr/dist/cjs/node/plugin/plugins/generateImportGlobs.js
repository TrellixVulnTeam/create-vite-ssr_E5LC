"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateImportGlobs = void 0;
const fs_1 = require("fs");
const utils_1 = require("../utils");
const getGlobPath_1 = require("./generateImportGlobs/getGlobPath");
const getGlobRoots_1 = require("./generateImportGlobs/getGlobRoots");
const VitePluginSsrConfig_1 = require("./config/VitePluginSsrConfig");
function generateImportGlobs() {
    return {
        name: 'vite-plugin-ssr:generateImportGlobs',
        async configResolved(config) {
            const { command } = config;
            (0, utils_1.assert)(command === 'serve' || command === 'build');
            const isBuild = command === 'build';
            (0, VitePluginSsrConfig_1.assertVitePluginSsrConfig)(config);
            const globRoots = await (0, getGlobRoots_1.getGlobRoots)(config);
            writeImportGlobs(globRoots, isBuild);
        },
    };
}
exports.generateImportGlobs = generateImportGlobs;
function writeImportGlobs(globRoots, isBuild) {
    // Current directory: node_modules/vite-plugin-ssr/dist/cjs/node/plugin/plugins/generateImportGlobs.js
    (0, fs_1.writeFileSync)(require.resolve('../../../../../dist/esm/node/page-files/pageFiles-node.js'), getFileContent(globRoots, isBuild, false));
    (0, fs_1.writeFileSync)(require.resolve('../../../../../dist/esm/client/page-files/pageFiles-client.js'), getFileContent(globRoots, isBuild, true));
}
function getFileContent(globRoots, isBuild, isForClientSide) {
    let fileContent = `// This file was generatead by \`node/plugin/plugins/generateImportGlobs.ts\`.

export const pageFilesLazy = {};
export const pageFilesEager = {};
export const pageFilesExportNamesLazy = {};
export const pageFilesExportNamesEager = {};
export const neverLoaded = {};
export const isGeneratedFile = true;

`;
    fileContent += [getGlobs(globRoots, isBuild, 'page'), getGlobs(globRoots, isBuild, 'page.route'), ''].join('\n');
    if (isForClientSide) {
        fileContent += [
            getGlobs(globRoots, isBuild, 'page.client'),
            getGlobs(globRoots, isBuild, 'page.client', 'extractExportNames'),
            getGlobs(globRoots, isBuild, 'page.server', 'extractExportNames'),
            getGlobs(globRoots, isBuild, 'page', 'extractExportNames'),
            getGlobs(globRoots, isBuild, 'page.server', 'extractStyles'),
        ].join('\n');
    }
    else {
        fileContent += [
            getGlobs(globRoots, isBuild, 'page.server'),
            getGlobs(globRoots, isBuild, 'page.client', 'extractExportNames'),
        ].join('\n');
    }
    return fileContent;
}
function getGlobs(globRoots, isBuild, fileSuffix, query = '') {
    const isEager = isBuild && (query === 'extractExportNames' || fileSuffix === 'page.route');
    let pageFilesVar;
    if (query === 'extractExportNames') {
        if (!isEager) {
            pageFilesVar = 'pageFilesExportNamesLazy';
        }
        else {
            pageFilesVar = 'pageFilesExportNamesEager';
        }
    }
    else if (query === 'extractStyles') {
        (0, utils_1.assert)(!isEager);
        pageFilesVar = 'neverLoaded';
    }
    else {
        if (!isEager) {
            pageFilesVar = 'pageFilesLazy';
        }
        else {
            pageFilesVar = 'pageFilesEager';
        }
    }
    const varNameSuffix = (fileSuffix === 'page' && 'Isomorph') ||
        (fileSuffix === 'page.client' && 'Client') ||
        (fileSuffix === 'page.server' && 'Server') ||
        (fileSuffix === 'page.route' && 'Route');
    (0, utils_1.assert)(varNameSuffix);
    const varName = `${pageFilesVar}${varNameSuffix}`;
    const varNameLocals = [];
    return [
        ...globRoots.map((globRoot, i) => {
            const varNameLocal = `${varName}${i + 1}`;
            varNameLocals.push(varNameLocal);
            const globPath = `'${(0, getGlobPath_1.getGlobPath)(globRoot, fileSuffix)}'`;
            const globOptions = `{ eager: ${isEager ? true : false}, query: "${query}" }`;
            return `const ${varNameLocal} = import.meta.importGlob(${globPath}, ${globOptions});`;
        }),
        `const ${varName} = {${varNameLocals.map((varNameLocal) => `...${varNameLocal}`).join(',')}};`,
        `${pageFilesVar}['.${fileSuffix}'] = ${varName};`,
        '',
    ].join('\n');
}
