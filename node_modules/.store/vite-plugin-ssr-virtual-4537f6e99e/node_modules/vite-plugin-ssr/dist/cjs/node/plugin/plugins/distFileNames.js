"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.distFileNames = void 0;
const utils_1 = require("../utils");
const path_1 = __importDefault(require("path"));
const determinePageId_1 = require("../../../shared/determinePageId");
const resolveFilesystemRoute_1 = require("../../../shared/route/resolveFilesystemRoute");
const extractStylesPlugin_1 = require("./extractStylesPlugin");
function distFileNames() {
    return {
        name: 'vite-plugin-ssr:distFileNames',
        apply: 'build',
        enforce: 'post',
        async configResolved(config) {
            const root = (0, utils_1.getRoot)(config);
            setChunkFileNames(config, root, getChunkFileName);
            setAssetFileNames(config, getAssetFileName);
        },
    };
}
exports.distFileNames = distFileNames;
const BLACK_LIST = ['assertRenderHook.css'];
function getAssetFileName(assetInfo, assetFileName) {
    var _a;
    // Not sure when/why this happens
    if (assetInfo.name && BLACK_LIST.includes(assetInfo.name)) {
        assetFileName !== null && assetFileName !== void 0 ? assetFileName : (assetFileName = 'assets/chunk-[hash][extname]');
    }
    // dist/client/assets/index.page.server.jsx_extractStyles_lang.e4e33422.css
    // => dist/client/assets/index.page.server.e4e33422.css
    if ((_a = assetInfo.name) === null || _a === void 0 ? void 0 : _a.endsWith('_extractStyles_lang.css')) {
        const nameBase = assetInfo.name.split('.').slice(0, -2).join('.');
        assetFileName !== null && assetFileName !== void 0 ? assetFileName : (assetFileName = `assets/${nameBase}.[hash][extname]`);
    }
    assetFileName !== null && assetFileName !== void 0 ? assetFileName : (assetFileName = 'assets/[name].[hash][extname]');
    return assetFileName;
}
function getChunkFileName(root, chunkInfo, chunkFileName) {
    const id = chunkInfo.facadeModuleId;
    if (id) {
        (0, utils_1.assertPosixPath)(id);
    }
    (0, utils_1.assertPosixPath)(root);
    if (!chunkInfo.isDynamicEntry ||
        !id ||
        id.includes('/node_modules/') ||
        !id.startsWith(root) ||
        (id.includes('.page.server.') && extractStylesPlugin_1.extractStylesRE.test(id))) {
        chunkFileName !== null && chunkFileName !== void 0 ? chunkFileName : (chunkFileName = 'assets/chunk-[hash].js');
        return chunkFileName;
    }
    chunkFileName !== null && chunkFileName !== void 0 ? chunkFileName : (chunkFileName = 'assets/[name].[hash].js');
    const { name } = chunkInfo;
    if (name.startsWith('index.page.') || name === 'index.page') {
        const chunkName = deduceChunkNameFromFilesystemRouting(id, root);
        if (chunkName) {
            chunkFileName = chunkFileName.replace('[name]', name.replace('index', chunkName));
            return chunkFileName;
        }
    }
    return chunkFileName;
}
function deduceChunkNameFromFilesystemRouting(id, root) {
    (0, utils_1.assert)(id === null || id === void 0 ? void 0 : id.startsWith(root), { id, root });
    const pathRelative = path_1.default.posix.relative(root, id);
    (0, utils_1.assert)(!pathRelative.startsWith('.') && !pathRelative.startsWith('/'), { id, root });
    const pageId = (0, determinePageId_1.determinePageId)('/' + pathRelative);
    const filesystemRoute = (0, resolveFilesystemRoute_1.getFilesystemRoute)(pageId, []);
    const dirS = filesystemRoute.split('/');
    const pageFileName = dirS[dirS.length - 1];
    return pageFileName !== null && pageFileName !== void 0 ? pageFileName : null;
}
function setChunkFileNames(config, root, getChunkFileName) {
    var _a, _b, _c, _d;
    var _e;
    if (!((_b = (_a = config === null || config === void 0 ? void 0 : config.build) === null || _a === void 0 ? void 0 : _a.rollupOptions) === null || _b === void 0 ? void 0 : _b.output)) {
        (_c = config.build) !== null && _c !== void 0 ? _c : (config.build = {});
        (_d = (_e = config.build).rollupOptions) !== null && _d !== void 0 ? _d : (_e.rollupOptions = {});
        config.build.rollupOptions.output = {
            chunkFileNames: (chunkInfo) => getChunkFileName(root, chunkInfo, undefined),
        };
    }
    else if (!Array.isArray(config.build.rollupOptions.output)) {
        const chunkFileNames_original = config.build.rollupOptions.output.chunkFileNames;
        config.build.rollupOptions.output.chunkFileNames = (chunkInfo) => getChunkFileName(root, chunkInfo, resolveChunkFileNames(chunkFileNames_original, chunkInfo));
    }
    else {
        config.build.rollupOptions.output.map((output) => {
            const chunkFileNames_original = output.chunkFileNames;
            output.chunkFileNames = (chunkInfo) => getChunkFileName(root, chunkInfo, resolveChunkFileNames(chunkFileNames_original, chunkInfo));
        });
    }
}
function setAssetFileNames(config, getAssetFileName) {
    var _a, _b, _c, _d;
    var _e;
    if (!((_b = (_a = config === null || config === void 0 ? void 0 : config.build) === null || _a === void 0 ? void 0 : _a.rollupOptions) === null || _b === void 0 ? void 0 : _b.output)) {
        (_c = config.build) !== null && _c !== void 0 ? _c : (config.build = {});
        (_d = (_e = config.build).rollupOptions) !== null && _d !== void 0 ? _d : (_e.rollupOptions = {});
        config.build.rollupOptions.output = {
            assetFileNames: (chunkInfo) => getAssetFileName(chunkInfo, undefined),
        };
    }
    else if (!Array.isArray(config.build.rollupOptions.output)) {
        const chunkFileNames_original = config.build.rollupOptions.output.assetFileNames;
        config.build.rollupOptions.output.assetFileNames = (chunkInfo) => getAssetFileName(chunkInfo, resolveAssetFileNames(chunkFileNames_original, chunkInfo));
    }
    else {
        config.build.rollupOptions.output.map((output) => {
            const chunkFileNames_original = output.assetFileNames;
            output.assetFileNames = (chunkInfo) => getAssetFileName(chunkInfo, resolveAssetFileNames(chunkFileNames_original, chunkInfo));
        });
    }
}
function resolveChunkFileNames(chunkFileNames, chunkInfo) {
    if (!chunkFileNames) {
        return undefined;
    }
    if (typeof chunkFileNames === 'string') {
        return chunkFileNames;
    }
    if ((0, utils_1.isCallable)(chunkFileNames)) {
        const chunkFileName = chunkFileNames(chunkInfo);
        (0, utils_1.assert)(typeof chunkFileName === 'string');
        return chunkFileName;
    }
    (0, utils_1.assert)(false);
}
function resolveAssetFileNames(chunkFileNames, chunkInfo) {
    if (!chunkFileNames) {
        return undefined;
    }
    if (typeof chunkFileNames === 'string') {
        return chunkFileNames;
    }
    if ((0, utils_1.isCallable)(chunkFileNames)) {
        const chunkFileName = chunkFileNames(chunkInfo);
        (0, utils_1.assert)(typeof chunkFileName === 'string');
        return chunkFileName;
    }
    (0, utils_1.assert)(false);
}
