"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStringUnion = exports.setPageFilesServerSideAsync = exports.setPageFilesClientSide = exports.setPageFilesServerSide = exports.getPageFilesAllServerSide = exports.getPageFilesAllClientSide = exports.loadPageFiles = void 0;
const utils_1 = require("./utils");
const route_1 = require("./route");
const determinePageId_1 = require("./determinePageId");
assertNotAlreadyLoaded();
const fileTypes = ['.page', '.page.server', '.page.route', '.page.client'];
let _pageFilesAll;
let _pageFilesGetter;
function setPageFilesServerSide(pageFilesExports) {
    _pageFilesAll = format(pageFilesExports);
}
exports.setPageFilesServerSide = setPageFilesServerSide;
function setPageFilesServerSideAsync(getPageFilesExports) {
    _pageFilesGetter = async () => {
        setPageFilesClientSide(await getPageFilesExports());
    };
}
exports.setPageFilesServerSideAsync = setPageFilesServerSideAsync;
function setPageFilesClientSide(pageFilesExports) {
    _pageFilesAll = format(pageFilesExports);
}
exports.setPageFilesClientSide = setPageFilesClientSide;
async function getPageFilesAllServerSide(isProduction) {
    if (_pageFilesGetter) {
        if (!_pageFilesAll ||
            // We reload all glob imports in dev to make auto-reload work
            !isProduction) {
            await _pageFilesGetter();
        }
        (0, utils_1.assert)(_pageFilesAll);
    }
    (0, utils_1.assert)(_pageFilesAll);
    const pageFilesAll = _pageFilesAll;
    const allPageIds = getAllPageIds(pageFilesAll);
    return { pageFilesAll, allPageIds };
}
exports.getPageFilesAllServerSide = getPageFilesAllServerSide;
function getPageFilesAllClientSide() {
    (0, utils_1.assert)(_pageFilesAll);
    const pageFilesAll = _pageFilesAll;
    const allPageIds = getAllPageIds(pageFilesAll);
    return { pageFilesAll, allPageIds };
}
exports.getPageFilesAllClientSide = getPageFilesAllClientSide;
function format(pageFilesExports) {
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports, 'isGeneratedFile'), 'Missing `isGeneratedFile`.');
    (0, utils_1.assert)(pageFilesExports.isGeneratedFile !== false, `vite-plugin-ssr was re-installed(/re-built). Restart your app.`);
    (0, utils_1.assert)(pageFilesExports.isGeneratedFile === true, `\`isGeneratedFile === ${pageFilesExports.isGeneratedFile}\``);
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports, 'pageFilesLazy', 'object'));
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports, 'pageFilesEager', 'object'));
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports, 'pageFilesExportNamesLazy', 'object'));
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports, 'pageFilesExportNamesEager', 'object'));
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports.pageFilesLazy, '.page'));
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports.pageFilesLazy, '.page.route') || (0, utils_1.hasProp)(pageFilesExports.pageFilesEager, '.page.route'));
    (0, utils_1.assert)((0, utils_1.hasProp)(pageFilesExports.pageFilesLazy, '.page.client') || (0, utils_1.hasProp)(pageFilesExports.pageFilesLazy, '.page.server'));
    const pageFilesMap = {};
    traverse(pageFilesExports.pageFilesLazy, pageFilesMap, (pageFile, globResult) => {
        const loadModule = globResult;
        assertLoadModule(loadModule);
        pageFile.loadFile = async () => {
            if (!('fileExports' in pageFile)) {
                pageFile.fileExports = await loadModule();
            }
        };
    });
    traverse(pageFilesExports.pageFilesExportNamesLazy, pageFilesMap, (pageFile, globResult) => {
        const loadModule = globResult;
        assertLoadModule(loadModule);
        pageFile.loadExportNames = async () => {
            if (!('exportNames' in pageFile)) {
                const moduleExports = await loadModule();
                (0, utils_1.assert)((0, utils_1.hasProp)(moduleExports, 'exportNames', 'string[]'), pageFile.filePath);
                pageFile.exportNames = moduleExports.exportNames;
            }
        };
    });
    traverse(pageFilesExports.pageFilesEager, pageFilesMap, (pageFile, globResult) => {
        const moduleExports = globResult;
        (0, utils_1.assert)((0, utils_1.isObject)(moduleExports));
        pageFile.fileExports = moduleExports;
    });
    traverse(pageFilesExports.pageFilesExportNamesEager, pageFilesMap, (pageFile, globResult) => {
        const moduleExports = globResult;
        (0, utils_1.assert)((0, utils_1.isObject)(moduleExports));
        (0, utils_1.assert)((0, utils_1.hasProp)(moduleExports, 'exportNames', 'string[]'), pageFile.filePath);
        pageFile.exportNames = moduleExports.exportNames;
    });
    const pageFiles = Object.values(pageFilesMap);
    pageFiles.forEach(({ filePath }) => {
        (0, utils_1.assert)(!filePath.includes('\\'));
    });
    return pageFiles;
}
function assertLoadModule(globResult) {
    (0, utils_1.assert)((0, utils_1.isCallable)(globResult));
}
function traverse(globObject, pageFilesMap, visitor) {
    Object.entries(globObject).forEach(([fileType, globFiles]) => {
        (0, utils_1.cast)(fileType);
        (0, utils_1.assert)(fileTypes.includes(fileType));
        (0, utils_1.assert)((0, utils_1.isObject)(globFiles));
        Object.entries(globFiles).forEach(([filePath, globResult]) => {
            var _a;
            const isRelevant = (pageId) => pageFile.pageId === pageId ||
                (pageFile.isDefaultPageFile &&
                    (pageFile.isRendererPageFile || isAncestorDefaultPage(pageId, pageFile.filePath)));
            const pageFile = (pageFilesMap[filePath] = (_a = pageFilesMap[filePath]) !== null && _a !== void 0 ? _a : {
                filePath,
                fileType,
                isRelevant,
                isDefaultPageFile: isDefaultFilePath(filePath),
                isRendererPageFile: isRendererFilePath(filePath),
                isErrorPageFile: (0, route_1.isErrorPage)(filePath),
                pageId: (0, determinePageId_1.determinePageId)(filePath),
            });
            visitor(pageFile, globResult);
        });
    });
}
function isDefaultFilePath(filePath) {
    (0, utils_1.assertPosixPath)(filePath);
    (0, utils_1.assert)(filePath.startsWith('/'));
    return filePath.includes('/_default');
}
function isRendererFilePath(filePath) {
    (0, utils_1.assertPosixPath)(filePath);
    (0, utils_1.assert)(filePath.startsWith('/'));
    return filePath.includes('/renderer/');
}
async function loadPageFiles(pageFilesAll, pageId, isForClientSide) {
    const pageFiles = findPageFilesToLoad(pageFilesAll, pageId, isForClientSide);
    await Promise.all(pageFiles.map((p) => { var _a; return (_a = p.loadFile) === null || _a === void 0 ? void 0 : _a.call(p); }));
    const pageExports = createObjectWithDeprecationWarning();
    const exports = {};
    const exportsAll = {};
    pageFiles.forEach(({ filePath, fileType, fileExports }) => {
        Object.entries(fileExports !== null && fileExports !== void 0 ? fileExports : {}).forEach(([exportName, exportValue]) => {
            var _a, _b;
            exports[exportName] = (_a = exports[exportName]) !== null && _a !== void 0 ? _a : exportValue;
            if (fileType === '.page') {
                if (!(exportName in pageExports)) {
                    pageExports[exportName] = exportValue;
                }
            }
            exportsAll[exportName] = (_b = exportsAll[exportName]) !== null && _b !== void 0 ? _b : [];
            exportsAll[exportName].push({
                filePath,
                exportValue,
            });
        });
    });
    {
        const customExports = getStringUnion(exportsAll, 'customExports');
        assertExports(pageFiles, customExports);
    }
    const pageContextAddendum = {
        exports,
        pageExports,
        exportsAll,
    };
    return pageContextAddendum;
}
exports.loadPageFiles = loadPageFiles;
function findPageFilesToLoad(pageFilesAll, pageId, isForClientSide) {
    const fileTypeEnvSpecific = isForClientSide ? '.page.client' : '.page.server';
    const defaultFiles = [
        ...pageFilesAll.filter((p) => p.isDefaultPageFile && p.isRelevant(pageId) && p.fileType === fileTypeEnvSpecific),
        ...pageFilesAll.filter((p) => p.isDefaultPageFile && p.isRelevant(pageId) && p.fileType === '.page'),
    ];
    defaultFiles.sort(defaultFilesSorter(fileTypeEnvSpecific, pageId));
    const pageFiles = [
        ...pageFilesAll.filter((p) => p.pageId === pageId && p.fileType === fileTypeEnvSpecific),
        ...pageFilesAll.filter((p) => p.pageId === pageId && p.fileType === '.page'),
        ...defaultFiles,
    ];
    return pageFiles;
}
function defaultFilesSorter(fileTypeEnvSpecific, pageId) {
    const e1First = -1;
    const e2First = +1;
    const noOrder = 0;
    return (e1, e2) => {
        (0, utils_1.assert)(e1.isDefaultPageFile && e2.isDefaultPageFile);
        {
            const e1_isRenderer = e1.isRendererPageFile;
            const e2_isRenderer = e2.isRendererPageFile;
            if (!e1_isRenderer && e2_isRenderer) {
                return e1First;
            }
            if (!e2_isRenderer && e1_isRenderer) {
                return e2First;
            }
            (0, utils_1.assert)(e1_isRenderer === e2_isRenderer);
        }
        {
            const e1_distance = getPathDistance(pageId, e1.filePath);
            const e2_distance = getPathDistance(pageId, e2.filePath);
            if (e1_distance < e2_distance) {
                return e1First;
            }
            if (e2_distance < e1_distance) {
                return e2First;
            }
            (0, utils_1.assert)(e1_distance === e2_distance);
        }
        {
            if (e1.fileType === fileTypeEnvSpecific && e2.fileType !== fileTypeEnvSpecific) {
                return e1First;
            }
            if (e2.fileType === fileTypeEnvSpecific && e1.fileType !== fileTypeEnvSpecific) {
                return e2First;
            }
        }
        /*
        {
          if (e1.fileType === '.page' && e2.fileType !== '.page') {
            return e2First
          }
          if (e2.fileType === '.page' && e1.fileType !== '.page') {
            return e1First
          }
        }
        */
        return noOrder;
    };
}
function assertNotAlreadyLoaded() {
    // The functionality of this file will fail if it's loaded more than
    // once; we assert that it's loaded only once.
    const alreadyLoaded = Symbol();
    const globalObject = (0, utils_1.isBrowser)() ? window : global;
    (0, utils_1.assert)(!globalObject[alreadyLoaded]);
    globalObject[alreadyLoaded] = true;
}
function createObjectWithDeprecationWarning() {
    return new Proxy({}, {
        get(...args) {
            (0, utils_1.assertWarning)(false, '`pageContext.pageExports` is deprecated. Use `pageContext.exports` instead, see https://vite-plugin-ssr.com/exports', { onlyOnce: true });
            return Reflect.get(...args);
        },
    });
}
const routeFile = (p) => p.fileType === '.page.route';
const clientFile = (p) => p.fileType === '.page.client';
const serverFile = (p) => p.fileType === '.page.server';
const defaultFile = (p) => p.isDefaultPageFile;
const and = (c1, c2) => (p) => c1(p) && c2(p);
const or = (c1, c2) => (p) => c1(p) || c2(p);
const not = (c) => (p) => !c(p);
const VPS_EXPORTS = {
    // Everywhere (almost)
    default: not(and(routeFile, defaultFile)),
    // Isomorphic
    render: or(clientFile, serverFile),
    onBeforeRender: not(routeFile),
    customExports: and(defaultFile, not(routeFile)),
    // `some.page.route.js`
    iKnowThePerformanceRisksOfAsyncRouteFunctions: and(routeFile, not(defaultFile)),
    // `_default.page.route.js`
    filesystemRoutingRoot: and(routeFile, defaultFile),
    onBeforeRoute: and(routeFile, defaultFile),
    // `some.page.js`
    Page: and(not(defaultFile), not(routeFile)),
    // `*.page.server.js`
    prerender: serverFile,
    passToClient: serverFile,
    // `some.page.server.js`
    doNotPrerender: and(serverFile, not(defaultFile)),
    // `_default.page.server.js`
    onBeforePrerender: and(serverFile, defaultFile),
    // `*.page.client.js`
    clientRouting: clientFile,
    onHydrationEnd: clientFile,
    onPageTransitionStart: clientFile,
    onPageTransitionEnd: clientFile,
    prefetchLinks: clientFile,
};
function assertExports(pageFiles, customExports) {
    customExports.forEach((customExportName) => {
        (0, utils_1.assertUsage)(!Object.keys(VPS_EXPORTS).includes(customExportName), `\`export { customExports }\` contains \`${customExportName}\` which is forbidden because it is an '\export\` already used by vite-plugin-ssr.`);
    });
    pageFiles.forEach((p) => {
        var _a;
        Object.keys((_a = p.fileExports) !== null && _a !== void 0 ? _a : {}).forEach((exportName) => {
            var _a;
            if ((_a = VPS_EXPORTS[exportName]) === null || _a === void 0 ? void 0 : _a.call(VPS_EXPORTS, p)) {
                return;
            }
            (0, utils_1.assertWarning)(customExports.includes(exportName), `Unknown \`export { ${exportName} }\` at ${p.filePath}. See https://vite-plugin-ssr/customExports if you want to define a custom export.`, { onlyOnce: `unkown-export-${exportName}` });
        });
    });
}
function getStringUnion(exportsAll, propName) {
    var _a, _b;
    return ((_b = (_a = exportsAll[propName]) === null || _a === void 0 ? void 0 : _a.map((e) => {
        (0, utils_1.assertUsage)((0, utils_1.hasProp)(e, 'exportValue', 'string[]'), `\`export { ${propName} }\` of ${e.filePath} should be an array of strings.`);
        return e.exportValue;
    }).flat()) !== null && _b !== void 0 ? _b : []);
}
exports.getStringUnion = getStringUnion;
function getAllPageIds(allPageFiles) {
    const fileIds = allPageFiles
        .filter(({ isDefaultPageFile }) => !isDefaultPageFile)
        .map(({ filePath }) => filePath)
        .map(determinePageId_1.determinePageId);
    const allPageIds = (0, utils_1.unique)(fileIds);
    return allPageIds;
}
function getPathDistance(pathA, pathB) {
    (0, utils_1.assertPosixPath)(pathA);
    (0, utils_1.assertPosixPath)(pathB);
    (0, utils_1.assert)(pathA.startsWith('/'));
    (0, utils_1.assert)(pathB.startsWith('/'));
    // Index of first different character
    let idx = 0;
    for (; idx < pathA.length && idx < pathB.length; idx++) {
        if (pathA[idx] !== pathB[idx])
            break;
    }
    const pathAWithoutCommon = pathA.slice(idx);
    const pathBWithoutCommon = pathB.slice(idx);
    const distanceA = pathAWithoutCommon.split('/').length;
    const distanceB = pathBWithoutCommon.split('/').length;
    const distance = distanceA + distanceB;
    return distance;
}
function isAncestorDefaultPage(pageId, defaultPageFilePath) {
    (0, utils_1.assertPosixPath)(pageId);
    (0, utils_1.assertPosixPath)(defaultPageFilePath);
    (0, utils_1.assert)(pageId.startsWith('/'));
    (0, utils_1.assert)(defaultPageFilePath.startsWith('/'));
    (0, utils_1.assert)(!pageId.endsWith('/'));
    (0, utils_1.assert)(!defaultPageFilePath.endsWith('/'));
    (0, utils_1.assert)(isDefaultFilePath(defaultPageFilePath));
    const defaultPageDir = (0, utils_1.slice)(defaultPageFilePath.split('/'), 0, -1).join('/');
    return pageId.startsWith(defaultPageDir);
}
