export { loadPageFiles };
export { getPageFilesAllClientSide };
export { getPageFilesAllServerSide };
export declare type PageContextExports = Awaited<ReturnType<typeof loadPageFiles>>;
export type { PageFile };
export { setPageFilesServerSide };
export { setPageFilesClientSide };
export { setPageFilesServerSideAsync };
export { getStringUnion };
declare const fileTypes: readonly [".page", ".page.server", ".page.route", ".page.client"];
declare type FileType = typeof fileTypes[number];
declare type PageFile = {
    filePath: string;
    fileType: FileType;
    fileExports?: Record<string, unknown>;
    loadFile?: () => Promise<void>;
    exportNames?: string[];
    loadExportNames?: () => Promise<void>;
    isRelevant: (pageId: string) => boolean;
    isDefaultPageFile: boolean;
    isRendererPageFile: boolean;
    isErrorPageFile: boolean;
    pageId: string;
};
declare function setPageFilesServerSide(pageFilesExports: unknown): void;
declare function setPageFilesServerSideAsync(getPageFilesExports: () => Promise<unknown>): void;
declare function setPageFilesClientSide(pageFilesExports: unknown): void;
declare function getPageFilesAllServerSide(isProduction: boolean): Promise<{
    pageFilesAll: PageFile[];
    allPageIds: string[];
}>;
declare function getPageFilesAllClientSide(): {
    pageFilesAll: PageFile[];
    allPageIds: string[];
};
declare type ExportsAll = Record<string, {
    filePath: string;
    exportValue: unknown;
}[]>;
declare function loadPageFiles(pageFilesAll: PageFile[], pageId: string, isForClientSide: boolean): Promise<{
    exports: Record<string, unknown>;
    pageExports: Record<string, unknown>;
    exportsAll: ExportsAll;
}>;
declare function getStringUnion(exportsAll: ExportsAll, propName: string): string[];
