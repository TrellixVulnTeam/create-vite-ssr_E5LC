var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RouteManager_currentPage, _RouteManager_queryRef, _RouteManager_listeners;
import * as React from 'react';
export class RouteManager {
    constructor(params) {
        _RouteManager_currentPage.set(this, null);
        _RouteManager_queryRef.set(this, null);
        _RouteManager_listeners.set(this, new Set());
        if (params) {
            __classPrivateFieldSet(this, _RouteManager_currentPage, params.initialPage, "f");
            __classPrivateFieldSet(this, _RouteManager_queryRef, params.queryRef, "f");
        }
    }
    get currentPage() {
        return __classPrivateFieldGet(this, _RouteManager_currentPage, "f");
    }
    get queryRef() {
        return __classPrivateFieldGet(this, _RouteManager_queryRef, "f");
    }
    setPage(page, queryRef) {
        __classPrivateFieldSet(this, _RouteManager_currentPage, page, "f");
        __classPrivateFieldSet(this, _RouteManager_queryRef, queryRef, "f");
        for (const listener of __classPrivateFieldGet(this, _RouteManager_listeners, "f")) {
            listener();
        }
    }
    addListener(listener) {
        __classPrivateFieldGet(this, _RouteManager_listeners, "f").add(listener);
    }
    deleteListener(listener) {
        __classPrivateFieldGet(this, _RouteManager_listeners, "f").delete(listener);
    }
}
_RouteManager_currentPage = new WeakMap(), _RouteManager_queryRef = new WeakMap(), _RouteManager_listeners = new WeakMap();
export const useRouteManager = (routeManager) => {
    const [transitioning, setTransitioning] = React.useState(false);
    const [{ currentPage, queryRef }, setRouterState] = React.useState({
        currentPage: routeManager.currentPage,
        queryRef: routeManager.queryRef,
    });
    const [, startTransition] = React.useTransition();
    React.useEffect(() => {
        const listener = () => {
            setTransitioning(true);
            startTransition(() => {
                setRouterState({
                    currentPage: routeManager.currentPage,
                    queryRef: routeManager.queryRef,
                });
                setTransitioning(false);
            });
        };
        routeManager.addListener(listener);
        return () => routeManager.deleteListener(listener);
    }, [routeManager, setRouterState, setTransitioning, startTransition]);
    return [currentPage, queryRef, transitioning];
};
