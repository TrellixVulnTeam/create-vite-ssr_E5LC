{
  "version": 3,
  "sources": ["../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/ReactRelayContext.js", "../../.store/@babel-runtime-npm-7.17.9-c52a5e9d27/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js", "../../.store/@babel-runtime-npm-7.17.9-c52a5e9d27/node_modules/@babel/runtime/helpers/assertThisInitialized.js", "../../.store/@babel-runtime-npm-7.17.9-c52a5e9d27/node_modules/@babel/runtime/helpers/setPrototypeOf.js", "../../.store/@babel-runtime-npm-7.17.9-c52a5e9d27/node_modules/@babel/runtime/helpers/inheritsLoose.js", "../../.store/@babel-runtime-npm-7.17.9-c52a5e9d27/node_modules/@babel/runtime/helpers/extends.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/assertFragmentMap.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/ReactRelayContainerUtils.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/ReactRelayQueryRendererContext.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/readContext.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/buildReactRelayContainer.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/isRelayEnvironment.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/RelayContext.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/ReactRelayFragmentContainer.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/ReactRelayLocalQueryRenderer.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/getRootVariablesForFragments.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/ReactRelayQueryFetcher.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/ReactRelayPaginationContainer.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/ReactRelayQueryRenderer.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/ReactRelayRefetchContainer.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/ProfilerContext.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/ReactRelayContext.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/EntryPointContainer.react.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/loadQuery.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/loadEntryPoint.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/RelayEnvironmentProvider.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useIsMountedRef.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useEntryPointLoader.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/LRUCache.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/SuspenseResource.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/QueryResource.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/FragmentResource.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useFragmentNode.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useStaticFragmentNodeWarning.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useFragment.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useFetchTrackingRef.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useLazyLoadQueryNode.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useMemoVariables.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useMemoOperationDescriptor.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useLazyLoadQuery.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useMutation.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useIsOperationNodeActive.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useLoadMoreFunction.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useQueryLoader.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useRefetchableFragmentNode.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/usePaginationFragment.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/usePreloadedQuery.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useRefetchableFragment.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useSubscribeToInvalidationState.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/relay-hooks/useSubscription.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/lib/index.js", "../../.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/index.js", "dep:react-relay"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar React = require('react');\n\nvar _require = require('relay-runtime'),\n    createRelayContext = _require.__internal.createRelayContext;\n\nmodule.exports = createRelayContext(React);", "function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inheritsLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar invariant = require('invariant');\n/**\n * Fail fast if the user supplies invalid fragments as input.\n */\n\n\nfunction assertFragmentMap(componentName, fragmentSpec) {\n  !(fragmentSpec && typeof fragmentSpec === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Could not create Relay Container for `%s`. ' + 'Expected a set of GraphQL fragments, got `%s` instead.', componentName, fragmentSpec) : invariant(false) : void 0;\n\n  for (var key in fragmentSpec) {\n    if (fragmentSpec.hasOwnProperty(key)) {\n      var fragment = fragmentSpec[key];\n      !(fragment && (typeof fragment === 'object' || typeof fragment === 'function')) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Could not create Relay Container for `%s`. ' + 'The value of fragment `%s` was expected to be a fragment, got `%s` instead.', componentName, key, fragment) : invariant(false) : void 0;\n    }\n  }\n}\n\nmodule.exports = assertFragmentMap;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nfunction getComponentName(component) {\n  return component.displayName || component.name || 'Component';\n}\n\nfunction getContainerName(Component) {\n  return 'Relay(' + getComponentName(Component) + ')';\n}\n\nmodule.exports = {\n  getComponentName: getComponentName,\n  getContainerName: getContainerName\n};", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar React = require('react');\n\nmodule.exports = React.createContext({\n  rootIsQueryRenderer: false\n});", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar React = require('react');\n\nvar _React$__SECRET_INTER =\n/* $FlowFixMe[prop-missing] Flow doesn't know about React's internals for\n * good reason, but for now, Relay needs the dispatcher to read context. */\nReact.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,\n    ReactCurrentDispatcher = _React$__SECRET_INTER.ReactCurrentDispatcher,\n    ReactCurrentOwner = _React$__SECRET_INTER.ReactCurrentOwner;\n\nfunction readContext(Context) {\n  var dispatcher = ReactCurrentDispatcher != null ? ReactCurrentDispatcher.current : ReactCurrentOwner.currentDispatcher;\n  return dispatcher.readContext(Context);\n}\n\nmodule.exports = readContext;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar assertFragmentMap = require('./assertFragmentMap');\n\nvar _require = require('./ReactRelayContainerUtils'),\n    getComponentName = _require.getComponentName,\n    getContainerName = _require.getContainerName;\n\nvar ReactRelayContext = require('./ReactRelayContext');\n\nvar ReactRelayQueryRendererContext = require('./ReactRelayQueryRendererContext');\n\nvar readContext = require('./readContext');\n\nvar invariant = require('invariant');\n\nvar React = require('react');\n\nvar _require2 = require('relay-runtime'),\n    getFragment = _require2.getFragment;\n\n/**\n * Helper to create the Relay HOCs with ref forwarding, setting the displayName\n * and reading the React context.\n */\nfunction buildReactRelayContainer(ComponentClass, fragmentSpec, createContainerWithFragments) {\n  // Sanity-check user-defined fragment input\n  var containerName = getContainerName(ComponentClass);\n  assertFragmentMap(getComponentName(ComponentClass), fragmentSpec);\n  var fragments = {};\n\n  for (var key in fragmentSpec) {\n    fragments[key] = getFragment(fragmentSpec[key]);\n  }\n\n  var Container = createContainerWithFragments(ComponentClass, fragments);\n  Container.displayName = containerName;\n\n  function forwardRef(props, ref) {\n    var _queryRendererContext;\n\n    var context = readContext(ReactRelayContext);\n    !(context != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '`%s` tried to render a context that was not valid this means that ' + '`%s` was rendered outside of a query renderer.', containerName, containerName) : invariant(false) : void 0;\n    var queryRendererContext = readContext(ReactRelayQueryRendererContext);\n    return /*#__PURE__*/React.createElement(Container, (0, _extends2[\"default\"])({}, props, {\n      __relayContext: context,\n      __rootIsQueryRenderer: (_queryRendererContext = queryRendererContext === null || queryRendererContext === void 0 ? void 0 : queryRendererContext.rootIsQueryRenderer) !== null && _queryRendererContext !== void 0 ? _queryRendererContext : false,\n      componentRef: props.componentRef || ref\n    }));\n  }\n\n  forwardRef.displayName = containerName;\n  var ForwardContainer = React.forwardRef(forwardRef);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // Used by RelayModernTestUtils\n    ForwardContainer.__ComponentClass = ComponentClass;\n    ForwardContainer.displayName = containerName;\n  } // $FlowFixMe[incompatible-return]\n\n\n  return ForwardContainer;\n}\n\nmodule.exports = buildReactRelayContainer;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n/**\n * Determine if a given value is an object that implements the `Environment`\n * interface defined in `RelayEnvironmentTypes`.\n */\n\nfunction isRelayEnvironment(environment) {\n  return typeof environment === 'object' && environment !== null && // TODO: add applyMutation/sendMutation once ready in both cores\n  typeof environment.check === 'function' && typeof environment.lookup === 'function' && typeof environment.retain === 'function' && typeof environment.execute === 'function' && typeof environment.subscribe === 'function';\n}\n\nmodule.exports = isRelayEnvironment;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar isRelayEnvironment = require('./isRelayEnvironment');\n\nvar invariant = require('invariant');\n/**\n * Asserts that the input is a matches the `RelayContext` type defined in\n * `RelayEnvironmentTypes` and returns it as that type.\n */\n\n\nfunction assertRelayContext(relay) {\n  !isRelayContext(relay) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayContext: Expected `context.relay` to be an object conforming to ' + 'the `RelayContext` interface, got `%s`.', relay) : invariant(false) : void 0;\n  return relay;\n}\n/**\n * Determine if the input is a plain object that matches the `RelayContext`\n * type defined in `RelayEnvironmentTypes`.\n */\n\n\nfunction isRelayContext(context) {\n  return typeof context === 'object' && context !== null && !Array.isArray(context) && isRelayEnvironment(context.environment);\n}\n\nmodule.exports = {\n  assertRelayContext: assertRelayContext,\n  isRelayContext: isRelayContext\n};", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar buildReactRelayContainer = require('./buildReactRelayContainer');\n\nvar _require = require('./ReactRelayContainerUtils'),\n    getContainerName = _require.getContainerName;\n\nvar _require2 = require('./RelayContext'),\n    assertRelayContext = _require2.assertRelayContext;\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar React = require('react');\n\nvar _require3 = require('relay-runtime'),\n    createFragmentSpecResolver = _require3.createFragmentSpecResolver,\n    getDataIDsFromObject = _require3.getDataIDsFromObject,\n    isScalarAndEqual = _require3.isScalarAndEqual;\n\n/**\n * Composes a React component class, returning a new class that intercepts\n * props, resolving them with the provided fragments and subscribing for\n * updates.\n */\nfunction createContainerWithFragments(Component, fragments) {\n  var _class, _temp;\n\n  var containerName = getContainerName(Component);\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    (0, _inheritsLoose2[\"default\"])(_class, _React$Component);\n\n    function _class(props) {\n      var _props$__rootIsQueryR, _this;\n\n      _this = _React$Component.call(this, props) || this;\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleFragmentDataUpdate\", function () {\n        var resolverFromThisUpdate = _this.state.resolver;\n\n        _this.setState(function (updatedState) {\n          return (// If this event belongs to the current data source, update.\n            // Otherwise we should ignore it.\n            resolverFromThisUpdate === updatedState.resolver ? {\n              data: updatedState.resolver.resolve(),\n              relayProp: getRelayProp(updatedState.relayProp.environment)\n            } : null\n          );\n        });\n      });\n      var relayContext = assertRelayContext(props.__relayContext);\n      var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false; // Do not provide a subscription/callback here.\n      // It is possible for this render to be interrupted or aborted,\n      // In which case the subscription would cause a leak.\n      // We will add the subscription in componentDidMount().\n\n      var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);\n      _this.state = {\n        data: resolver.resolve(),\n        prevProps: props,\n        prevPropsContext: relayContext,\n        relayProp: getRelayProp(relayContext.environment),\n        resolver: resolver\n      };\n      return _this;\n    }\n    /**\n     * When new props are received, read data for the new props and subscribe\n     * for updates. Props may be the same in which case previous data and\n     * subscriptions can be reused.\n     */\n\n\n    _class.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$__rootIsQu;\n\n      // Any props change could impact the query, so we mirror props in state.\n      // This is an unusual pattern, but necessary for this container usecase.\n      var prevProps = prevState.prevProps;\n      var relayContext = assertRelayContext(nextProps.__relayContext);\n      var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;\n      var prevIDs = getDataIDsFromObject(fragments, prevProps);\n      var nextIDs = getDataIDsFromObject(fragments, nextProps);\n      var resolver = prevState.resolver; // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n\n      if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevIDs, nextIDs)) {\n        // Do not provide a subscription/callback here.\n        // It is possible for this render to be interrupted or aborted,\n        // In which case the subscription would cause a leak.\n        // We will add the subscription in componentDidUpdate().\n        resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);\n        return {\n          data: resolver.resolve(),\n          prevPropsContext: relayContext,\n          prevProps: nextProps,\n          relayProp: getRelayProp(relayContext.environment),\n          resolver: resolver\n        };\n      } else {\n        resolver.setProps(nextProps);\n        var data = resolver.resolve();\n\n        if (data !== prevState.data) {\n          return {\n            data: data,\n            prevProps: nextProps,\n            prevPropsContext: relayContext,\n            relayProp: getRelayProp(relayContext.environment)\n          };\n        }\n      }\n\n      return null;\n    };\n\n    var _proto = _class.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      this._subscribeToNewResolverAndRerenderIfStoreHasChanged();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      if (this.state.resolver !== prevState.resolver) {\n        prevState.resolver.dispose();\n\n        this._subscribeToNewResolverAndRerenderIfStoreHasChanged();\n      } else {\n        this._rerenderIfStoreHasChanged();\n      }\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this.state.resolver.dispose();\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      // Short-circuit if any Relay-related data has changed\n      if (nextState.data !== this.state.data) {\n        return true;\n      } // Otherwise, for convenience short-circuit if all non-Relay props\n      // are scalar and equal\n\n\n      var keys = Object.keys(nextProps);\n\n      for (var ii = 0; ii < keys.length; ii++) {\n        var _key = keys[ii];\n\n        if (_key === '__relayContext') {\n          if (nextState.prevPropsContext.environment !== this.state.prevPropsContext.environment) {\n            return true;\n          }\n        } else {\n          if (!fragments.hasOwnProperty(_key) && !isScalarAndEqual(nextProps[_key], this.props[_key])) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Render new data for the existing props/context.\n     */\n    ;\n\n    _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          resolver = _this$state.resolver; // External values could change between render and commit.\n      // Check for this case, even though it requires an extra store read.\n\n      var maybeNewData = resolver.resolve();\n\n      if (data !== maybeNewData) {\n        this.setState({\n          data: maybeNewData\n        });\n      }\n    };\n\n    _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {\n      var _this$state2 = this.state,\n          data = _this$state2.data,\n          resolver = _this$state2.resolver;\n      var maybeNewData = resolver.resolve(); // Event listeners are only safe to add during the commit phase,\n      // So they won't leak if render is interrupted or errors.\n\n      resolver.setCallback(this.props, this._handleFragmentDataUpdate); // External values could change between render and commit.\n      // Check for this case, even though it requires an extra store read.\n\n      if (data !== maybeNewData) {\n        this.setState({\n          data: maybeNewData\n        });\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props = this.props,\n          componentRef = _this$props.componentRef,\n          __relayContext = _this$props.__relayContext,\n          __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer,\n          props = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props, [\"componentRef\", \"__relayContext\", \"__rootIsQueryRenderer\"]);\n      return React.createElement(Component, (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, props), this.state.data), {}, {\n        ref: componentRef,\n        relay: this.state.relayProp\n      }));\n    };\n\n    return _class;\n  }(React.Component), (0, _defineProperty2[\"default\"])(_class, \"displayName\", containerName), _temp;\n}\n\nfunction getRelayProp(environment) {\n  return {\n    environment: environment\n  };\n}\n/**\n * Wrap the basic `createContainer()` function with logic to adapt to the\n * `context.relay.environment` in which it is rendered. Specifically, the\n * extraction of the environment-specific version of fragments in the\n * `fragmentSpec` is memoized once per environment, rather than once per\n * instance of the container constructed/rendered.\n */\n\n\nfunction createContainer(Component, fragmentSpec) {\n  // $FlowFixMe[incompatible-return]\n  return buildReactRelayContainer(Component, fragmentSpec, createContainerWithFragments);\n}\n\nmodule.exports = {\n  createContainer: createContainer\n};", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar ReactRelayContext = require('./ReactRelayContext');\n\nvar ReactRelayQueryRendererContext = require('./ReactRelayQueryRendererContext');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar React = require('react');\n\nvar _require = require('relay-runtime'),\n    createOperationDescriptor = _require.createOperationDescriptor,\n    deepFreeze = _require.deepFreeze,\n    getRequest = _require.getRequest;\n\nvar useLayoutEffect = React.useLayoutEffect,\n    useState = React.useState,\n    useRef = React.useRef,\n    useMemo = React.useMemo;\nvar queryRendererContext = {\n  rootIsQueryRenderer: true\n};\n\nfunction useDeepCompare(value) {\n  var latestValue = React.useRef(value);\n\n  if (!areEqual(latestValue.current, value)) {\n    if (process.env.NODE_ENV !== \"production\") {\n      deepFreeze(value);\n    }\n\n    latestValue.current = value;\n  }\n\n  return latestValue.current;\n}\n\nfunction ReactRelayLocalQueryRenderer(props) {\n  var environment = props.environment,\n      query = props.query,\n      variables = props.variables,\n      render = props.render;\n  var latestVariables = useDeepCompare(variables);\n  var operation = useMemo(function () {\n    var request = getRequest(query);\n    return createOperationDescriptor(request, latestVariables);\n  }, [query, latestVariables]);\n  var relayContext = useMemo(function () {\n    return {\n      environment: environment\n    };\n  }, [environment]); // Use a ref to prevent rendering twice when data changes\n  // because of props change\n\n  var dataRef = useRef(null);\n\n  var _useState = useState(null),\n      forceUpdate = _useState[1];\n\n  var cleanupFnRef = useRef(null);\n  var snapshot = useMemo(function () {\n    environment.check(operation);\n    var res = environment.lookup(operation.fragment);\n    dataRef.current = res.data; // Run effects here so that the data can be retained\n    // and subscribed before the component commits\n\n    var retainDisposable = environment.retain(operation);\n    var subscribeDisposable = environment.subscribe(res, function (newSnapshot) {\n      dataRef.current = newSnapshot.data;\n      forceUpdate(dataRef.current);\n    });\n    var disposed = false;\n\n    function nextCleanupFn() {\n      if (!disposed) {\n        disposed = true;\n        cleanupFnRef.current = null;\n        retainDisposable.dispose();\n        subscribeDisposable.dispose();\n      }\n    }\n\n    if (cleanupFnRef.current) {\n      cleanupFnRef.current();\n    }\n\n    cleanupFnRef.current = nextCleanupFn;\n    return res;\n  }, [environment, operation]);\n  useLayoutEffect(function () {\n    var cleanupFn = cleanupFnRef.current;\n    return function () {\n      cleanupFn && cleanupFn();\n    };\n  }, [snapshot]);\n  return /*#__PURE__*/React.createElement(ReactRelayContext.Provider, {\n    value: relayContext\n  }, /*#__PURE__*/React.createElement(ReactRelayQueryRendererContext.Provider, {\n    value: queryRendererContext\n  }, render({\n    props: dataRef.current\n  })));\n}\n\nmodule.exports = ReactRelayLocalQueryRenderer;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _require = require('relay-runtime'),\n    getSelector = _require.getSelector;\n\nfunction getRootVariablesForFragments(fragments, props) {\n  var rootVariables = {}; // NOTE: For extra safety, we make sure the rootVariables include the\n  // variables from all owners in this fragmentSpec, even though they\n  // should all point to the same owner\n\n  Object.keys(fragments).forEach(function (key) {\n    var _selector$selectors$, _selector$selectors$2, _selector$owner$varia;\n\n    var fragmentNode = fragments[key];\n    var fragmentRef = props[key];\n    var selector = getSelector(fragmentNode, fragmentRef);\n    var fragmentOwnerVariables = selector != null && selector.kind === 'PluralReaderSelector' ? (_selector$selectors$ = (_selector$selectors$2 = selector.selectors[0]) === null || _selector$selectors$2 === void 0 ? void 0 : _selector$selectors$2.owner.variables) !== null && _selector$selectors$ !== void 0 ? _selector$selectors$ : {} : (_selector$owner$varia = selector === null || selector === void 0 ? void 0 : selector.owner.variables) !== null && _selector$owner$varia !== void 0 ? _selector$owner$varia : {};\n    rootVariables = (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, rootVariables), fragmentOwnerVariables);\n  });\n  return rootVariables;\n}\n\nmodule.exports = getRootVariablesForFragments;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar invariant = require('invariant');\n\nvar _require = require('relay-runtime'),\n    fetchQuery = _require.__internal.fetchQuery,\n    createOperationDescriptor = _require.createOperationDescriptor,\n    isRelayModernEnvironment = _require.isRelayModernEnvironment;\n\nvar ReactRelayQueryFetcher = /*#__PURE__*/function () {\n  function ReactRelayQueryFetcher(args) {\n    (0, _defineProperty2[\"default\"])(this, \"_selectionReferences\", []);\n    (0, _defineProperty2[\"default\"])(this, \"_callOnDataChangeWhenSet\", false);\n\n    if (args != null) {\n      this._cacheSelectionReference = args.cacheSelectionReference;\n      this._selectionReferences = args.selectionReferences;\n    }\n  }\n\n  var _proto = ReactRelayQueryFetcher.prototype;\n\n  _proto.getSelectionReferences = function getSelectionReferences() {\n    return {\n      cacheSelectionReference: this._cacheSelectionReference,\n      selectionReferences: this._selectionReferences\n    };\n  };\n\n  _proto.lookupInStore = function lookupInStore(environment, operation, fetchPolicy) {\n    if (fetchPolicy === 'store-and-network' || fetchPolicy === 'store-or-network') {\n      if (environment.check(operation).status === 'available') {\n        this._retainCachedOperation(environment, operation);\n\n        return environment.lookup(operation.fragment);\n      }\n    }\n\n    return null;\n  };\n\n  _proto.execute = function execute(_ref) {\n    var _this = this;\n\n    var environment = _ref.environment,\n        operation = _ref.operation,\n        _ref$preservePrevious = _ref.preservePreviousReferences,\n        preservePreviousReferences = _ref$preservePrevious === void 0 ? false : _ref$preservePrevious;\n    var reference = environment.retain(operation);\n\n    var error = function error() {\n      // We may have partially fulfilled the request, so let the next request\n      // or the unmount dispose of the references.\n      _this._selectionReferences = _this._selectionReferences.concat(reference);\n    };\n\n    var complete = function complete() {\n      if (!preservePreviousReferences) {\n        _this.disposeSelectionReferences();\n      }\n\n      _this._selectionReferences = _this._selectionReferences.concat(reference);\n    };\n\n    var unsubscribe = function unsubscribe() {\n      // Let the next request or the unmount code dispose of the references.\n      // We may have partially fulfilled the request.\n      _this._selectionReferences = _this._selectionReferences.concat(reference);\n    };\n\n    if (!isRelayModernEnvironment(environment)) {\n      return environment.execute({\n        operation: operation\n      })[\"do\"]({\n        error: error,\n        complete: complete,\n        unsubscribe: unsubscribe\n      });\n    }\n\n    return fetchQuery(environment, operation)[\"do\"]({\n      error: error,\n      complete: complete,\n      unsubscribe: unsubscribe\n    });\n  };\n\n  _proto.setOnDataChange = function setOnDataChange(onDataChange) {\n    !this._fetchOptions ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayQueryFetcher: `setOnDataChange` should have been called after having called `fetch`') : invariant(false) : void 0;\n\n    if (typeof onDataChange === 'function') {\n      // Mutate the most recent fetchOptions in place,\n      // So that in-progress requests can access the updated callback.\n      this._fetchOptions.onDataChangeCallbacks = this._fetchOptions.onDataChangeCallbacks || [];\n\n      this._fetchOptions.onDataChangeCallbacks.push(onDataChange);\n\n      if (this._callOnDataChangeWhenSet) {\n        // We don't reset '_callOnDataChangeWhenSet' because another callback may be set\n        if (this._error != null) {\n          onDataChange({\n            error: this._error\n          });\n        } else if (this._snapshot != null) {\n          onDataChange({\n            snapshot: this._snapshot\n          });\n        }\n      }\n    }\n  }\n  /**\n   * `fetch` fetches the data for the given operation.\n   * If a result is immediately available synchronously, it will be synchronously\n   * returned by this function.\n   *\n   * Otherwise, the fetched result will be communicated via the `onDataChange` callback.\n   * `onDataChange` will be called with the first result (**if it wasn't returned synchronously**),\n   * and then subsequently whenever the data changes.\n   */\n  ;\n\n  _proto.fetch = function fetch(fetchOptions, cacheConfigOverride) {\n    var _this2 = this;\n\n    var environment = fetchOptions.environment,\n        operation = fetchOptions.operation,\n        onDataChange = fetchOptions.onDataChange;\n    var fetchHasReturned = false;\n\n    var _error;\n\n    this.disposeRequest();\n    var oldOnDataChangeCallbacks = this._fetchOptions && this._fetchOptions.onDataChangeCallbacks;\n    this._fetchOptions = {\n      environment: environment,\n      onDataChangeCallbacks: oldOnDataChangeCallbacks || [],\n      operation: operation\n    };\n\n    if (onDataChange && this._fetchOptions.onDataChangeCallbacks.indexOf(onDataChange) === -1) {\n      this._fetchOptions.onDataChangeCallbacks.push(onDataChange);\n    }\n\n    var operationOverride = cacheConfigOverride ? createOperationDescriptor(operation.request.node, operation.request.variables, cacheConfigOverride) : operation;\n    var request = this.execute({\n      environment: environment,\n      operation: operationOverride\n    })[\"finally\"](function () {\n      _this2._pendingRequest = null;\n    }).subscribe({\n      next: function next() {\n        // If we received a response,\n        // Make a note that to notify the callback when it's later added.\n        _this2._callOnDataChangeWhenSet = true;\n        _this2._error = null; // Only notify of the first result if `next` is being called **asynchronously**\n        // (i.e. after `fetch` has returned).\n\n        _this2._onQueryDataAvailable({\n          notifyFirstResult: fetchHasReturned\n        });\n      },\n      error: function error(err) {\n        // If we received a response when we didn't have a change callback,\n        // Make a note that to notify the callback when it's later added.\n        _this2._callOnDataChangeWhenSet = true;\n        _this2._error = err;\n        _this2._snapshot = null;\n        var onDataChangeCallbacks = _this2._fetchOptions && _this2._fetchOptions.onDataChangeCallbacks; // Only notify of error if `error` is being called **asynchronously**\n        // (i.e. after `fetch` has returned).\n\n        if (fetchHasReturned) {\n          if (onDataChangeCallbacks) {\n            onDataChangeCallbacks.forEach(function (onDataChange) {\n              onDataChange({\n                error: err\n              });\n            });\n          }\n        } else {\n          _error = err;\n        }\n      }\n    });\n    this._pendingRequest = {\n      dispose: function dispose() {\n        request.unsubscribe();\n      }\n    };\n    fetchHasReturned = true;\n\n    if (_error) {\n      throw _error;\n    }\n\n    return this._snapshot;\n  };\n\n  _proto.retry = function retry(cacheConfigOverride) {\n    !this._fetchOptions ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayQueryFetcher: `retry` should be called after having called `fetch`') : invariant(false) : void 0;\n    return this.fetch({\n      environment: this._fetchOptions.environment,\n      operation: this._fetchOptions.operation,\n      onDataChange: null // If there are onDataChangeCallbacks they will be reused\n\n    }, cacheConfigOverride);\n  };\n\n  _proto.dispose = function dispose() {\n    this.disposeRequest();\n    this.disposeSelectionReferences();\n  };\n\n  _proto.disposeRequest = function disposeRequest() {\n    this._error = null;\n    this._snapshot = null; // order is important, dispose of pendingFetch before selectionReferences\n\n    if (this._pendingRequest) {\n      this._pendingRequest.dispose();\n    }\n\n    if (this._rootSubscription) {\n      this._rootSubscription.dispose();\n\n      this._rootSubscription = null;\n    }\n  };\n\n  _proto._retainCachedOperation = function _retainCachedOperation(environment, operation) {\n    this._disposeCacheSelectionReference();\n\n    this._cacheSelectionReference = environment.retain(operation);\n  };\n\n  _proto._disposeCacheSelectionReference = function _disposeCacheSelectionReference() {\n    this._cacheSelectionReference && this._cacheSelectionReference.dispose();\n    this._cacheSelectionReference = null;\n  };\n\n  _proto.disposeSelectionReferences = function disposeSelectionReferences() {\n    this._disposeCacheSelectionReference();\n\n    this._selectionReferences.forEach(function (r) {\n      return r.dispose();\n    });\n\n    this._selectionReferences = [];\n  };\n\n  _proto._onQueryDataAvailable = function _onQueryDataAvailable(_ref2) {\n    var _this3 = this;\n\n    var notifyFirstResult = _ref2.notifyFirstResult;\n    !this._fetchOptions ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayQueryFetcher: `_onQueryDataAvailable` should have been called after having called `fetch`') : invariant(false) : void 0;\n    var _this$_fetchOptions = this._fetchOptions,\n        environment = _this$_fetchOptions.environment,\n        onDataChangeCallbacks = _this$_fetchOptions.onDataChangeCallbacks,\n        operation = _this$_fetchOptions.operation; // `_onQueryDataAvailable` can be called synchronously the first time and can be called\n    // multiple times by network layers that support data subscriptions.\n    // Wait until the first payload to call `onDataChange` and subscribe for data updates.\n\n    if (this._snapshot) {\n      return;\n    }\n\n    this._snapshot = environment.lookup(operation.fragment); // Subscribe to changes in the data of the root fragment\n\n    this._rootSubscription = environment.subscribe(this._snapshot, function (snapshot) {\n      // Read from this._fetchOptions in case onDataChange() was lazily added.\n      if (_this3._fetchOptions != null) {\n        var maybeNewOnDataChangeCallbacks = _this3._fetchOptions.onDataChangeCallbacks;\n\n        if (Array.isArray(maybeNewOnDataChangeCallbacks)) {\n          maybeNewOnDataChangeCallbacks.forEach(function (onDataChange) {\n            return onDataChange({\n              snapshot: snapshot\n            });\n          });\n        }\n      }\n    });\n\n    if (this._snapshot && notifyFirstResult && Array.isArray(onDataChangeCallbacks)) {\n      var snapshot = this._snapshot;\n      onDataChangeCallbacks.forEach(function (onDataChange) {\n        return onDataChange({\n          snapshot: snapshot\n        });\n      });\n    }\n  };\n\n  return ReactRelayQueryFetcher;\n}();\n\nmodule.exports = ReactRelayQueryFetcher;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectSpread3 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar buildReactRelayContainer = require('./buildReactRelayContainer');\n\nvar getRootVariablesForFragments = require('./getRootVariablesForFragments');\n\nvar _require = require('./ReactRelayContainerUtils'),\n    getComponentName = _require.getComponentName,\n    getContainerName = _require.getContainerName;\n\nvar ReactRelayContext = require('./ReactRelayContext');\n\nvar ReactRelayQueryFetcher = require('./ReactRelayQueryFetcher');\n\nvar _require2 = require('./RelayContext'),\n    assertRelayContext = _require2.assertRelayContext;\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require('invariant');\n\nvar React = require('react');\n\nvar _require3 = require('relay-runtime'),\n    ConnectionInterface = _require3.ConnectionInterface,\n    Observable = _require3.Observable,\n    RelayFeatureFlags = _require3.RelayFeatureFlags,\n    createFragmentSpecResolver = _require3.createFragmentSpecResolver,\n    createOperationDescriptor = _require3.createOperationDescriptor,\n    getDataIDsFromObject = _require3.getDataIDsFromObject,\n    getRequest = _require3.getRequest,\n    getVariablesFromObject = _require3.getVariablesFromObject,\n    isScalarAndEqual = _require3.isScalarAndEqual;\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar FORWARD = 'forward';\n\n/**\n * Extends the functionality of RelayFragmentContainer by providing a mechanism\n * to load more data from a connection.\n *\n * # Configuring a PaginationContainer\n *\n * PaginationContainer accepts the standard FragmentContainer arguments and an\n * additional `connectionConfig` argument:\n *\n * - `Component`: the component to be wrapped/rendered.\n * - `fragments`: an object whose values are `graphql` fragments. The object\n *   keys determine the prop names by which fragment data is available.\n * - `connectionConfig`: an object that determines how to load more connection\n *   data. Details below.\n *\n * # Loading More Data\n *\n * Use `props.relay.hasMore()` to determine if there are more items to load.\n *\n * ```\n * hasMore(): boolean\n * ```\n *\n * Use `props.relay.isLoading()` to determine if a previous call to `loadMore()`\n * is still pending. This is convenient for avoiding duplicate load calls.\n *\n * ```\n * isLoading(): boolean\n * ```\n *\n * Use `props.relay.loadMore()` to load more items. This will return null if\n * there are no more items to fetch, otherwise it will fetch more items and\n * return a Disposable that can be used to cancel the fetch.\n *\n * `pageSize` should be the number of *additional* items to fetch (not the\n * total).\n *\n * ```\n * loadMore(pageSize: number, callback: ?(error: ?Error) => void): ?Disposable\n * ```\n *\n * A complete example:\n *\n * ```\n * class Foo extends React.Component {\n *   ...\n *   _onEndReached() {\n *     if (!this.props.relay.hasMore() || this.props.relay.isLoading()) {\n *       return;\n *     }\n *     this.props.relay.loadMore(10);\n *   }\n *   ...\n * }\n * ```\n *\n * # Connection Config\n *\n * Here's an example, followed by details of each config property:\n *\n * ```\n * ReactRelayPaginationContainer.createContainer(\n *   Component,\n *   {\n *     user: graphql`fragment FriendsFragment on User {\n *       friends(after: $afterCursor first: $count) @connection {\n *         edges { ... }\n *         pageInfo {\n *           startCursor\n *           endCursor\n *           hasNextPage\n *           hasPreviousPage\n *         }\n *       }\n *     }`,\n *   },\n *   {\n *     direction: 'forward',\n *     getConnectionFromProps(props) {\n *       return props.user && props.user.friends;\n *     },\n *     getFragmentVariables(vars, totalCount) {\n *       // The component presumably wants *all* edges, not just those after\n *       // the cursor, so notice that we don't set $afterCursor here.\n *       return {\n *         ...vars,\n *         count: totalCount,\n *       };\n *     },\n *     getVariables(props, {count, cursor}, fragmentVariables) {\n *       return {\n *         id: props.user.id,\n *         afterCursor: cursor,\n *         count,\n *       },\n *     },\n *     query: graphql`\n *       query FriendsQuery($id: ID!, $afterCursor: ID, $count: Int!) {\n *         node(id: $id) {\n *           ...FriendsFragment\n *         }\n *       }\n *     `,\n *   }\n * );\n * ```\n *\n * ## Config Properties\n *\n * - `direction`: Either \"forward\" to indicate forward pagination using\n *   after/first, or \"backward\" to indicate backward pagination using\n *   before/last.\n * - `getConnectionFromProps(props)`: PaginationContainer doesn't magically know\n *   which connection data you mean to fetch more of (a container might fetch\n *   multiple connections, but can only paginate one of them). This function is\n *   given the fragment props only (not full props), and should return the\n *   connection data. See the above example that returns the friends data via\n *   `props.user.friends`.\n * - `getFragmentVariables(previousVars, totalCount)`: Given the previous variables\n *   and the new total number of items, get the variables to use when reading\n *   your fragments. Typically this means setting whatever your local \"count\"\n *   variable is to the value of `totalCount`. See the example.\n * - `getVariables(props, {count, cursor})`: Get the variables to use when\n *   fetching the pagination `query`. You may determine the root object id from\n *   props (see the example that uses `props.user.id`) and may also set whatever\n *   variables you use for the after/first/before/last calls based on the count\n *   and cursor.\n * - `query`: A query to use when fetching more connection data. This should\n *   typically reference one of the container's fragment (as in the example)\n *   to ensure that all the necessary fields for sub-components are fetched.\n */\nfunction createGetConnectionFromProps(metadata) {\n  var path = metadata.path;\n  !path ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Unable to synthesize a ' + 'getConnectionFromProps function.') : invariant(false) : void 0;\n  return function (props) {\n    var data = props[metadata.fragmentName];\n\n    for (var i = 0; i < path.length; i++) {\n      if (!data || typeof data !== 'object') {\n        return null;\n      }\n\n      data = data[path[i]];\n    }\n\n    return data;\n  };\n}\n\nfunction createGetFragmentVariables(metadata) {\n  var countVariable = metadata.count;\n  !countVariable ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Unable to synthesize a ' + 'getFragmentVariables function.') : invariant(false) : void 0;\n  return function (prevVars, totalCount) {\n    return (0, _objectSpread3[\"default\"])((0, _objectSpread3[\"default\"])({}, prevVars), {}, (0, _defineProperty2[\"default\"])({}, countVariable, totalCount));\n  };\n}\n\nfunction findConnectionMetadata(fragments) {\n  var foundConnectionMetadata = null;\n  var isRelayModern = false;\n\n  for (var fragmentName in fragments) {\n    var fragment = fragments[fragmentName];\n    var connectionMetadata = fragment.metadata && fragment.metadata.connection; // HACK: metadata is always set to `undefined` in classic. In modern, even\n    // if empty, it is set to null (never undefined). We use that knowlege to\n    // check if we're dealing with classic or modern\n\n    if (fragment.metadata !== undefined) {\n      isRelayModern = true;\n    }\n\n    if (connectionMetadata) {\n      !(connectionMetadata.length === 1) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Only a single @connection is ' + 'supported, `%s` has %s.', fragmentName, connectionMetadata.length) : invariant(false) : void 0;\n      !!foundConnectionMetadata ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Only a single fragment with ' + '@connection is supported.') : invariant(false) : void 0;\n      foundConnectionMetadata = (0, _objectSpread3[\"default\"])((0, _objectSpread3[\"default\"])({}, connectionMetadata[0]), {}, {\n        fragmentName: fragmentName\n      });\n    }\n  }\n\n  !(!isRelayModern || foundConnectionMetadata !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: A @connection directive must be present.') : invariant(false) : void 0;\n  return foundConnectionMetadata || {};\n}\n\nfunction toObserver(observerOrCallback) {\n  return typeof observerOrCallback === 'function' ? {\n    error: observerOrCallback,\n    complete: observerOrCallback,\n    unsubscribe: function unsubscribe(subscription) {\n      typeof observerOrCallback === 'function' && observerOrCallback();\n    }\n  } : observerOrCallback || {};\n}\n\nfunction createContainerWithFragments(Component, fragments, connectionConfig) {\n  var _class, _temp;\n\n  var componentName = getComponentName(Component);\n  var containerName = getContainerName(Component);\n  var metadata = findConnectionMetadata(fragments);\n  var getConnectionFromProps = connectionConfig.getConnectionFromProps || createGetConnectionFromProps(metadata);\n  var direction = connectionConfig.direction || metadata.direction;\n  !direction ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Unable to infer direction of the ' + 'connection, possibly because both first and last are provided.') : invariant(false) : void 0;\n  var getFragmentVariables = connectionConfig.getFragmentVariables || createGetFragmentVariables(metadata);\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    (0, _inheritsLoose2[\"default\"])(_class, _React$Component);\n\n    function _class(props) {\n      var _props$__rootIsQueryR, _this;\n\n      _this = _React$Component.call(this, props) || this;\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleFragmentDataUpdate\", function () {\n        _this.setState({\n          data: _this._resolver.resolve()\n        });\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_hasMore\", function () {\n        var connectionData = _this._getConnectionData();\n\n        return !!(connectionData && connectionData.hasMore && connectionData.cursor);\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_isLoading\", function () {\n        return !!_this._refetchSubscription;\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_refetchConnection\", function (totalCount, observerOrCallback, refetchVariables) {\n        if (!_this._canFetchPage('refetchConnection')) {\n          return {\n            dispose: function dispose() {}\n          };\n        }\n\n        _this._refetchVariables = refetchVariables;\n        var paginatingVariables = {\n          count: totalCount,\n          cursor: null,\n          totalCount: totalCount\n        };\n\n        var fetch = _this._fetchPage(paginatingVariables, toObserver(observerOrCallback), {\n          force: true\n        });\n\n        return {\n          dispose: fetch.unsubscribe\n        };\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_loadMore\", function (pageSize, observerOrCallback, options) {\n        if (!_this._canFetchPage('loadMore')) {\n          return {\n            dispose: function dispose() {}\n          };\n        }\n\n        var observer = toObserver(observerOrCallback);\n\n        var connectionData = _this._getConnectionData();\n\n        if (!connectionData) {\n          Observable.create(function (sink) {\n            return sink.complete();\n          }).subscribe(observer);\n          return null;\n        }\n\n        var totalCount = connectionData.edgeCount + pageSize;\n\n        if (options && options.force) {\n          return _this._refetchConnection(totalCount, observerOrCallback);\n        }\n\n        var _ConnectionInterface$ = ConnectionInterface.get(),\n            END_CURSOR = _ConnectionInterface$.END_CURSOR,\n            START_CURSOR = _ConnectionInterface$.START_CURSOR;\n\n        var cursor = connectionData.cursor;\n        process.env.NODE_ENV !== \"production\" ? warning(cursor != null && cursor !== '', 'ReactRelayPaginationContainer: Cannot `loadMore` without valid `%s` (got `%s`)', direction === FORWARD ? END_CURSOR : START_CURSOR, cursor) : void 0;\n        var paginatingVariables = {\n          count: pageSize,\n          cursor: cursor,\n          totalCount: totalCount\n        };\n\n        var fetch = _this._fetchPage(paginatingVariables, observer, options);\n\n        return {\n          dispose: fetch.unsubscribe\n        };\n      });\n      var relayContext = assertRelayContext(props.__relayContext);\n      var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false;\n      _this._isARequestInFlight = false;\n      _this._refetchSubscription = null;\n      _this._refetchVariables = null;\n\n      if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {\n        _this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);\n      } else {\n        _this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer, _this._handleFragmentDataUpdate);\n      }\n\n      _this.state = {\n        data: _this._resolver.resolve(),\n        prevContext: relayContext,\n        contextForChildren: relayContext,\n        relayProp: _this._buildRelayProp(relayContext),\n        resolverGeneration: 0\n      };\n      _this._isUnmounted = false;\n      _this._hasFetched = false;\n      return _this;\n    }\n\n    var _proto = _class.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      this._isUnmounted = false;\n\n      if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {\n        this._subscribeToNewResolverAndRerenderIfStoreHasChanged();\n      }\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {\n        if (prevState.resolverGeneration !== this.state.resolverGeneration) {\n          this._subscribeToNewResolverAndRerenderIfStoreHasChanged();\n        } else {\n          this._rerenderIfStoreHasChanged();\n        }\n      }\n    }\n    /**\n     * When new props are received, read data for the new props and subscribe\n     * for updates. Props may be the same in which case previous data and\n     * subscriptions can be reused.\n     */\n    ;\n\n    _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      var _nextProps$__rootIsQu;\n\n      var relayContext = assertRelayContext(nextProps.__relayContext);\n      var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;\n      var prevIDs = getDataIDsFromObject(fragments, this.props);\n      var nextIDs = getDataIDsFromObject(fragments, nextProps);\n      var prevRootVariables = getRootVariablesForFragments(fragments, this.props);\n      var nextRootVariables = getRootVariablesForFragments(fragments, nextProps); // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n\n      if (relayContext.environment !== this.state.prevContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {\n        this._cleanup(); // Child containers rely on context.relay being mutated (for gDSFP).\n\n\n        if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {\n          this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);\n        } else {\n          this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer, this._handleFragmentDataUpdate);\n        }\n\n        this.setState(function (prevState) {\n          return {\n            prevContext: relayContext,\n            contextForChildren: relayContext,\n            relayProp: _this2._buildRelayProp(relayContext),\n            resolverGeneration: prevState.resolverGeneration + 1\n          };\n        });\n      } else if (!this._hasFetched) {\n        this._resolver.setProps(nextProps);\n      }\n\n      var data = this._resolver.resolve();\n\n      if (data !== this.state.data) {\n        this.setState({\n          data: data\n        });\n      }\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this._isUnmounted = true;\n\n      this._cleanup();\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      // Short-circuit if any Relay-related data has changed\n      if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp || nextState.resolverGeneration !== this.state.resolverGeneration) {\n        return true;\n      } // Otherwise, for convenience short-circuit if all non-Relay props\n      // are scalar and equal\n\n\n      var keys = Object.keys(nextProps);\n\n      for (var ii = 0; ii < keys.length; ii++) {\n        var _key = keys[ii];\n\n        if (_key === '__relayContext') {\n          if (nextState.prevContext.environment !== this.state.prevContext.environment) {\n            return true;\n          }\n        } else {\n          if (!fragments.hasOwnProperty(_key) && !isScalarAndEqual(nextProps[_key], this.props[_key])) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _proto._buildRelayProp = function _buildRelayProp(relayContext) {\n      return {\n        hasMore: this._hasMore,\n        isLoading: this._isLoading,\n        loadMore: this._loadMore,\n        refetchConnection: this._refetchConnection,\n        environment: relayContext.environment\n      };\n    };\n\n    _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {\n      var data = this.state.data; // External values could change between render and commit.\n      // Check for this case, even though it requires an extra store read.\n\n      var maybeNewData = this._resolver.resolve();\n\n      if (data !== maybeNewData) {\n        this.setState({\n          data: maybeNewData\n        });\n      }\n    };\n\n    _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {\n      var data = this.state.data;\n\n      var maybeNewData = this._resolver.resolve(); // Event listeners are only safe to add during the commit phase,\n      // So they won't leak if render is interrupted or errors.\n\n\n      this._resolver.setCallback(this.props, this._handleFragmentDataUpdate); // External values could change between render and commit.\n      // Check for this case, even though it requires an extra store read.\n\n\n      if (data !== maybeNewData) {\n        this.setState({\n          data: maybeNewData\n        });\n      }\n    }\n    /**\n     * Render new data for the existing props/context.\n     */\n    ;\n\n    _proto._getConnectionData = function _getConnectionData() {\n      // Extract connection data and verify there are more edges to fetch\n      var _this$props = this.props,\n          _ = _this$props.componentRef,\n          restProps = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props, [\"componentRef\"]);\n      var props = (0, _objectSpread3[\"default\"])((0, _objectSpread3[\"default\"])({}, restProps), this.state.data);\n      var connectionData = getConnectionFromProps(props);\n\n      if (connectionData == null) {\n        return null;\n      }\n\n      var _ConnectionInterface$2 = ConnectionInterface.get(),\n          EDGES = _ConnectionInterface$2.EDGES,\n          PAGE_INFO = _ConnectionInterface$2.PAGE_INFO,\n          HAS_NEXT_PAGE = _ConnectionInterface$2.HAS_NEXT_PAGE,\n          HAS_PREV_PAGE = _ConnectionInterface$2.HAS_PREV_PAGE,\n          END_CURSOR = _ConnectionInterface$2.END_CURSOR,\n          START_CURSOR = _ConnectionInterface$2.START_CURSOR;\n\n      !(typeof connectionData === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return `null` or a plain object with %s and %s properties, got `%s`.', componentName, EDGES, PAGE_INFO, connectionData) : invariant(false) : void 0;\n      var edges = connectionData[EDGES];\n      var pageInfo = connectionData[PAGE_INFO];\n\n      if (edges == null || pageInfo == null) {\n        return null;\n      }\n\n      !Array.isArray(edges) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return an object with %s: Array, got `%s`.', componentName, EDGES, edges) : invariant(false) : void 0;\n      !(typeof pageInfo === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return an object with %s: Object, got `%s`.', componentName, PAGE_INFO, pageInfo) : invariant(false) : void 0;\n      var hasMore = direction === FORWARD ? pageInfo[HAS_NEXT_PAGE] : pageInfo[HAS_PREV_PAGE];\n      var cursor = direction === FORWARD ? pageInfo[END_CURSOR] : pageInfo[START_CURSOR];\n\n      if (typeof hasMore !== 'boolean' || edges.length !== 0 && typeof cursor === 'undefined') {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'ReactRelayPaginationContainer: Cannot paginate without %s fields in `%s`. ' + 'Be sure to fetch %s (got `%s`) and %s (got `%s`).', PAGE_INFO, componentName, direction === FORWARD ? HAS_NEXT_PAGE : HAS_PREV_PAGE, hasMore, direction === FORWARD ? END_CURSOR : START_CURSOR, cursor) : void 0;\n        return null;\n      }\n\n      return {\n        cursor: cursor,\n        edgeCount: edges.length,\n        hasMore: hasMore\n      };\n    };\n\n    _proto._getQueryFetcher = function _getQueryFetcher() {\n      if (!this._queryFetcher) {\n        this._queryFetcher = new ReactRelayQueryFetcher();\n      }\n\n      return this._queryFetcher;\n    };\n\n    _proto._canFetchPage = function _canFetchPage(method) {\n      if (this._isUnmounted) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'ReactRelayPaginationContainer: Unexpected call of `%s` ' + 'on unmounted container `%s`. It looks like some instances ' + 'of your container still trying to fetch data but they already ' + 'unmounted. Please make sure you clear all timers, intervals, async ' + 'calls, etc that may trigger `%s` call.', method, containerName, method) : void 0;\n        return false;\n      }\n\n      return true;\n    };\n\n    _proto._fetchPage = function _fetchPage(paginatingVariables, observer, options) {\n      var _this3 = this;\n\n      var _assertRelayContext = assertRelayContext(this.props.__relayContext),\n          environment = _assertRelayContext.environment;\n\n      var _this$props2 = this.props,\n          _ = _this$props2.componentRef,\n          __relayContext = _this$props2.__relayContext,\n          __rootIsQueryRenderer = _this$props2.__rootIsQueryRenderer,\n          restProps = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props2, [\"componentRef\", \"__relayContext\", \"__rootIsQueryRenderer\"]);\n      var props = (0, _objectSpread3[\"default\"])((0, _objectSpread3[\"default\"])({}, restProps), this.state.data);\n      var fragmentVariables;\n      var rootVariables = getRootVariablesForFragments(fragments, restProps);\n      fragmentVariables = getVariablesFromObject(fragments, restProps);\n      fragmentVariables = (0, _objectSpread3[\"default\"])((0, _objectSpread3[\"default\"])((0, _objectSpread3[\"default\"])({}, rootVariables), fragmentVariables), this._refetchVariables);\n      var fetchVariables = connectionConfig.getVariables(props, {\n        count: paginatingVariables.count,\n        cursor: paginatingVariables.cursor\n      }, fragmentVariables);\n      !(typeof fetchVariables === 'object' && fetchVariables !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Expected `getVariables()` to ' + 'return an object, got `%s` in `%s`.', fetchVariables, componentName) : invariant(false) : void 0;\n      fetchVariables = (0, _objectSpread3[\"default\"])((0, _objectSpread3[\"default\"])({}, fetchVariables), this._refetchVariables);\n      fragmentVariables = (0, _objectSpread3[\"default\"])((0, _objectSpread3[\"default\"])({}, fetchVariables), fragmentVariables);\n      var cacheConfig = options ? {\n        force: !!options.force\n      } : undefined;\n\n      if (cacheConfig != null && (options === null || options === void 0 ? void 0 : options.metadata) != null) {\n        cacheConfig.metadata = options === null || options === void 0 ? void 0 : options.metadata;\n      }\n\n      var request = getRequest(connectionConfig.query);\n      var operation = createOperationDescriptor(request, fetchVariables, cacheConfig);\n      var refetchSubscription = null;\n\n      if (this._refetchSubscription) {\n        this._refetchSubscription.unsubscribe();\n      }\n\n      this._hasFetched = true;\n\n      var onNext = function onNext(payload, complete) {\n        var prevData = _this3._resolver.resolve();\n\n        _this3._resolver.setVariables(getFragmentVariables(fragmentVariables, paginatingVariables.totalCount), operation.request.node);\n\n        var nextData = _this3._resolver.resolve(); // Workaround slightly different handling for connection in different\n        // core implementations:\n        // - Classic core requires the count to be explicitly incremented\n        // - Modern core automatically appends new items, updating the count\n        //   isn't required to see new data.\n        //\n        // `setState` is only required if changing the variables would change the\n        // resolved data.\n        // TODO #14894725: remove PaginationContainer equal check\n\n\n        if (!areEqual(prevData, nextData)) {\n          _this3.setState({\n            data: nextData,\n            contextForChildren: {\n              environment: _this3.props.__relayContext.environment\n            }\n          }, complete);\n        } else {\n          complete();\n        }\n      };\n\n      var cleanup = function cleanup() {\n        if (_this3._refetchSubscription === refetchSubscription) {\n          _this3._refetchSubscription = null;\n          _this3._isARequestInFlight = false;\n        }\n      };\n\n      this._isARequestInFlight = true;\n      refetchSubscription = this._getQueryFetcher().execute({\n        environment: environment,\n        operation: operation,\n        preservePreviousReferences: true\n      }).mergeMap(function (payload) {\n        return Observable.create(function (sink) {\n          onNext(payload, function () {\n            sink.next(); // pass void to public observer's `next`\n\n            sink.complete();\n          });\n        });\n      }) // use do instead of finally so that observer's `complete` fires after cleanup\n      [\"do\"]({\n        error: cleanup,\n        complete: cleanup,\n        unsubscribe: cleanup\n      }).subscribe(observer || {});\n      this._refetchSubscription = this._isARequestInFlight ? refetchSubscription : null;\n      return refetchSubscription;\n    };\n\n    _proto._cleanup = function _cleanup() {\n      this._resolver.dispose();\n\n      this._refetchVariables = null;\n      this._hasFetched = false;\n\n      if (this._refetchSubscription) {\n        this._refetchSubscription.unsubscribe();\n\n        this._refetchSubscription = null;\n        this._isARequestInFlight = false;\n      }\n\n      if (this._queryFetcher) {\n        this._queryFetcher.dispose();\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props3 = this.props,\n          componentRef = _this$props3.componentRef,\n          __relayContext = _this$props3.__relayContext,\n          __rootIsQueryRenderer = _this$props3.__rootIsQueryRenderer,\n          props = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props3, [\"componentRef\", \"__relayContext\", \"__rootIsQueryRenderer\"]);\n      return /*#__PURE__*/React.createElement(ReactRelayContext.Provider, {\n        value: this.state.contextForChildren\n      }, /*#__PURE__*/React.createElement(Component, (0, _extends2[\"default\"])({}, props, this.state.data, {\n        ref: componentRef,\n        relay: this.state.relayProp\n      })));\n    };\n\n    return _class;\n  }(React.Component), (0, _defineProperty2[\"default\"])(_class, \"displayName\", containerName), _temp;\n}\n/**\n * Wrap the basic `createContainer()` function with logic to adapt to the\n * `context.relay.environment` in which it is rendered. Specifically, the\n * extraction of the environment-specific version of fragments in the\n * `fragmentSpec` is memoized once per environment, rather than once per\n * instance of the container constructed/rendered.\n */\n\n\nfunction createContainer(Component, fragmentSpec, connectionConfig) {\n  // $FlowFixMe[incompatible-return]\n  return buildReactRelayContainer(Component, fragmentSpec, function (ComponentClass, fragments) {\n    return createContainerWithFragments(ComponentClass, fragments, connectionConfig);\n  });\n}\n\nmodule.exports = {\n  createContainer: createContainer\n};", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar ReactRelayContext = require('./ReactRelayContext');\n\nvar ReactRelayQueryFetcher = require('./ReactRelayQueryFetcher');\n\nvar ReactRelayQueryRendererContext = require('./ReactRelayQueryRendererContext');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar React = require('react');\n\nvar _require = require('relay-runtime'),\n    RelayFeatureFlags = _require.RelayFeatureFlags,\n    createOperationDescriptor = _require.createOperationDescriptor,\n    deepFreeze = _require.deepFreeze,\n    getRequest = _require.getRequest;\n\n/**\n * React may double-fire the constructor, and we call 'fetch' in the\n * constructor. If a request is already in flight from a previous call to the\n * constructor, just reuse the query fetcher and wait for the response.\n */\nvar requestCache = {};\nvar queryRendererContext = {\n  rootIsQueryRenderer: true\n};\n\n/**\n * @public\n *\n * Orchestrates fetching and rendering data for a single view or view hierarchy:\n * - Fetches the query/variables using the given network implementation.\n * - Normalizes the response(s) to that query, publishing them to the given\n *   store.\n * - Renders the pending/fail/success states with the provided render function.\n * - Subscribes for updates to the root data and re-renders with any changes.\n */\nvar ReactRelayQueryRenderer = /*#__PURE__*/function (_React$Component) {\n  (0, _inheritsLoose2[\"default\"])(ReactRelayQueryRenderer, _React$Component);\n\n  function ReactRelayQueryRenderer(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this; // Callbacks are attached to the current instance and shared with static\n    // lifecyles by bundling with state. This is okay to do because the\n    // callbacks don't change in reaction to props. However we should not\n    // \"leak\" them before mounting (since we would be unable to clean up). For\n    // that reason, we define them as null initially and fill them in after\n    // mounting to avoid leaking memory.\n\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleDataChange\", function (params) {\n      var error = params.error == null ? null : params.error;\n      var snapshot = params.snapshot == null ? null : params.snapshot;\n\n      _this.setState(function (prevState) {\n        var prevRequestCacheKey = prevState.requestCacheKey;\n\n        if (prevRequestCacheKey) {\n          delete requestCache[prevRequestCacheKey];\n        } // Don't update state if nothing has changed.\n\n\n        if (snapshot === prevState.snapshot && error === prevState.error) {\n          return null;\n        }\n\n        return {\n          renderProps: getRenderProps(error, snapshot, prevState.queryFetcher, prevState.retryCallbacks),\n          snapshot: snapshot,\n          requestCacheKey: null\n        };\n      });\n    });\n    var retryCallbacks = {\n      handleDataChange: null,\n      handleRetryAfterError: null\n    };\n    var queryFetcher;\n    var requestCacheKey;\n\n    if (props.query) {\n      var query = props.query;\n      var request = getRequest(query);\n      requestCacheKey = getRequestCacheKey(request.params, props.variables);\n      queryFetcher = requestCache[requestCacheKey] ? requestCache[requestCacheKey].queryFetcher : new ReactRelayQueryFetcher();\n    } else {\n      queryFetcher = new ReactRelayQueryFetcher();\n    }\n\n    _this._maybeHiddenOrFastRefresh = false;\n    _this.state = (0, _objectSpread2[\"default\"])({\n      prevPropsEnvironment: props.environment,\n      prevPropsVariables: props.variables,\n      prevQuery: props.query,\n      queryFetcher: queryFetcher,\n      retryCallbacks: retryCallbacks\n    }, fetchQueryAndComputeStateFromProps(props, queryFetcher, retryCallbacks, requestCacheKey));\n    return _this;\n  }\n\n  ReactRelayQueryRenderer.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.prevQuery !== nextProps.query || prevState.prevPropsEnvironment !== nextProps.environment || !areEqual(prevState.prevPropsVariables, nextProps.variables)) {\n      return resetQueryStateForUpdate(nextProps, prevState);\n    }\n\n    return null;\n  };\n\n  var _proto = ReactRelayQueryRenderer.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    if (this._maybeHiddenOrFastRefresh === true) {\n      // This block only runs if the component has previously \"unmounted\"\n      // due to it being hidden by the Offscreen API, or during fast refresh.\n      // At this point, the current cached resource will have been disposed\n      // by the previous cleanup, so instead of attempting to\n      // do our regular commit setup, so that the query is re-evaluated\n      // (and potentially cause a refetch).\n      this._maybeHiddenOrFastRefresh = false; // eslint-disable-next-line react/no-did-mount-set-state\n\n      this.setState(function (prevState) {\n        return resetQueryStateForUpdate(_this2.props, prevState);\n      });\n      return;\n    }\n\n    var _this$state = this.state,\n        retryCallbacks = _this$state.retryCallbacks,\n        queryFetcher = _this$state.queryFetcher,\n        requestCacheKey = _this$state.requestCacheKey; // We don't need to cache the request after the component commits\n\n    if (requestCacheKey) {\n      delete requestCache[requestCacheKey];\n    }\n\n    retryCallbacks.handleDataChange = this._handleDataChange;\n\n    retryCallbacks.handleRetryAfterError = function (error) {\n      return _this2.setState(function (prevState) {\n        var prevRequestCacheKey = prevState.requestCacheKey;\n\n        if (prevRequestCacheKey) {\n          delete requestCache[prevRequestCacheKey];\n        }\n\n        return {\n          renderProps: getLoadingRenderProps(),\n          requestCacheKey: null\n        };\n      });\n    }; // Re-initialize the ReactRelayQueryFetcher with callbacks.\n    // If data has changed since constructions, this will re-render.\n\n\n    if (this.props.query) {\n      queryFetcher.setOnDataChange(this._handleDataChange);\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(_prevProps, prevState) {\n    // We don't need to cache the request after the component commits\n    var _this$state2 = this.state,\n        queryFetcher = _this$state2.queryFetcher,\n        requestCacheKey = _this$state2.requestCacheKey;\n\n    if (requestCacheKey) {\n      delete requestCache[requestCacheKey]; // HACK\n\n      delete this.state.requestCacheKey;\n    }\n\n    if (this.props.query && queryFetcher !== prevState.queryFetcher) {\n      queryFetcher.setOnDataChange(this._handleDataChange);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.state.queryFetcher.dispose();\n    this._maybeHiddenOrFastRefresh = true;\n  };\n\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.render !== this.props.render || nextState.renderProps !== this.state.renderProps;\n  };\n\n  _proto.render = function render() {\n    var _this$state3 = this.state,\n        renderProps = _this$state3.renderProps,\n        relayContext = _this$state3.relayContext; // Note that the root fragment results in `renderProps.props` is already\n    // frozen by the store; this call is to freeze the renderProps object and\n    // error property if set.\n\n    if (process.env.NODE_ENV !== \"production\") {\n      deepFreeze(renderProps);\n    }\n\n    return /*#__PURE__*/React.createElement(ReactRelayContext.Provider, {\n      value: relayContext\n    }, /*#__PURE__*/React.createElement(ReactRelayQueryRendererContext.Provider, {\n      value: queryRendererContext\n    }, this.props.render(renderProps)));\n  };\n\n  return ReactRelayQueryRenderer;\n}(React.Component);\n\nfunction getLoadingRenderProps() {\n  return {\n    error: null,\n    props: null,\n    // `props: null` indicates that the data is being fetched (i.e. loading)\n    retry: null\n  };\n}\n\nfunction getEmptyRenderProps() {\n  return {\n    error: null,\n    props: {},\n    // `props: {}` indicates no data available\n    retry: null\n  };\n}\n\nfunction getRenderProps(error, snapshot, queryFetcher, retryCallbacks) {\n  return {\n    error: error ? error : null,\n    props: snapshot ? snapshot.data : null,\n    retry: function retry(cacheConfigOverride) {\n      var syncSnapshot = queryFetcher.retry(cacheConfigOverride);\n\n      if (syncSnapshot && typeof retryCallbacks.handleDataChange === 'function') {\n        retryCallbacks.handleDataChange({\n          snapshot: syncSnapshot\n        });\n      } else if (error && typeof retryCallbacks.handleRetryAfterError === 'function') {\n        // If retrying after an error and no synchronous result available,\n        // reset the render props\n        retryCallbacks.handleRetryAfterError(error);\n      }\n    }\n  };\n}\n\nfunction getRequestCacheKey(request, variables) {\n  return JSON.stringify({\n    id: request.cacheID ? request.cacheID : request.id,\n    variables: variables\n  });\n}\n\nfunction resetQueryStateForUpdate(props, prevState) {\n  var query = props.query;\n  var prevSelectionReferences = prevState.queryFetcher.getSelectionReferences();\n  prevState.queryFetcher.disposeRequest();\n  var queryFetcher;\n\n  if (query) {\n    var request = getRequest(query);\n    var requestCacheKey = getRequestCacheKey(request.params, props.variables);\n    queryFetcher = requestCache[requestCacheKey] ? requestCache[requestCacheKey].queryFetcher : new ReactRelayQueryFetcher(prevSelectionReferences);\n  } else {\n    queryFetcher = new ReactRelayQueryFetcher(prevSelectionReferences);\n  }\n\n  return (0, _objectSpread2[\"default\"])({\n    prevQuery: props.query,\n    prevPropsEnvironment: props.environment,\n    prevPropsVariables: props.variables,\n    queryFetcher: queryFetcher\n  }, fetchQueryAndComputeStateFromProps(props, queryFetcher, prevState.retryCallbacks // passing no requestCacheKey will cause it to be recalculated internally\n  // and we want the updated requestCacheKey, since variables may have changed\n  ));\n}\n\nfunction fetchQueryAndComputeStateFromProps(props, queryFetcher, retryCallbacks, requestCacheKey) {\n  var environment = props.environment,\n      query = props.query,\n      variables = props.variables,\n      cacheConfig = props.cacheConfig;\n  var genericEnvironment = environment;\n\n  if (query) {\n    var request = getRequest(query);\n    var operation = createOperationDescriptor(request, variables, cacheConfig);\n    var relayContext = {\n      environment: genericEnvironment\n    };\n\n    if (typeof requestCacheKey === 'string' && requestCache[requestCacheKey]) {\n      // This same request is already in flight.\n      var snapshot = requestCache[requestCacheKey].snapshot;\n\n      if (snapshot) {\n        // Use the cached response\n        return {\n          error: null,\n          relayContext: relayContext,\n          renderProps: getRenderProps(null, snapshot, queryFetcher, retryCallbacks),\n          snapshot: snapshot,\n          requestCacheKey: requestCacheKey\n        };\n      } else {\n        // Render loading state\n        return {\n          error: null,\n          relayContext: relayContext,\n          renderProps: getLoadingRenderProps(),\n          snapshot: null,\n          requestCacheKey: requestCacheKey\n        };\n      }\n    }\n\n    try {\n      var storeSnapshot = queryFetcher.lookupInStore(genericEnvironment, operation, props.fetchPolicy);\n      var querySnapshot = queryFetcher.fetch({\n        environment: genericEnvironment,\n        onDataChange: null,\n        operation: operation\n      }); // Use network data first, since it may be fresher\n\n      var _snapshot = querySnapshot || storeSnapshot; // cache the request to avoid duplicate requests\n\n\n      requestCacheKey = requestCacheKey || getRequestCacheKey(request.params, props.variables);\n      requestCache[requestCacheKey] = {\n        queryFetcher: queryFetcher,\n        snapshot: _snapshot\n      };\n\n      if (!_snapshot) {\n        return {\n          error: null,\n          relayContext: relayContext,\n          renderProps: getLoadingRenderProps(),\n          snapshot: null,\n          requestCacheKey: requestCacheKey\n        };\n      }\n\n      return {\n        error: null,\n        relayContext: relayContext,\n        renderProps: getRenderProps(null, _snapshot, queryFetcher, retryCallbacks),\n        snapshot: _snapshot,\n        requestCacheKey: requestCacheKey\n      };\n    } catch (error) {\n      return {\n        error: error,\n        relayContext: relayContext,\n        renderProps: getRenderProps(error, null, queryFetcher, retryCallbacks),\n        snapshot: null,\n        requestCacheKey: requestCacheKey\n      };\n    }\n  } else {\n    queryFetcher.dispose();\n    var _relayContext = {\n      environment: genericEnvironment\n    };\n    return {\n      error: null,\n      relayContext: _relayContext,\n      renderProps: getEmptyRenderProps(),\n      requestCacheKey: null // if there is an error, don't cache request\n\n    };\n  }\n}\n\nmodule.exports = ReactRelayQueryRenderer;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar buildReactRelayContainer = require('./buildReactRelayContainer');\n\nvar getRootVariablesForFragments = require('./getRootVariablesForFragments');\n\nvar _require = require('./ReactRelayContainerUtils'),\n    getContainerName = _require.getContainerName;\n\nvar ReactRelayContext = require('./ReactRelayContext');\n\nvar ReactRelayQueryFetcher = require('./ReactRelayQueryFetcher');\n\nvar _require2 = require('./RelayContext'),\n    assertRelayContext = _require2.assertRelayContext;\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar React = require('react');\n\nvar _require3 = require('relay-runtime'),\n    Observable = _require3.Observable,\n    createFragmentSpecResolver = _require3.createFragmentSpecResolver,\n    createOperationDescriptor = _require3.createOperationDescriptor,\n    getDataIDsFromObject = _require3.getDataIDsFromObject,\n    getRequest = _require3.getRequest,\n    getVariablesFromObject = _require3.getVariablesFromObject,\n    isScalarAndEqual = _require3.isScalarAndEqual;\n\nvar warning = require(\"fbjs/lib/warning\");\n\n/**\n * Composes a React component class, returning a new class that intercepts\n * props, resolving them with the provided fragments and subscribing for\n * updates.\n */\nfunction createContainerWithFragments(Component, fragments, taggedNode) {\n  var _class, _temp;\n\n  var containerName = getContainerName(Component);\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    (0, _inheritsLoose2[\"default\"])(_class, _React$Component);\n\n    function _class(props) {\n      var _props$__rootIsQueryR, _this;\n\n      _this = _React$Component.call(this, props) || this;\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleFragmentDataUpdate\", function () {\n        var resolverFromThisUpdate = _this.state.resolver;\n\n        _this.setState(function (updatedState) {\n          return (// If this event belongs to the current data source, update.\n            // Otherwise we should ignore it.\n            resolverFromThisUpdate === updatedState.resolver ? {\n              data: updatedState.resolver.resolve()\n            } : null\n          );\n        });\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_refetch\", function (refetchVariables, renderVariables, observerOrCallback, options) {\n        if (_this._isUnmounted) {\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'ReactRelayRefetchContainer: Unexpected call of `refetch` ' + 'on unmounted container `%s`. It looks like some instances ' + 'of your container still trying to refetch the data but they already ' + 'unmounted. Please make sure you clear all timers, intervals, async ' + 'calls, etc that may trigger `refetch`.', containerName) : void 0;\n          return {\n            dispose: function dispose() {}\n          };\n        }\n\n        var _assertRelayContext = assertRelayContext(_this.props.__relayContext),\n            environment = _assertRelayContext.environment;\n\n        var rootVariables = getRootVariablesForFragments(fragments, _this.props);\n        var fetchVariables = typeof refetchVariables === 'function' ? refetchVariables(_this._getFragmentVariables()) : refetchVariables;\n        fetchVariables = (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, rootVariables), fetchVariables);\n        var fragmentVariables = renderVariables ? (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, fetchVariables), renderVariables) : fetchVariables;\n        var cacheConfig = options ? {\n          force: !!options.force\n        } : undefined;\n\n        if (cacheConfig != null && (options === null || options === void 0 ? void 0 : options.metadata) != null) {\n          cacheConfig.metadata = options === null || options === void 0 ? void 0 : options.metadata;\n        }\n\n        var observer = typeof observerOrCallback === 'function' ? {\n          // callback is not exectued on complete or unsubscribe\n          // for backward compatibility\n          next: observerOrCallback,\n          error: observerOrCallback\n        } : observerOrCallback || {};\n        var query = getRequest(taggedNode);\n        var operation = createOperationDescriptor(query, fetchVariables, cacheConfig); // TODO: T26288752 find a better way\n\n        /* eslint-disable lint/react-state-props-mutation */\n\n        _this.state.localVariables = fetchVariables;\n        /* eslint-enable lint/react-state-props-mutation */\n        // Cancel any previously running refetch.\n\n        _this._refetchSubscription && _this._refetchSubscription.unsubscribe(); // Declare refetchSubscription before assigning it in .start(), since\n        // synchronous completion may call callbacks .subscribe() returns.\n\n        var refetchSubscription;\n\n        var storeSnapshot = _this._getQueryFetcher().lookupInStore(environment, operation, options === null || options === void 0 ? void 0 : options.fetchPolicy);\n\n        if (storeSnapshot != null) {\n          _this.state.resolver.setVariables(fragmentVariables, operation.request.node);\n\n          _this.setState(function (latestState) {\n            return {\n              data: latestState.resolver.resolve(),\n              contextForChildren: {\n                environment: _this.props.__relayContext.environment\n              }\n            };\n          }, function () {\n            observer.next && observer.next();\n            observer.complete && observer.complete();\n          });\n\n          return {\n            dispose: function dispose() {}\n          };\n        }\n\n        _this._getQueryFetcher().execute({\n          environment: environment,\n          operation: operation,\n          // TODO (T26430099): Cleanup old references\n          preservePreviousReferences: true\n        }).mergeMap(function (response) {\n          _this.state.resolver.setVariables(fragmentVariables, operation.request.node);\n\n          return Observable.create(function (sink) {\n            return _this.setState(function (latestState) {\n              return {\n                data: latestState.resolver.resolve(),\n                contextForChildren: {\n                  environment: _this.props.__relayContext.environment\n                }\n              };\n            }, function () {\n              sink.next();\n              sink.complete();\n            });\n          });\n        })[\"finally\"](function () {\n          // Finalizing a refetch should only clear this._refetchSubscription\n          // if the finizing subscription is the most recent call.\n          if (_this._refetchSubscription === refetchSubscription) {\n            _this._refetchSubscription = null;\n          }\n        }).subscribe((0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, observer), {}, {\n          start: function start(subscription) {\n            _this._refetchSubscription = refetchSubscription = subscription;\n            observer.start && observer.start(subscription);\n          }\n        }));\n\n        return {\n          dispose: function dispose() {\n            refetchSubscription && refetchSubscription.unsubscribe();\n          }\n        };\n      });\n      var relayContext = assertRelayContext(props.__relayContext);\n      var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false;\n      _this._refetchSubscription = null; // Do not provide a subscription/callback here.\n      // It is possible for this render to be interrupted or aborted,\n      // In which case the subscription would cause a leak.\n      // We will add the subscription in componentDidMount().\n\n      var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);\n      _this.state = {\n        data: resolver.resolve(),\n        localVariables: null,\n        prevProps: props,\n        prevPropsContext: relayContext,\n        contextForChildren: relayContext,\n        relayProp: getRelayProp(relayContext.environment, _this._refetch),\n        resolver: resolver\n      };\n      _this._isUnmounted = false;\n      return _this;\n    }\n\n    var _proto = _class.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      this._isUnmounted = false;\n\n      this._subscribeToNewResolverAndRerenderIfStoreHasChanged();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n      if (this.state.resolver !== prevState.resolver) {\n        prevState.resolver.dispose();\n        this._queryFetcher && this._queryFetcher.dispose();\n        this._refetchSubscription && this._refetchSubscription.unsubscribe();\n\n        this._subscribeToNewResolverAndRerenderIfStoreHasChanged();\n      } else {\n        this._rerenderIfStoreHasChanged();\n      }\n    }\n    /**\n     * When new props are received, read data for the new props and add it to\n     * state. Props may be the same in which case previous data can be reused.\n     */\n    ;\n\n    _class.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$__rootIsQu;\n\n      // Any props change could impact the query, so we mirror props in state.\n      // This is an unusual pattern, but necessary for this container usecase.\n      var prevProps = prevState.prevProps;\n      var relayContext = assertRelayContext(nextProps.__relayContext);\n      var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;\n      var prevIDs = getDataIDsFromObject(fragments, prevProps);\n      var nextIDs = getDataIDsFromObject(fragments, nextProps);\n      var prevRootVariables = getRootVariablesForFragments(fragments, prevProps);\n      var nextRootVariables = getRootVariablesForFragments(fragments, nextProps);\n      var resolver = prevState.resolver; // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n\n      if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {\n        // Do not provide a subscription/callback here.\n        // It is possible for this render to be interrupted or aborted,\n        // In which case the subscription would cause a leak.\n        // We will add the subscription in componentDidUpdate().\n        resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);\n        return {\n          data: resolver.resolve(),\n          localVariables: null,\n          prevProps: nextProps,\n          prevPropsContext: relayContext,\n          contextForChildren: relayContext,\n          relayProp: getRelayProp(relayContext.environment, prevState.relayProp.refetch),\n          resolver: resolver\n        };\n      } else if (!prevState.localVariables) {\n        resolver.setProps(nextProps);\n      }\n\n      var data = resolver.resolve();\n\n      if (data !== prevState.data) {\n        return {\n          data: data,\n          prevProps: nextProps\n        };\n      }\n\n      return null;\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this._isUnmounted = true;\n      this.state.resolver.dispose();\n      this._queryFetcher && this._queryFetcher.dispose();\n      this._refetchSubscription && this._refetchSubscription.unsubscribe();\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      // Short-circuit if any Relay-related data has changed\n      if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp) {\n        return true;\n      } // Otherwise, for convenience short-circuit if all non-Relay props\n      // are scalar and equal\n\n\n      var keys = Object.keys(nextProps);\n\n      for (var ii = 0; ii < keys.length; ii++) {\n        var _key = keys[ii];\n\n        if (_key === '__relayContext') {\n          if (this.state.prevPropsContext.environment !== nextState.prevPropsContext.environment) {\n            return true;\n          }\n        } else {\n          if (!fragments.hasOwnProperty(_key) && !isScalarAndEqual(nextProps[_key], this.props[_key])) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          resolver = _this$state.resolver; // External values could change between render and commit.\n      // Check for this case, even though it requires an extra store read.\n\n      var maybeNewData = resolver.resolve();\n\n      if (data !== maybeNewData) {\n        this.setState({\n          data: maybeNewData\n        });\n      }\n    };\n\n    _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {\n      var _this$state2 = this.state,\n          data = _this$state2.data,\n          resolver = _this$state2.resolver;\n      var maybeNewData = resolver.resolve(); // Event listeners are only safe to add during the commit phase,\n      // So they won't leak if render is interrupted or errors.\n\n      resolver.setCallback(this.props, this._handleFragmentDataUpdate); // External values could change between render and commit.\n      // Check for this case, even though it requires an extra store read.\n\n      if (data !== maybeNewData) {\n        this.setState({\n          data: maybeNewData\n        });\n      }\n    }\n    /**\n     * Render new data for the existing props/context.\n     */\n    ;\n\n    _proto._getFragmentVariables = function _getFragmentVariables() {\n      return getVariablesFromObject(fragments, this.props);\n    };\n\n    _proto._getQueryFetcher = function _getQueryFetcher() {\n      if (!this._queryFetcher) {\n        this._queryFetcher = new ReactRelayQueryFetcher();\n      }\n\n      return this._queryFetcher;\n    };\n\n    _proto.render = function render() {\n      var _this$props = this.props,\n          componentRef = _this$props.componentRef,\n          __relayContext = _this$props.__relayContext,\n          __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer,\n          props = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props, [\"componentRef\", \"__relayContext\", \"__rootIsQueryRenderer\"]);\n      var _this$state3 = this.state,\n          relayProp = _this$state3.relayProp,\n          contextForChildren = _this$state3.contextForChildren;\n      return /*#__PURE__*/React.createElement(ReactRelayContext.Provider, {\n        value: contextForChildren\n      }, /*#__PURE__*/React.createElement(Component, (0, _extends2[\"default\"])({}, props, this.state.data, {\n        ref: componentRef,\n        relay: relayProp\n      })));\n    };\n\n    return _class;\n  }(React.Component), (0, _defineProperty2[\"default\"])(_class, \"displayName\", containerName), _temp;\n}\n\nfunction getRelayProp(environment, refetch) {\n  return {\n    environment: environment,\n    refetch: refetch\n  };\n}\n/**\n * Wrap the basic `createContainer()` function with logic to adapt to the\n * `context.relay.environment` in which it is rendered. Specifically, the\n * extraction of the environment-specific version of fragments in the\n * `fragmentSpec` is memoized once per environment, rather than once per\n * instance of the container constructed/rendered.\n */\n\n\nfunction createContainer(Component, fragmentSpec, taggedNode) {\n  // $FlowFixMe[incompatible-return]\n  return buildReactRelayContainer(Component, fragmentSpec, function (ComponentClass, fragments) {\n    return createContainerWithFragments(ComponentClass, fragments, taggedNode);\n  });\n}\n\nmodule.exports = {\n  createContainer: createContainer\n};", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n// This contextual profiler can be used to wrap a react sub-tree. It will bind\n// the RelayProfiler during the render phase of these components. Allows\n// collecting metrics for a specific part of your application.\n'use strict';\n\nvar React = require('react');\n\nvar ProfilerContext = React.createContext({\n  wrapPrepareQueryResource: function wrapPrepareQueryResource(cb) {\n    return cb();\n  }\n});\nmodule.exports = ProfilerContext;", "/**\n * Relay v13.2.0\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nmodule.exports = require('./lib/ReactRelayContext.js');\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar invariant = require('invariant');\n\nvar _require = require('react'),\n    useContext = _require.useContext;\n\nvar ReactRelayContext = require('react-relay/ReactRelayContext');\n\nfunction useRelayEnvironment() {\n  var context = useContext(ReactRelayContext);\n  !(context != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'useRelayEnvironment: Expected to have found a Relay environment provided by ' + 'a `RelayEnvironmentProvider` component. ' + 'This usually means that useRelayEnvironment was used in a ' + 'component that is not a descendant of a `RelayEnvironmentProvider`. ' + 'Please make sure a `RelayEnvironmentProvider` has been rendered somewhere ' + 'as a parent or ancestor of your component.') : invariant(false) : void 0;\n  return context.environment;\n}\n\nmodule.exports = useRelayEnvironment;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar ProfilerContext = require('./ProfilerContext');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar React = require('react');\n\nvar _require = require('react'),\n    useContext = _require.useContext,\n    useEffect = _require.useEffect;\n\nvar warning = require(\"fbjs/lib/warning\");\n\nfunction EntryPointContainer(_ref) {\n  var entryPointReference = _ref.entryPointReference,\n      props = _ref.props;\n  process.env.NODE_ENV !== \"production\" ? warning(entryPointReference.isDisposed === false, '<EntryPointContainer>: Expected entryPointReference to not be disposed ' + 'yet. This is because disposing the entrypoint marks it for future garbage ' + 'collection, and as such may no longer be present in the Relay store. ' + 'In the future, this will become a hard error.') : void 0;\n  var getComponent = entryPointReference.getComponent,\n      queries = entryPointReference.queries,\n      entryPoints = entryPointReference.entryPoints,\n      extraProps = entryPointReference.extraProps,\n      rootModuleID = entryPointReference.rootModuleID;\n  var Component = getComponent();\n  var profilerContext = useContext(ProfilerContext);\n  var environment = useRelayEnvironment();\n  useEffect(function () {\n    environment.__log({\n      name: 'entrypoint.root.consume',\n      profilerContext: profilerContext,\n      rootModuleID: rootModuleID\n    });\n  }, [environment, profilerContext, rootModuleID]);\n  return /*#__PURE__*/React.createElement(Component, {\n    entryPoints: entryPoints,\n    extraProps: extraProps,\n    props: props,\n    queries: queries\n  });\n}\n\nmodule.exports = EntryPointContainer;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @emails oncall+relay\n */\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar invariant = require('invariant');\n\nvar React = require('react');\n\nvar _require = require('relay-runtime'),\n    Observable = _require.Observable,\n    PreloadableQueryRegistry = _require.PreloadableQueryRegistry,\n    RelayFeatureFlags = _require.RelayFeatureFlags,\n    ReplaySubject = _require.ReplaySubject,\n    fetchQueryDeduped = _require.__internal.fetchQueryDeduped,\n    createOperationDescriptor = _require.createOperationDescriptor,\n    getRequest = _require.getRequest,\n    getRequestIdentifier = _require.getRequestIdentifier;\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar RenderDispatcher = null;\nvar fetchKey = 100001;\n\nfunction useTrackLoadQueryInRender() {\n  if (RenderDispatcher === null) {\n    var _React$__SECRET_INTER, _React$__SECRET_INTER2;\n\n    // Flow does not know of React internals (rightly so), but we need to\n    // ensure here that this function isn't called inside render.\n    RenderDispatcher = // $FlowFixMe[prop-missing]\n    (_React$__SECRET_INTER = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React$__SECRET_INTER === void 0 ? void 0 : (_React$__SECRET_INTER2 = _React$__SECRET_INTER.ReactCurrentDispatcher) === null || _React$__SECRET_INTER2 === void 0 ? void 0 : _React$__SECRET_INTER2.current;\n  }\n}\n\nfunction loadQuery(environment, preloadableRequest, variables, options, environmentProviderOptions) {\n  var _React$__SECRET_INTER3, _React$__SECRET_INTER4, _options$__nameForWar, _options$fetchPolicy;\n\n  // This code ensures that we don't call loadQuery during render.\n  var CurrentDispatcher = // $FlowFixMe[prop-missing]\n  (_React$__SECRET_INTER3 = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React$__SECRET_INTER3 === void 0 ? void 0 : (_React$__SECRET_INTER4 = _React$__SECRET_INTER3.ReactCurrentDispatcher) === null || _React$__SECRET_INTER4 === void 0 ? void 0 : _React$__SECRET_INTER4.current;\n  process.env.NODE_ENV !== \"production\" ? warning(RenderDispatcher == null || CurrentDispatcher !== RenderDispatcher, 'Relay: `%s` should not be called inside a React render function.', (_options$__nameForWar = options === null || options === void 0 ? void 0 : options.__nameForWarning) !== null && _options$__nameForWar !== void 0 ? _options$__nameForWar : 'loadQuery') : void 0; // Every time you call loadQuery, we will generate a new fetchKey.\n  // This will ensure that every query reference that is created and\n  // passed to usePreloadedQuery is independently evaluated,\n  // even if they are for the same query/variables.\n  // Specifically, we want to avoid a case where we try to refetch a\n  // query by calling loadQuery a second time, and have the Suspense\n  // cache in usePreloadedQuery reuse the cached result instead of\n  // re-evaluating the new query ref and triggering a refetch if\n  // necessary.\n\n  fetchKey++;\n  var fetchPolicy = (_options$fetchPolicy = options === null || options === void 0 ? void 0 : options.fetchPolicy) !== null && _options$fetchPolicy !== void 0 ? _options$fetchPolicy : 'store-or-network';\n  var networkCacheConfig = (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, options === null || options === void 0 ? void 0 : options.networkCacheConfig), {}, {\n    force: true\n  }); // executeWithNetworkSource will retain and execute an operation\n  // against the Relay store, given an Observable that would provide\n  // the network events for the operation.\n\n  var retainReference;\n  var didExecuteNetworkSource = false;\n\n  var executeWithNetworkSource = function executeWithNetworkSource(operation, networkObservable) {\n    didExecuteNetworkSource = true;\n    return environment.executeWithSource({\n      operation: operation,\n      source: networkObservable\n    });\n  }; // N.B. For loadQuery, we unconventionally want to return an Observable\n  // that isn't lazily executed, meaning that we don't want to wait\n  // until the returned Observable is subscribed to to actually start\n  // fetching and executing an operation; i.e. we want to execute the\n  // operation eagerly, when loadQuery is called.\n  // For this reason, we use an intermediate executionSubject which\n  // allows us to capture the events that occur during the eager execution\n  // of the operation, and then replay them to the Observable we\n  // ultimately return.\n\n\n  var executionSubject = new ReplaySubject();\n  var returnedObservable = Observable.create(function (sink) {\n    return executionSubject.subscribe(sink);\n  });\n  var unsubscribeFromNetworkRequest;\n  var networkError = null; // makeNetworkRequest will immediately start a raw network request if\n  // one isn't already in flight and return an Observable that when\n  // subscribed to will replay the network events that have occured so far,\n  // as well as subsequent events.\n\n  var didMakeNetworkRequest = false;\n\n  var makeNetworkRequest = function makeNetworkRequest(params) {\n    // N.B. this function is called synchronously or not at all\n    // didMakeNetworkRequest is safe to rely on in the returned value\n    // Even if the request gets deduped below, we still wan't to return an\n    // observable that provides the replayed network events for the query,\n    // so we set this to true before deduping, to guarantee that the\n    // `source` observable is returned.\n    didMakeNetworkRequest = true;\n    var observable;\n    var subject = new ReplaySubject();\n\n    if (RelayFeatureFlags.ENABLE_LOAD_QUERY_REQUEST_DEDUPING === true) {\n      // Here, we are calling fetchQueryDeduped at the network layer level,\n      // which ensures that only a single network request is active for a given\n      // (environment, identifier) pair.\n      // Since network requests can be started /before/ we have the query ast\n      // necessary to process the results, we need to dedupe the raw requests\n      // separately from deduping the operation execution; specifically,\n      // if `loadQuery` is called multiple times before the query ast is available,\n      // we still want the network request to be deduped.\n      // - If a duplicate active network request is found, it will return an\n      // Observable that replays the events of the already active request.\n      // - If no duplicate active network request is found, it will call the fetchFn\n      // to start the request, and return an Observable that will replay\n      // the events from the network request.\n      // We provide an extra key to the identifier to distinguish deduping\n      // of raw network requests vs deduping of operation executions.\n      var identifier = 'raw-network-request-' + getRequestIdentifier(params, variables);\n      observable = fetchQueryDeduped(environment, identifier, function () {\n        var network = environment.getNetwork();\n        return network.execute(params, variables, networkCacheConfig);\n      });\n    } else {\n      var network = environment.getNetwork();\n      observable = network.execute(params, variables, networkCacheConfig);\n    }\n\n    var _observable$subscribe = observable.subscribe({\n      error: function error(err) {\n        networkError = err;\n        subject.error(err);\n      },\n      next: function next(data) {\n        subject.next(data);\n      },\n      complete: function complete() {\n        subject.complete();\n      }\n    }),\n        unsubscribe = _observable$subscribe.unsubscribe;\n\n    unsubscribeFromNetworkRequest = unsubscribe;\n    return Observable.create(function (sink) {\n      var subjectSubscription = subject.subscribe(sink);\n      return function () {\n        subjectSubscription.unsubscribe();\n        unsubscribeFromNetworkRequest();\n      };\n    });\n  };\n\n  var unsubscribeFromExecution;\n\n  var executeDeduped = function executeDeduped(operation, fetchFn) {\n    if (RelayFeatureFlags.ENABLE_LOAD_QUERY_REQUEST_DEDUPING === true) {\n      // N.B. at this point, if we're calling execute with a query ast (OperationDescriptor),\n      // we are guaranteed to have started a network request. We set this to\n      // true here as well since `makeNetworkRequest` might get skipped in the case\n      // where the query ast is already available and the query executions get deduped.\n      // Even if the execution gets deduped below, we still wan't to return\n      // an observable that provides the replayed network events for the query,\n      // so we set this to true before deduping, to guarantee that the `source`\n      // observable is returned.\n      didMakeNetworkRequest = true;\n    } // Here, we are calling fetchQueryDeduped, which ensures that only\n    // a single operation is active for a given (environment, identifier) pair,\n    // and also tracks the active state of the operation, which is necessary\n    // for our Suspense infra to later be able to suspend (or not) on\n    // active operations. Even though we already dedupe raw network requests,\n    // we also need to dedupe and keep track operation execution for our Suspense\n    // infra, and we also want to avoid processing responses more than once, for\n    // the cases where `loadQuery` might be called multiple times after the query ast\n    // is available.\n    // - If a duplicate active operation is found, it will return an\n    // Observable that replays the events of the already active operation.\n    // - If no duplicate active operation is found, it will call the fetchFn\n    // to execute the operation, and return an Observable that will provide\n    // the events for executing the operation.\n\n\n    var _fetchQueryDeduped$su = fetchQueryDeduped(environment, operation.request.identifier, fetchFn).subscribe({\n      error: function error(err) {\n        executionSubject.error(err);\n      },\n      next: function next(data) {\n        executionSubject.next(data);\n      },\n      complete: function complete() {\n        executionSubject.complete();\n      }\n    });\n\n    unsubscribeFromExecution = _fetchQueryDeduped$su.unsubscribe;\n  };\n\n  var checkAvailabilityAndExecute = function checkAvailabilityAndExecute(concreteRequest) {\n    var operation = createOperationDescriptor(concreteRequest, variables, networkCacheConfig);\n    retainReference = environment.retain(operation);\n\n    if (fetchPolicy === 'store-only') {\n      return;\n    } // N.B. If the fetch policy allows fulfillment from the store but the\n    // environment already has the data for that operation cached in the store,\n    // then we do nothing.\n\n\n    var shouldFetch = fetchPolicy !== 'store-or-network' || environment.check(operation).status !== 'available';\n\n    if (shouldFetch) {\n      executeDeduped(operation, function () {\n        // N.B. Since we have the operation synchronously available here,\n        // we can immediately fetch and execute the operation.\n        var networkObservable = makeNetworkRequest(concreteRequest.params);\n        var executeObservable = executeWithNetworkSource(operation, networkObservable);\n        return executeObservable;\n      });\n    }\n  };\n\n  var params;\n  var cancelOnLoadCallback;\n  var queryId;\n\n  if (preloadableRequest.kind === 'PreloadableConcreteRequest') {\n    var preloadableConcreteRequest = preloadableRequest;\n    params = preloadableConcreteRequest.params;\n    var _params = params;\n    queryId = _params.id;\n    !(queryId !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: `loadQuery` requires that preloadable query `%s` has a persisted query id', params.name) : invariant(false) : void 0;\n\n    var _module = PreloadableQueryRegistry.get(queryId);\n\n    if (_module != null) {\n      checkAvailabilityAndExecute(_module);\n    } else {\n      // If the module isn't synchronously available, we launch the\n      // network request immediately if the fetchPolicy might produce\n      // a network fetch, regardless of the state of the store cache. We\n      // do this because we can't check if a query is cached without the\n      // ast, and we know that if we don't have the query ast\n      // available, then this query could've never been written to the\n      // store in the first place, so it couldn't have been cached.\n      var networkObservable = fetchPolicy === 'store-only' ? null : makeNetworkRequest(params); // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n\n      var _PreloadableQueryRegi = PreloadableQueryRegistry.onLoad(queryId, function (preloadedModule) {\n        cancelOnLoadCallback();\n        var operation = createOperationDescriptor(preloadedModule, variables, networkCacheConfig);\n        retainReference = environment.retain(operation);\n\n        if (networkObservable != null) {\n          executeDeduped(operation, function () {\n            return executeWithNetworkSource(operation, networkObservable);\n          });\n        }\n      });\n\n      cancelOnLoadCallback = _PreloadableQueryRegi.dispose;\n    }\n  } else {\n    var graphQlTaggedNode = preloadableRequest;\n    var request = getRequest(graphQlTaggedNode);\n    params = request.params;\n    queryId = params.cacheID != null ? params.cacheID : params.id;\n    checkAvailabilityAndExecute(request);\n  }\n\n  var isDisposed = false;\n  var isReleased = false;\n  var isNetworkRequestCancelled = false;\n\n  var releaseQuery = function releaseQuery() {\n    if (isReleased) {\n      return;\n    }\n\n    retainReference && retainReference.dispose();\n    isReleased = true;\n  };\n\n  var cancelNetworkRequest = function cancelNetworkRequest() {\n    if (isNetworkRequestCancelled) {\n      return;\n    }\n\n    if (didExecuteNetworkSource) {\n      unsubscribeFromExecution && unsubscribeFromExecution();\n    } else {\n      unsubscribeFromNetworkRequest && unsubscribeFromNetworkRequest();\n    }\n\n    cancelOnLoadCallback && cancelOnLoadCallback();\n    isNetworkRequestCancelled = true;\n  };\n\n  return {\n    kind: 'PreloadedQuery',\n    environment: environment,\n    environmentProviderOptions: environmentProviderOptions,\n    dispose: function dispose() {\n      if (isDisposed) {\n        return;\n      }\n\n      releaseQuery();\n      cancelNetworkRequest();\n      isDisposed = true;\n    },\n    releaseQuery: releaseQuery,\n    cancelNetworkRequest: cancelNetworkRequest,\n    fetchKey: fetchKey,\n    id: queryId,\n\n    // $FlowFixMe[unsafe-getters-setters] - this has no side effects\n    get isDisposed() {\n      return isDisposed || isReleased;\n    },\n\n    // $FlowFixMe[unsafe-getters-setters] - this has no side effects\n    get networkError() {\n      return networkError;\n    },\n\n    name: params.name,\n    networkCacheConfig: networkCacheConfig,\n    fetchPolicy: fetchPolicy,\n    source: didMakeNetworkRequest ? returnedObservable : undefined,\n    variables: variables\n  };\n}\n\nmodule.exports = {\n  loadQuery: loadQuery,\n  useTrackLoadQueryInRender: useTrackLoadQueryInRender\n};", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @emails oncall+relay\n */\n'use strict';\n\nvar _require = require('./loadQuery'),\n    loadQuery = _require.loadQuery;\n\nfunction loadEntryPoint(environmentProvider, entryPoint, entryPointParams) {\n  // Start loading the code for the entrypoint\n  var loadingPromise = null;\n\n  if (entryPoint.root.getModuleIfRequired() == null) {\n    loadingPromise = entryPoint.root.load();\n  }\n\n  var preloadProps = entryPoint.getPreloadProps(entryPointParams);\n  var queries = preloadProps.queries,\n      entryPoints = preloadProps.entryPoints,\n      extraProps = preloadProps.extraProps;\n  var preloadedQueries = {};\n  var preloadedEntryPoints = {};\n\n  if (queries != null) {\n    var queriesPropNames = Object.keys(queries);\n    queriesPropNames.forEach(function (queryPropName) {\n      var _queries$queryPropNam = queries[queryPropName],\n          environmentProviderOptions = _queries$queryPropNam.environmentProviderOptions,\n          options = _queries$queryPropNam.options,\n          parameters = _queries$queryPropNam.parameters,\n          variables = _queries$queryPropNam.variables;\n      var environment = environmentProvider.getEnvironment(environmentProviderOptions);\n      preloadedQueries[queryPropName] = loadQuery(environment, parameters, variables, {\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        networkCacheConfig: options === null || options === void 0 ? void 0 : options.networkCacheConfig,\n        __nameForWarning: 'loadEntryPoint'\n      }, environmentProviderOptions);\n    });\n  }\n\n  if (entryPoints != null) {\n    var entryPointPropNames = Object.keys(entryPoints);\n    entryPointPropNames.forEach(function (entryPointPropName) {\n      var entryPointDescription = entryPoints[entryPointPropName];\n\n      if (entryPointDescription == null) {\n        return;\n      }\n\n      var nestedEntryPoint = entryPointDescription.entryPoint,\n          nestedParams = entryPointDescription.entryPointParams;\n      preloadedEntryPoints[entryPointPropName] = loadEntryPoint(environmentProvider, nestedEntryPoint, nestedParams);\n    });\n  }\n\n  var isDisposed = false;\n  return {\n    dispose: function dispose() {\n      if (isDisposed) {\n        return;\n      }\n\n      if (preloadedQueries != null) {\n        Object.values(preloadedQueries).forEach(function (_ref) {\n          var innerDispose = _ref.dispose;\n          innerDispose();\n        });\n      }\n\n      if (preloadedEntryPoints != null) {\n        Object.values(preloadedEntryPoints).forEach(function (_ref2) {\n          var innerDispose = _ref2.dispose;\n          innerDispose();\n        });\n      }\n\n      isDisposed = true;\n    },\n    entryPoints: preloadedEntryPoints,\n    extraProps: extraProps !== null && extraProps !== void 0 ? extraProps : null,\n    getComponent: function getComponent() {\n      var componentModule = entryPoint.root.getModuleIfRequired();\n\n      if (componentModule == null) {\n        var _loadingPromise;\n\n        loadingPromise = (_loadingPromise = loadingPromise) !== null && _loadingPromise !== void 0 ? _loadingPromise : entryPoint.root.load();\n        throw loadingPromise;\n      } // On certain platforms, getting an es6 module with a default export from a JSResource will return an object like\n      // {default: module}, so let's assume that if the \"component\" has a static property named \"default\"\n      // that it's actually an es6 module wrapper, so unwrap it. This won't work for React classes with a static property named \"default\", but\n      // that's probably a worthwhile trade-off.\n\n\n      var component = // $FlowIgnore[prop-missing]\n      componentModule[\"default\"] != null ? componentModule[\"default\"] : componentModule; // $FlowFixMe[incompatible-cast] - trust me Flow, its entryPoint component\n\n      return component;\n    },\n\n    // $FlowFixMe[unsafe-getters-setters] - this has no side effects\n    get isDisposed() {\n      return isDisposed;\n    },\n\n    queries: preloadedQueries,\n    rootModuleID: entryPoint.root.getModuleId()\n  };\n}\n\nmodule.exports = loadEntryPoint;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar React = require('react');\n\nvar ReactRelayContext = require('react-relay/ReactRelayContext');\n\nvar useMemo = React.useMemo;\n\nfunction RelayEnvironmentProvider(props) {\n  var children = props.children,\n      environment = props.environment,\n      getEnvironmentForActor = props.getEnvironmentForActor;\n  var context = useMemo(function () {\n    return {\n      environment: environment,\n      getEnvironmentForActor: getEnvironmentForActor\n    };\n  }, [environment, getEnvironmentForActor]);\n  return /*#__PURE__*/React.createElement(ReactRelayContext.Provider, {\n    value: context\n  }, children);\n}\n\nmodule.exports = RelayEnvironmentProvider;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('react'),\n    useEffect = _require.useEffect,\n    useRef = _require.useRef;\n\nfunction useIsMountedRef() {\n  var isMountedRef = useRef(true);\n  useEffect(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  return isMountedRef;\n}\n\nmodule.exports = useIsMountedRef;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar loadEntryPoint = require('./loadEntryPoint');\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useIsMountedRef = require('./useIsMountedRef');\n\nvar _require2 = require('react'),\n    useCallback = _require2.useCallback,\n    useEffect = _require2.useEffect,\n    useRef = _require2.useRef,\n    useState = _require2.useState;\n\nvar initialNullEntryPointReferenceState = {\n  kind: 'NullEntryPointReference'\n};\n\nfunction useLoadEntryPoint(environmentProvider, entryPoint, options) {\n  var _options$TEST_ONLY__i, _options$TEST_ONLY__i2, _options$TEST_ONLY__i3, _options$TEST_ONLY__i4;\n\n  /**\n   * We want to always call `entryPointReference.dispose()` for every call to\n   * `setEntryPointReference(loadEntryPoint(...))` so that no leaks of data in Relay\n   * stores will occur.\n   *\n   * However, a call to `setState(newState)` is not always followed by a commit where\n   * this value is reflected in the state. Thus, we cannot reliably clean up each ref\n   * with `useEffect(() => () => entryPointReference.dispose(), [entryPointReference])`.\n   *\n   * Instead, we keep track of each call to `loadEntryPoint` in a ref.\n   * Relying on the fact that if a state change commits, no state changes that were\n   * initiated prior to the currently committing state change will ever subsequently\n   * commit, we can safely dispose of all preloaded entry point references\n   * associated with state changes initiated prior to the currently committing state\n   * change.\n   *\n   * Finally, when the hook unmounts, we also dispose of all remaining uncommitted\n   * entry point references.\n   */\n  useTrackLoadQueryInRender();\n  var initialEntryPointReferenceInternal = (_options$TEST_ONLY__i = options === null || options === void 0 ? void 0 : (_options$TEST_ONLY__i2 = options.TEST_ONLY__initialEntryPointData) === null || _options$TEST_ONLY__i2 === void 0 ? void 0 : _options$TEST_ONLY__i2.entryPointReference) !== null && _options$TEST_ONLY__i !== void 0 ? _options$TEST_ONLY__i : initialNullEntryPointReferenceState;\n  var initialEntryPointParamsInternal = (_options$TEST_ONLY__i3 = options === null || options === void 0 ? void 0 : (_options$TEST_ONLY__i4 = options.TEST_ONLY__initialEntryPointData) === null || _options$TEST_ONLY__i4 === void 0 ? void 0 : _options$TEST_ONLY__i4.entryPointParams) !== null && _options$TEST_ONLY__i3 !== void 0 ? _options$TEST_ONLY__i3 : null;\n  var isMountedRef = useIsMountedRef();\n  var undisposedEntryPointReferencesRef = useRef(new Set([initialEntryPointReferenceInternal]));\n\n  var _useState = useState(initialEntryPointReferenceInternal),\n      entryPointReference = _useState[0],\n      setEntryPointReference = _useState[1];\n\n  var _useState2 = useState(initialEntryPointParamsInternal),\n      entryPointParams = _useState2[0],\n      setEntryPointParams = _useState2[1];\n\n  var disposeEntryPoint = useCallback(function () {\n    if (isMountedRef.current) {\n      var nullEntryPointReference = {\n        kind: 'NullEntryPointReference'\n      };\n      undisposedEntryPointReferencesRef.current.add(nullEntryPointReference);\n      setEntryPointReference(nullEntryPointReference);\n    }\n  }, [setEntryPointReference, isMountedRef]);\n  var entryPointLoaderCallback = useCallback(function (params) {\n    if (isMountedRef.current) {\n      var updatedEntryPointReference = loadEntryPoint(environmentProvider, entryPoint, params);\n      undisposedEntryPointReferencesRef.current.add(updatedEntryPointReference);\n      setEntryPointReference(updatedEntryPointReference);\n      setEntryPointParams(params);\n    }\n  }, [environmentProvider, entryPoint, setEntryPointReference, isMountedRef]);\n  var maybeHiddenOrFastRefresh = useRef(false);\n  useEffect(function () {\n    return function () {\n      // Attempt to detect if the component was\n      // hidden (by Offscreen API), or fast refresh occured;\n      // Only in these situations would the effect cleanup\n      // for \"unmounting\" run multiple times, so if\n      // we are ever able to read this ref with a value\n      // of true, it means that one of these cases\n      // has happened.\n      maybeHiddenOrFastRefresh.current = true;\n    };\n  }, []);\n  useEffect(function () {\n    if (maybeHiddenOrFastRefresh.current === true) {\n      // This block only runs if the component has previously \"unmounted\"\n      // due to it being hidden by the Offscreen API, or during fast refresh.\n      // At this point, the current entryPointReference will have been disposed\n      // by the previous cleanup, so instead of attempting to\n      // do our regular commit setup, which would incorrectly leave our\n      // current entryPointReference disposed, we need to load the entryPoint again\n      // and force a re-render by calling entryPointLoaderCallback again,\n      // so that the entryPointReference's queries are correctly re-retained, and\n      // potentially refetched if necessary.\n      maybeHiddenOrFastRefresh.current = false;\n\n      if (entryPointReference.kind !== 'NullEntryPointReference' && entryPointParams != null) {\n        entryPointLoaderCallback(entryPointParams);\n      }\n\n      return;\n    } // When a new entryPointReference is committed, we iterate over all\n    // entrypoint refs in undisposedEntryPointReferences and dispose all of\n    // the refs that aren't the currently committed one. This ensures\n    // that we don't leave any dangling entrypoint references for the\n    // case that loadEntryPoint is called multiple times before commit; when\n    // this happens, multiple state updates will be scheduled, but only one\n    // will commit, meaning that we need to keep track of and dispose any\n    // query references that don't end up committing.\n    // - We are relying on the fact that sets iterate in insertion order, and we\n    // can remove items from a set as we iterate over it (i.e. no iterator\n    // invalidation issues.) Thus, it is safe to loop through\n    // undisposedEntryPointReferences until we find entryPointReference, and\n    // remove and dispose all previous references.\n    // - We are guaranteed to find entryPointReference in the set, because if a\n    // state change results in a commit, no state changes initiated prior to that\n    // one will be committed, and we are disposing and removing references\n    // associated with commits that were initiated prior to the currently\n    // committing state change. (A useEffect callback is called during the commit\n    // phase.)\n\n\n    var undisposedEntryPointReferences = undisposedEntryPointReferencesRef.current;\n\n    if (isMountedRef.current) {\n      var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(undisposedEntryPointReferences),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var undisposedEntryPointReference = _step.value;\n\n          if (undisposedEntryPointReference === entryPointReference) {\n            break;\n          }\n\n          undisposedEntryPointReferences[\"delete\"](undisposedEntryPointReference);\n\n          if (undisposedEntryPointReference.kind !== 'NullEntryPointReference') {\n            undisposedEntryPointReference.dispose();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, [entryPointReference, entryPointParams, entryPointLoaderCallback, isMountedRef]);\n  useEffect(function () {\n    return function disposeAllRemainingEntryPointReferences() {\n      // undisposedEntryPointReferences.current is never reassigned\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(undisposedEntryPointReferencesRef.current),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var unhandledStateChange = _step2.value;\n\n          if (unhandledStateChange.kind !== 'NullEntryPointReference') {\n            unhandledStateChange.dispose();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    };\n  }, []);\n  return [entryPointReference.kind === 'NullEntryPointReference' ? null : entryPointReference, entryPointLoaderCallback, disposeEntryPoint];\n}\n\nmodule.exports = useLoadEntryPoint;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @emails oncall+relay\n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar invariant = require('invariant');\n\n/**\n * JS maps (both plain objects and Map) maintain key insertion\n * order, which means there is an easy way to simulate LRU behavior\n * that should also perform quite well:\n *\n * To insert a new value, first delete the key from the inner _map,\n * then _map.set(k, v). By deleting and reinserting, you ensure that the\n * map sees the key as the last inserted key.\n *\n * Get does the same: if the key is present, delete and reinsert it.\n */\nvar LRUCache = /*#__PURE__*/function () {\n  function LRUCache(capacity) {\n    this._capacity = capacity;\n    !(this._capacity > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LRUCache: Unable to create instance of cache with zero or negative capacity.') : invariant(false) : void 0;\n    this._map = new Map();\n  }\n\n  var _proto = LRUCache.prototype;\n\n  _proto.set = function set(key, value) {\n    this._map[\"delete\"](key);\n\n    this._map.set(key, value);\n\n    if (this._map.size > this._capacity) {\n      var firstKey = this._map.keys().next();\n\n      if (!firstKey.done) {\n        this._map[\"delete\"](firstKey.value);\n      }\n    }\n  };\n\n  _proto.get = function get(key) {\n    var value = this._map.get(key);\n\n    if (value != null) {\n      this._map[\"delete\"](key);\n\n      this._map.set(key, value);\n    }\n\n    return value;\n  };\n\n  _proto.has = function has(key) {\n    return this._map.has(key);\n  };\n\n  _proto[\"delete\"] = function _delete(key) {\n    this._map[\"delete\"](key);\n  };\n\n  _proto.size = function size() {\n    return this._map.size;\n  };\n\n  _proto.capacity = function capacity() {\n    return this._capacity - this._map.size;\n  };\n\n  _proto.clear = function clear() {\n    this._map.clear();\n  };\n\n  return LRUCache;\n}();\n\nfunction create(capacity) {\n  return new LRUCache(capacity);\n}\n\nmodule.exports = {\n  create: create\n};", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @emails oncall+relay\n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar invariant = require('invariant');\n\nvar TEMPORARY_RETAIN_DURATION_MS = 5 * 60 * 1000;\n/**\n * Allows you to retain a resource as part of a component lifecycle accounting\n * for Suspense. You temporarily retain the resource during render, then\n * permanently retain it during commit and release it during unmount.\n */\n\nvar SuspenseResource = /*#__PURE__*/function () {\n  function SuspenseResource(retain) {\n    var _this = this;\n\n    (0, _defineProperty2[\"default\"])(this, \"_retainCount\", 0);\n    (0, _defineProperty2[\"default\"])(this, \"_retainDisposable\", null);\n    (0, _defineProperty2[\"default\"])(this, \"_releaseTemporaryRetain\", null);\n\n    this._retain = function (environment) {\n      _this._retainCount++;\n\n      if (_this._retainCount === 1) {\n        _this._retainDisposable = retain(environment);\n      }\n\n      return {\n        dispose: function dispose() {\n          _this._retainCount = Math.max(0, _this._retainCount - 1);\n\n          if (_this._retainCount === 0) {\n            !(_this._retainDisposable != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected disposable to release query to be defined.' + \"If you're seeing this, this is likely a bug in Relay.\") : invariant(false) : void 0;\n\n            _this._retainDisposable.dispose();\n\n            _this._retainDisposable = null;\n          }\n        }\n      };\n    };\n  }\n\n  var _proto = SuspenseResource.prototype;\n\n  _proto.temporaryRetain = function temporaryRetain(environment) {\n    var _this2 = this;\n\n    var _this$_releaseTempora;\n\n    // If we're executing in a server environment, there's no need\n    // to create temporary retains, since the component will never commit.\n    if (environment.isServer()) {\n      return {\n        dispose: function dispose() {}\n      };\n    } // temporaryRetain is called during the render phase. However,\n    // given that we can't tell if this render will eventually commit or not,\n    // we create a timer to autodispose of this retain in case the associated\n    // component never commits.\n    // If the component /does/ commit, permanentRetain will clear this timeout\n    // and permanently retain the data.\n\n\n    var retention = this._retain(environment);\n\n    var releaseQueryTimeout = null;\n\n    var releaseTemporaryRetain = function releaseTemporaryRetain() {\n      clearTimeout(releaseQueryTimeout);\n      releaseQueryTimeout = null;\n      _this2._releaseTemporaryRetain = null;\n      retention.dispose();\n    };\n\n    releaseQueryTimeout = setTimeout(releaseTemporaryRetain, TEMPORARY_RETAIN_DURATION_MS); // NOTE: Since temporaryRetain can be called multiple times, we release\n    // the previous temporary retain after we re-establish a new one, since\n    // we only ever need a single temporary retain until the permanent retain is\n    // established.\n    // temporaryRetain may be called multiple times by React during the render\n    // phase, as well as multiple times by other query components that are\n    // rendering the same query/variables.\n\n    (_this$_releaseTempora = this._releaseTemporaryRetain) === null || _this$_releaseTempora === void 0 ? void 0 : _this$_releaseTempora.call(this);\n    this._releaseTemporaryRetain = releaseTemporaryRetain;\n    return {\n      dispose: function dispose() {\n        var _this$_releaseTempora2;\n\n        (_this$_releaseTempora2 = _this2._releaseTemporaryRetain) === null || _this$_releaseTempora2 === void 0 ? void 0 : _this$_releaseTempora2.call(_this2);\n      }\n    };\n  };\n\n  _proto.permanentRetain = function permanentRetain(environment) {\n    var disposable = this._retain(environment);\n\n    this.releaseTemporaryRetain();\n    return disposable;\n  };\n\n  _proto.releaseTemporaryRetain = function releaseTemporaryRetain() {\n    var _this$_releaseTempora3;\n\n    (_this$_releaseTempora3 = this._releaseTemporaryRetain) === null || _this$_releaseTempora3 === void 0 ? void 0 : _this$_releaseTempora3.call(this);\n    this._releaseTemporaryRetain = null;\n  };\n\n  _proto.getRetainCount = function getRetainCount() {\n    return this._retainCount;\n  };\n\n  return SuspenseResource;\n}();\n\nmodule.exports = SuspenseResource;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @emails oncall+relay\n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar LRUCache = require('./LRUCache');\n\nvar SuspenseResource = require('./SuspenseResource');\n\nvar invariant = require('invariant');\n\nvar _require = require('relay-runtime'),\n    isPromise = _require.isPromise;\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar CACHE_CAPACITY = 1000;\nvar DEFAULT_FETCH_POLICY = 'store-or-network';\nvar WEAKMAP_SUPPORTED = typeof WeakMap === 'function';\n\nfunction operationIsLiveQuery(operation) {\n  return operation.request.node.params.metadata.live !== undefined;\n}\n\nfunction getQueryCacheIdentifier(environment, operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker) {\n  var fetchPolicy = maybeFetchPolicy !== null && maybeFetchPolicy !== void 0 ? maybeFetchPolicy : DEFAULT_FETCH_POLICY;\n  var renderPolicy = maybeRenderPolicy !== null && maybeRenderPolicy !== void 0 ? maybeRenderPolicy : environment.UNSTABLE_getDefaultRenderPolicy();\n  var cacheIdentifier = \"\".concat(fetchPolicy, \"-\").concat(renderPolicy, \"-\").concat(operation.request.identifier);\n\n  if (cacheBreaker != null) {\n    return \"\".concat(cacheIdentifier, \"-\").concat(cacheBreaker);\n  }\n\n  return cacheIdentifier;\n}\n\nfunction getQueryResult(operation, cacheIdentifier) {\n  var rootFragmentRef = {\n    __id: operation.fragment.dataID,\n    __fragments: (0, _defineProperty2[\"default\"])({}, operation.fragment.node.name, operation.request.variables),\n    __fragmentOwner: operation.request\n  };\n  return {\n    cacheIdentifier: cacheIdentifier,\n    fragmentNode: operation.request.node.fragment,\n    fragmentRef: rootFragmentRef,\n    operation: operation\n  };\n}\n\nvar nextID = 200000;\n\nfunction createCacheEntry(cacheIdentifier, operation, operationAvailability, value, networkSubscription, onDispose) {\n  var isLiveQuery = operationIsLiveQuery(operation);\n  var currentValue = value;\n  var currentNetworkSubscription = networkSubscription;\n  var suspenseResource = new SuspenseResource(function (environment) {\n    var retention = environment.retain(operation);\n    return {\n      dispose: function dispose() {\n        // Normally if this entry never commits, the request would've ended by the\n        // time this timeout expires and the temporary retain is released. However,\n        // we need to do this for live queries which remain open indefinitely.\n        if (isLiveQuery && currentNetworkSubscription != null) {\n          currentNetworkSubscription.unsubscribe();\n        }\n\n        retention.dispose();\n        onDispose(cacheEntry);\n      }\n    };\n  });\n  var cacheEntry = {\n    cacheIdentifier: cacheIdentifier,\n    id: nextID++,\n    processedPayloadsCount: 0,\n    operationAvailability: operationAvailability,\n    getValue: function getValue() {\n      return currentValue;\n    },\n    setValue: function setValue(val) {\n      currentValue = val;\n    },\n    setNetworkSubscription: function setNetworkSubscription(subscription) {\n      if (isLiveQuery && currentNetworkSubscription != null) {\n        currentNetworkSubscription.unsubscribe();\n      }\n\n      currentNetworkSubscription = subscription;\n    },\n    temporaryRetain: function temporaryRetain(environment) {\n      return suspenseResource.temporaryRetain(environment);\n    },\n    permanentRetain: function permanentRetain(environment) {\n      return suspenseResource.permanentRetain(environment);\n    },\n    releaseTemporaryRetain: function releaseTemporaryRetain() {\n      suspenseResource.releaseTemporaryRetain();\n    }\n  };\n  return cacheEntry;\n}\n\nvar QueryResourceImpl = /*#__PURE__*/function () {\n  function QueryResourceImpl(environment) {\n    var _this = this;\n\n    (0, _defineProperty2[\"default\"])(this, \"_clearCacheEntry\", function (cacheEntry) {\n      _this._cache[\"delete\"](cacheEntry.cacheIdentifier);\n    });\n    this._environment = environment;\n    this._cache = LRUCache.create(CACHE_CAPACITY);\n  }\n\n  var _proto = QueryResourceImpl.prototype;\n\n  _proto.prepare = function prepare(operation, fetchObservable, maybeFetchPolicy, maybeRenderPolicy, observer, cacheBreaker, profilerContext) {\n    var cacheIdentifier = getQueryCacheIdentifier(this._environment, operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker);\n    return this.prepareWithIdentifier(cacheIdentifier, operation, fetchObservable, maybeFetchPolicy, maybeRenderPolicy, observer, profilerContext);\n  }\n  /**\n   * This function should be called during a Component's render function,\n   * to either read an existing cached value for the query, or fetch the query\n   * and suspend.\n   */\n  ;\n\n  _proto.prepareWithIdentifier = function prepareWithIdentifier(cacheIdentifier, operation, fetchObservable, maybeFetchPolicy, maybeRenderPolicy, observer, profilerContext) {\n    var environment = this._environment;\n    var fetchPolicy = maybeFetchPolicy !== null && maybeFetchPolicy !== void 0 ? maybeFetchPolicy : DEFAULT_FETCH_POLICY;\n    var renderPolicy = maybeRenderPolicy !== null && maybeRenderPolicy !== void 0 ? maybeRenderPolicy : environment.UNSTABLE_getDefaultRenderPolicy(); // 1. Check if there's a cached value for this operation, and reuse it if\n    // it's available\n\n    var cacheEntry = this._cache.get(cacheIdentifier);\n\n    var temporaryRetainDisposable = null;\n    var entryWasCached = cacheEntry != null;\n\n    if (cacheEntry == null) {\n      // 2. If a cached value isn't available, try fetching the operation.\n      // _fetchAndSaveQuery will update the cache with either a Promise or\n      // an Error to throw, or a QueryResult to return.\n      cacheEntry = this._fetchAndSaveQuery(cacheIdentifier, operation, fetchObservable, fetchPolicy, renderPolicy, profilerContext, (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, observer), {}, {\n        unsubscribe: function unsubscribe(subscription) {\n          // 4. If the request is cancelled, make sure to dispose\n          // of the temporary retain; this will ensure that a promise\n          // doesn't remain unnecessarily cached until the temporary retain\n          // expires. Not clearing the temporary retain might cause the\n          // query to incorrectly re-suspend.\n          if (temporaryRetainDisposable != null) {\n            temporaryRetainDisposable.dispose();\n          }\n\n          var observerUnsubscribe = observer === null || observer === void 0 ? void 0 : observer.unsubscribe;\n          observerUnsubscribe && observerUnsubscribe(subscription);\n        }\n      }));\n    } // 3. Temporarily retain here in render phase. When the component reading\n    // the operation is committed, we will transfer ownership of data retention\n    // to the component.\n    // In case the component never commits (mounts or updates) from this render,\n    // this data retention hold will auto-release itself after a timeout.\n\n\n    temporaryRetainDisposable = cacheEntry.temporaryRetain(environment);\n    var cachedValue = cacheEntry.getValue();\n\n    if (isPromise(cachedValue)) {\n      environment.__log({\n        name: 'suspense.query',\n        fetchPolicy: fetchPolicy,\n        isPromiseCached: entryWasCached,\n        operation: operation,\n        queryAvailability: cacheEntry.operationAvailability,\n        renderPolicy: renderPolicy\n      });\n\n      throw cachedValue;\n    }\n\n    if (cachedValue instanceof Error) {\n      throw cachedValue;\n    }\n\n    return cachedValue;\n  }\n  /**\n   * This function should be called during a component's commit phase\n   * (e.g. inside useEffect), in order to retain the operation in the Relay store\n   * and transfer ownership of the operation to the component lifecycle.\n   */\n  ;\n\n  _proto.retain = function retain(queryResult, profilerContext) {\n    var environment = this._environment;\n    var cacheIdentifier = queryResult.cacheIdentifier,\n        operation = queryResult.operation;\n\n    var cacheEntry = this._getOrCreateCacheEntry(cacheIdentifier, operation, null, queryResult, null);\n\n    var disposable = cacheEntry.permanentRetain(environment);\n\n    environment.__log({\n      name: 'queryresource.retain',\n      profilerContext: profilerContext,\n      resourceID: cacheEntry.id\n    });\n\n    return {\n      dispose: function dispose() {\n        disposable.dispose();\n      }\n    };\n  };\n\n  _proto.releaseTemporaryRetain = function releaseTemporaryRetain(queryResult) {\n    var cacheEntry = this._cache.get(queryResult.cacheIdentifier);\n\n    if (cacheEntry != null) {\n      cacheEntry.releaseTemporaryRetain();\n    }\n  };\n\n  _proto.TESTS_ONLY__getCacheEntry = function TESTS_ONLY__getCacheEntry(operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker) {\n    var environment = this._environment;\n    var cacheIdentifier = getQueryCacheIdentifier(environment, operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker);\n    return this._cache.get(cacheIdentifier);\n  };\n\n  _proto._getOrCreateCacheEntry = function _getOrCreateCacheEntry(cacheIdentifier, operation, operationAvailability, value, networkSubscription) {\n    var cacheEntry = this._cache.get(cacheIdentifier);\n\n    if (cacheEntry == null) {\n      cacheEntry = createCacheEntry(cacheIdentifier, operation, operationAvailability, value, networkSubscription, this._clearCacheEntry);\n\n      this._cache.set(cacheIdentifier, cacheEntry);\n    }\n\n    return cacheEntry;\n  };\n\n  _proto._fetchAndSaveQuery = function _fetchAndSaveQuery(cacheIdentifier, operation, fetchObservable, fetchPolicy, renderPolicy, profilerContext, observer) {\n    var _this2 = this;\n\n    var environment = this._environment; // NOTE: Running `check` will write missing data to the store using any\n    // missing data handlers specified on the environment;\n    // We run it here first to make the handlers get a chance to populate\n    // missing data.\n\n    var queryAvailability = environment.check(operation);\n    var queryStatus = queryAvailability.status;\n    var hasFullQuery = queryStatus === 'available';\n    var canPartialRender = hasFullQuery || renderPolicy === 'partial' && queryStatus !== 'stale';\n    var shouldFetch;\n    var shouldAllowRender;\n\n    var resolveNetworkPromise = function resolveNetworkPromise() {};\n\n    switch (fetchPolicy) {\n      case 'store-only':\n        {\n          shouldFetch = false;\n          shouldAllowRender = true;\n          break;\n        }\n\n      case 'store-or-network':\n        {\n          shouldFetch = !hasFullQuery;\n          shouldAllowRender = canPartialRender;\n          break;\n        }\n\n      case 'store-and-network':\n        {\n          shouldFetch = true;\n          shouldAllowRender = canPartialRender;\n          break;\n        }\n\n      case 'network-only':\n      default:\n        {\n          shouldFetch = true;\n          shouldAllowRender = false;\n          break;\n        }\n    } // NOTE: If this value is false, we will cache a promise for this\n    // query, which means we will suspend here at this query root.\n    // If it's true, we will cache the query resource and allow rendering to\n    // continue.\n\n\n    if (shouldAllowRender) {\n      var queryResult = getQueryResult(operation, cacheIdentifier);\n\n      var _cacheEntry = createCacheEntry(cacheIdentifier, operation, queryAvailability, queryResult, null, this._clearCacheEntry);\n\n      this._cache.set(cacheIdentifier, _cacheEntry);\n    }\n\n    if (shouldFetch) {\n      var _queryResult = getQueryResult(operation, cacheIdentifier);\n\n      var networkSubscription;\n      fetchObservable.subscribe({\n        start: function start(subscription) {\n          networkSubscription = subscription;\n\n          var cacheEntry = _this2._cache.get(cacheIdentifier);\n\n          if (cacheEntry) {\n            cacheEntry.setNetworkSubscription(networkSubscription);\n          }\n\n          var observerStart = observer === null || observer === void 0 ? void 0 : observer.start;\n\n          if (observerStart) {\n            var subscriptionWithConditionalCancelation = (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, subscription), {}, {\n              unsubscribe: function unsubscribe() {\n                // Only live queries should have their network requests canceled.\n                if (operationIsLiveQuery(operation)) {\n                  subscription.unsubscribe();\n                }\n              }\n            });\n            observerStart(subscriptionWithConditionalCancelation);\n          }\n        },\n        next: function next() {\n          var cacheEntry = _this2._getOrCreateCacheEntry(cacheIdentifier, operation, queryAvailability, _queryResult, networkSubscription);\n\n          cacheEntry.processedPayloadsCount += 1;\n          cacheEntry.setValue(_queryResult);\n          resolveNetworkPromise();\n          var observerNext = observer === null || observer === void 0 ? void 0 : observer.next;\n\n          if (observerNext != null) {\n            var snapshot = environment.lookup(operation.fragment);\n            observerNext(snapshot);\n          }\n        },\n        error: function error(_error) {\n          var cacheEntry = _this2._getOrCreateCacheEntry(cacheIdentifier, operation, queryAvailability, _error, networkSubscription); // If, this is the first thing we receive for the query,\n          // before any other payload handled is error, we will cache and\n          // re-throw that error later.\n          // We will ignore errors for any incremental payloads we receive.\n\n\n          if (cacheEntry.processedPayloadsCount === 0) {\n            cacheEntry.setValue(_error);\n          } else {\n            // TODO:T92030819 Remove this warning and actually throw the network error\n            // To complete this task we need to have a way of precisely tracking suspendable points\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'QueryResource: An incremental payload for query `%s` returned an error: `%s`.', operation.fragment.node.name, String(_error.message)) : void 0;\n          }\n\n          resolveNetworkPromise();\n          networkSubscription = null;\n          cacheEntry.setNetworkSubscription(null);\n          var observerError = observer === null || observer === void 0 ? void 0 : observer.error;\n          observerError && observerError(_error);\n        },\n        complete: function complete() {\n          resolveNetworkPromise();\n          networkSubscription = null;\n\n          var cacheEntry = _this2._cache.get(cacheIdentifier);\n\n          if (cacheEntry) {\n            cacheEntry.setNetworkSubscription(null);\n          }\n\n          var observerComplete = observer === null || observer === void 0 ? void 0 : observer.complete;\n          observerComplete && observerComplete();\n        },\n        unsubscribe: observer === null || observer === void 0 ? void 0 : observer.unsubscribe\n      });\n\n      var _cacheEntry2 = this._cache.get(cacheIdentifier);\n\n      if (!_cacheEntry2) {\n        var networkPromise = new Promise(function (resolve) {\n          resolveNetworkPromise = resolve;\n        }); // $FlowExpectedError[prop-missing] Expando to annotate Promises.\n\n        networkPromise.displayName = 'Relay(' + operation.fragment.node.name + ')';\n        _cacheEntry2 = createCacheEntry(cacheIdentifier, operation, queryAvailability, networkPromise, networkSubscription, this._clearCacheEntry);\n\n        this._cache.set(cacheIdentifier, _cacheEntry2);\n      }\n    } else {\n      var observerComplete = observer === null || observer === void 0 ? void 0 : observer.complete;\n      observerComplete && observerComplete();\n    }\n\n    var cacheEntry = this._cache.get(cacheIdentifier);\n\n    !(cacheEntry != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected to have cached a result when attempting to fetch query.' + \"If you're seeing this, this is likely a bug in Relay.\") : invariant(false) : void 0;\n\n    environment.__log({\n      name: 'queryresource.fetch',\n      resourceID: cacheEntry.id,\n      operation: operation,\n      profilerContext: profilerContext,\n      fetchPolicy: fetchPolicy,\n      renderPolicy: renderPolicy,\n      queryAvailability: queryAvailability,\n      shouldFetch: shouldFetch\n    });\n\n    return cacheEntry;\n  };\n\n  return QueryResourceImpl;\n}();\n\nfunction createQueryResource(environment) {\n  return new QueryResourceImpl(environment);\n}\n\nvar dataResources = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();\n\nfunction getQueryResourceForEnvironment(environment) {\n  var cached = dataResources.get(environment);\n\n  if (cached) {\n    return cached;\n  }\n\n  var newDataResource = createQueryResource(environment);\n  dataResources.set(environment, newDataResource);\n  return newDataResource;\n}\n\nmodule.exports = {\n  createQueryResource: createQueryResource,\n  getQueryResourceForEnvironment: getQueryResourceForEnvironment,\n  getQueryCacheIdentifier: getQueryCacheIdentifier\n};", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @emails oncall+relay\n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar LRUCache = require('./LRUCache');\n\nvar _require = require('./QueryResource'),\n    getQueryResourceForEnvironment = _require.getQueryResourceForEnvironment;\n\nvar SuspenseResource = require('./SuspenseResource');\n\nvar invariant = require('invariant');\n\nvar _require2 = require('relay-runtime'),\n    RelayFeatureFlags = _require2.RelayFeatureFlags,\n    _require2$__internal = _require2.__internal,\n    fetchQuery = _require2$__internal.fetchQuery,\n    getPromiseForActiveRequest = _require2$__internal.getPromiseForActiveRequest,\n    createOperationDescriptor = _require2.createOperationDescriptor,\n    getFragmentIdentifier = _require2.getFragmentIdentifier,\n    getPendingOperationsForFragment = _require2.getPendingOperationsForFragment,\n    getSelector = _require2.getSelector,\n    getVariablesFromFragment = _require2.getVariablesFromFragment,\n    handlePotentialSnapshotErrors = _require2.handlePotentialSnapshotErrors,\n    isPromise = _require2.isPromise,\n    recycleNodesInto = _require2.recycleNodesInto;\n\nvar WEAKMAP_SUPPORTED = typeof WeakMap === 'function';\n// TODO: Fix to not rely on LRU. If the number of active fragments exceeds this\n// capacity, readSpec() will fail to find cached entries and break object\n// identity even if data hasn't changed.\nvar CACHE_CAPACITY = 1000000; // this is frozen so that users don't accidentally push data into the array\n\nvar CONSTANT_READONLY_EMPTY_ARRAY = Object.freeze([]);\n\nfunction isMissingData(snapshot) {\n  if (Array.isArray(snapshot)) {\n    return snapshot.some(function (s) {\n      return s.isMissingData;\n    });\n  }\n\n  return snapshot.isMissingData;\n}\n\nfunction hasMissingClientEdges(snapshot) {\n  var _snapshot$missingClie, _snapshot$missingClie2;\n\n  if (Array.isArray(snapshot)) {\n    return snapshot.some(function (s) {\n      var _s$missingClientEdges, _s$missingClientEdges2;\n\n      return ((_s$missingClientEdges = (_s$missingClientEdges2 = s.missingClientEdges) === null || _s$missingClientEdges2 === void 0 ? void 0 : _s$missingClientEdges2.length) !== null && _s$missingClientEdges !== void 0 ? _s$missingClientEdges : 0) > 0;\n    });\n  }\n\n  return ((_snapshot$missingClie = (_snapshot$missingClie2 = snapshot.missingClientEdges) === null || _snapshot$missingClie2 === void 0 ? void 0 : _snapshot$missingClie2.length) !== null && _snapshot$missingClie !== void 0 ? _snapshot$missingClie : 0) > 0;\n}\n\nfunction singularOrPluralForEach(snapshot, f) {\n  if (Array.isArray(snapshot)) {\n    snapshot.forEach(f);\n  } else {\n    f(snapshot);\n  }\n}\n\nfunction getFragmentResult(cacheKey, snapshot, storeEpoch) {\n  if (Array.isArray(snapshot)) {\n    return {\n      cacheKey: cacheKey,\n      snapshot: snapshot,\n      data: snapshot.map(function (s) {\n        return s.data;\n      }),\n      isMissingData: isMissingData(snapshot),\n      storeEpoch: storeEpoch\n    };\n  }\n\n  return {\n    cacheKey: cacheKey,\n    snapshot: snapshot,\n    data: snapshot.data,\n    isMissingData: isMissingData(snapshot),\n    storeEpoch: storeEpoch\n  };\n}\n/**\n * The purpose of this cache is to allow information to be passed from an\n * initial read which suspends through to the commit that follows a subsequent\n * successful read. Specifically, the QueryResource result for the data fetch\n * is passed through so that that query can be retained on commit.\n */\n\n\nvar ClientEdgeQueryResultsCache = /*#__PURE__*/function () {\n  function ClientEdgeQueryResultsCache(environment) {\n    (0, _defineProperty2[\"default\"])(this, \"_cache\", new Map());\n    (0, _defineProperty2[\"default\"])(this, \"_retainCounts\", new Map());\n    this._environment = environment;\n  }\n\n  var _proto = ClientEdgeQueryResultsCache.prototype;\n\n  _proto.get = function get(fragmentIdentifier) {\n    var _this$_cache$get$, _this$_cache$get;\n\n    return (_this$_cache$get$ = (_this$_cache$get = this._cache.get(fragmentIdentifier)) === null || _this$_cache$get === void 0 ? void 0 : _this$_cache$get[0]) !== null && _this$_cache$get$ !== void 0 ? _this$_cache$get$ : undefined;\n  };\n\n  _proto.recordQueryResults = function recordQueryResults(fragmentIdentifier, value) {\n    var _this = this;\n\n    var existing = this._cache.get(fragmentIdentifier);\n\n    if (!existing) {\n      var suspenseResource = new SuspenseResource(function () {\n        return _this._retain(fragmentIdentifier);\n      });\n\n      this._cache.set(fragmentIdentifier, [value, suspenseResource]);\n\n      suspenseResource.temporaryRetain(this._environment);\n    } else {\n      var existingResults = existing[0],\n          _suspenseResource = existing[1];\n      value.forEach(function (queryResult) {\n        existingResults.push(queryResult);\n      });\n\n      _suspenseResource.temporaryRetain(this._environment);\n    }\n  };\n\n  _proto._retain = function _retain(id) {\n    var _this2 = this;\n\n    var _this$_retainCounts$g;\n\n    var retainCount = ((_this$_retainCounts$g = this._retainCounts.get(id)) !== null && _this$_retainCounts$g !== void 0 ? _this$_retainCounts$g : 0) + 1;\n\n    this._retainCounts.set(id, retainCount);\n\n    return {\n      dispose: function dispose() {\n        var _this$_retainCounts$g2;\n\n        var newRetainCount = ((_this$_retainCounts$g2 = _this2._retainCounts.get(id)) !== null && _this$_retainCounts$g2 !== void 0 ? _this$_retainCounts$g2 : 0) - 1;\n\n        if (newRetainCount > 0) {\n          _this2._retainCounts.set(id, newRetainCount);\n        } else {\n          _this2._retainCounts[\"delete\"](id);\n\n          _this2._cache[\"delete\"](id);\n        }\n      }\n    };\n  };\n\n  return ClientEdgeQueryResultsCache;\n}();\n\nvar FragmentResourceImpl = /*#__PURE__*/function () {\n  function FragmentResourceImpl(environment) {\n    this._environment = environment;\n    this._cache = LRUCache.create(CACHE_CAPACITY);\n\n    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n      this._clientEdgeQueryResultsCache = new ClientEdgeQueryResultsCache(environment);\n    }\n  }\n  /**\n   * This function should be called during a Component's render function,\n   * to read the data for a fragment, or suspend if the fragment is being\n   * fetched.\n   */\n\n\n  var _proto2 = FragmentResourceImpl.prototype;\n\n  _proto2.read = function read(fragmentNode, fragmentRef, componentDisplayName, fragmentKey) {\n    return this.readWithIdentifier(fragmentNode, fragmentRef, getFragmentIdentifier(fragmentNode, fragmentRef), componentDisplayName, fragmentKey);\n  }\n  /**\n   * Like `read`, but with a pre-computed fragmentIdentifier that should be\n   * equal to `getFragmentIdentifier(fragmentNode, fragmentRef)` from the\n   * arguments.\n   */\n  ;\n\n  _proto2.readWithIdentifier = function readWithIdentifier(fragmentNode, fragmentRef, fragmentIdentifier, componentDisplayName, fragmentKey) {\n    var _this3 = this;\n\n    var _fragmentNode$metadat, _clientEdgePromises;\n\n    var environment = this._environment; // If fragmentRef is null or undefined, pass it directly through.\n    // This is a convenience when consuming fragments via a HOC API, when the\n    // prop corresponding to the fragment ref might be passed as null.\n\n    if (fragmentRef == null) {\n      return {\n        cacheKey: fragmentIdentifier,\n        data: null,\n        isMissingData: false,\n        snapshot: null,\n        storeEpoch: 0\n      };\n    }\n\n    var storeEpoch = environment.getStore().getEpoch(); // If fragmentRef is plural, ensure that it is an array.\n    // If it's empty, return the empty array directly before doing any more work.\n\n    if ((fragmentNode === null || fragmentNode === void 0 ? void 0 : (_fragmentNode$metadat = fragmentNode.metadata) === null || _fragmentNode$metadat === void 0 ? void 0 : _fragmentNode$metadat.plural) === true) {\n      !Array.isArray(fragmentRef) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected fragment pointer%s for fragment `%s` to be ' + 'an array, instead got `%s`. Remove `@relay(plural: true)` ' + 'from fragment `%s` to allow the prop to be an object.', fragmentKey != null ? \" for key `\".concat(fragmentKey, \"`\") : '', fragmentNode.name, typeof fragmentRef, fragmentNode.name) : invariant(false) : void 0;\n\n      if (fragmentRef.length === 0) {\n        return {\n          cacheKey: fragmentIdentifier,\n          data: CONSTANT_READONLY_EMPTY_ARRAY,\n          isMissingData: false,\n          snapshot: CONSTANT_READONLY_EMPTY_ARRAY,\n          storeEpoch: storeEpoch\n        };\n      }\n    } // Now we actually attempt to read the fragment:\n    // 1. Check if there's a cached value for this fragment\n\n\n    var cachedValue = this._cache.get(fragmentIdentifier);\n\n    if (cachedValue != null) {\n      if (cachedValue.kind === 'pending' && isPromise(cachedValue.promise)) {\n        environment.__log({\n          name: 'suspense.fragment',\n          data: cachedValue.result.data,\n          fragment: fragmentNode,\n          isRelayHooks: true,\n          isMissingData: cachedValue.result.isMissingData,\n          isPromiseCached: true,\n          pendingOperations: cachedValue.pendingOperations\n        });\n\n        throw cachedValue.promise;\n      }\n\n      if (cachedValue.kind === 'done' && cachedValue.result.snapshot) {\n        this._handlePotentialSnapshotErrorsInSnapshot(cachedValue.result.snapshot);\n\n        return cachedValue.result;\n      }\n    } // 2. If not, try reading the fragment from the Relay store.\n    // If the snapshot has data, return it and save it in cache\n\n\n    var fragmentSelector = getSelector(fragmentNode, fragmentRef);\n    !(fragmentSelector != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected to receive an object where `...%s` was spread, ' + 'but the fragment reference was not found`. This is most ' + 'likely the result of:\\n' + \"- Forgetting to spread `%s` in `%s`'s parent's fragment.\\n\" + '- Conditionally fetching `%s` but unconditionally passing %s prop ' + 'to `%s`. If the parent fragment only fetches the fragment conditionally ' + '- with e.g. `@include`, `@skip`, or inside a `... on SomeType { }` ' + 'spread  - then the fragment reference will not exist. ' + 'In this case, pass `null` if the conditions for evaluating the ' + 'fragment are not met (e.g. if the `@include(if)` value is false.)', fragmentNode.name, fragmentNode.name, componentDisplayName, fragmentNode.name, fragmentKey == null ? 'a fragment reference' : \"the `\".concat(fragmentKey, \"`\"), componentDisplayName) : invariant(false) : void 0;\n    var snapshot = fragmentSelector.kind === 'PluralReaderSelector' ? fragmentSelector.selectors.map(function (s) {\n      return environment.lookup(s);\n    }) : environment.lookup(fragmentSelector);\n    var fragmentResult = getFragmentResult(fragmentIdentifier, snapshot, storeEpoch);\n\n    if (!fragmentResult.isMissingData) {\n      this._handlePotentialSnapshotErrorsInSnapshot(snapshot);\n\n      this._cache.set(fragmentIdentifier, {\n        kind: 'done',\n        result: fragmentResult\n      });\n\n      return fragmentResult;\n    } // 3. If we don't have data in the store, there's two cases where we should\n    // suspend to await the data: First if any client edges were traversed where\n    // the destination record was missing data; in that case we initiate a query\n    // here to fetch the missing data. Second, there may already be a request\n    // in flight for the fragment's parent query, or for another operation that\n    //  may affect the parent's query data, such as a mutation or subscription.\n    // For any of these cases we can get a promise, which we will cache and\n    // suspend on.\n    // First, initiate a query for any client edges that were missing data:\n\n\n    var clientEdgeRequests = null;\n\n    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && hasMissingClientEdges(snapshot)) {\n      clientEdgeRequests = [];\n      var queryResource = getQueryResourceForEnvironment(this._environment);\n      var queryResults = [];\n      singularOrPluralForEach(snapshot, function (snap) {\n        var _snap$missingClientEd;\n\n        (_snap$missingClientEd = snap.missingClientEdges) === null || _snap$missingClientEd === void 0 ? void 0 : _snap$missingClientEd.forEach(function (_ref) {\n          var _clientEdgeRequests;\n\n          var request = _ref.request,\n              clientEdgeDestinationID = _ref.clientEdgeDestinationID;\n\n          var _this3$_performClient = _this3._performClientEdgeQuery(queryResource, fragmentNode, fragmentRef, request, clientEdgeDestinationID),\n              queryResult = _this3$_performClient.queryResult,\n              requestDescriptor = _this3$_performClient.requestDescriptor;\n\n          queryResults.push(queryResult);\n          (_clientEdgeRequests = clientEdgeRequests) === null || _clientEdgeRequests === void 0 ? void 0 : _clientEdgeRequests.push(requestDescriptor);\n        });\n      }); // Store the query so that it can be retained when our own fragment is\n      // subscribed to. This merges with any existing query results:\n\n      !(this._clientEdgeQueryResultsCache != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Client edge query result cache should exist when ENABLE_CLIENT_EDGES is on.') : invariant(false) : void 0;\n\n      this._clientEdgeQueryResultsCache.recordQueryResults(fragmentIdentifier, queryResults);\n    }\n\n    var clientEdgePromises = null;\n\n    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && clientEdgeRequests) {\n      clientEdgePromises = clientEdgeRequests.map(function (request) {\n        return getPromiseForActiveRequest(_this3._environment, request);\n      }).filter(function (p) {\n        return p != null;\n      });\n    } // Finally look for operations in flight for our parent query:\n\n\n    var fragmentOwner = fragmentSelector.kind === 'PluralReaderSelector' ? fragmentSelector.selectors[0].owner : fragmentSelector.owner;\n\n    var parentQueryPromiseResult = this._getAndSavePromiseForFragmentRequestInFlight(fragmentIdentifier, fragmentNode, fragmentOwner, fragmentResult);\n\n    var parentQueryPromiseResultPromise = parentQueryPromiseResult === null || parentQueryPromiseResult === void 0 ? void 0 : parentQueryPromiseResult.promise; // for refinement\n\n    if (((_clientEdgePromises = clientEdgePromises) === null || _clientEdgePromises === void 0 ? void 0 : _clientEdgePromises.length) || isPromise(parentQueryPromiseResultPromise)) {\n      var _parentQueryPromiseRe, _clientEdgeRequests2, _clientEdgePromises2;\n\n      environment.__log({\n        name: 'suspense.fragment',\n        data: fragmentResult.data,\n        fragment: fragmentNode,\n        isRelayHooks: true,\n        isPromiseCached: false,\n        isMissingData: fragmentResult.isMissingData,\n        pendingOperations: [].concat((0, _toConsumableArray2[\"default\"])((_parentQueryPromiseRe = parentQueryPromiseResult === null || parentQueryPromiseResult === void 0 ? void 0 : parentQueryPromiseResult.pendingOperations) !== null && _parentQueryPromiseRe !== void 0 ? _parentQueryPromiseRe : []), (0, _toConsumableArray2[\"default\"])((_clientEdgeRequests2 = clientEdgeRequests) !== null && _clientEdgeRequests2 !== void 0 ? _clientEdgeRequests2 : []))\n      });\n\n      throw ((_clientEdgePromises2 = clientEdgePromises) === null || _clientEdgePromises2 === void 0 ? void 0 : _clientEdgePromises2.length) ? Promise.all([parentQueryPromiseResultPromise].concat((0, _toConsumableArray2[\"default\"])(clientEdgePromises))) : parentQueryPromiseResultPromise;\n    }\n\n    this._handlePotentialSnapshotErrorsInSnapshot(snapshot);\n\n    return getFragmentResult(fragmentIdentifier, snapshot, storeEpoch);\n  };\n\n  _proto2._performClientEdgeQuery = function _performClientEdgeQuery(queryResource, fragmentNode, fragmentRef, request, clientEdgeDestinationID) {\n    var originalVariables = getVariablesFromFragment(fragmentNode, fragmentRef);\n    var variables = (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, originalVariables), {}, {\n      id: clientEdgeDestinationID // TODO should be a reserved name\n\n    });\n    var operation = createOperationDescriptor(request, variables, {} //  TODO cacheConfig should probably inherent from parent operation\n    );\n    var fetchObservable = fetchQuery(this._environment, operation);\n    var queryResult = queryResource.prepare(operation, fetchObservable // TODO should inherent render policy etc. from parent operation\n    );\n    return {\n      requestDescriptor: operation.request,\n      queryResult: queryResult\n    };\n  };\n\n  _proto2._handlePotentialSnapshotErrorsInSnapshot = function _handlePotentialSnapshotErrorsInSnapshot(snapshot) {\n    var _this4 = this;\n\n    if (Array.isArray(snapshot)) {\n      snapshot.forEach(function (s) {\n        handlePotentialSnapshotErrors(_this4._environment, s.missingRequiredFields, s.relayResolverErrors);\n      });\n    } else {\n      handlePotentialSnapshotErrors(this._environment, snapshot.missingRequiredFields, snapshot.relayResolverErrors);\n    }\n  };\n\n  _proto2.readSpec = function readSpec(fragmentNodes, fragmentRefs, componentDisplayName) {\n    var result = {};\n\n    for (var _key in fragmentNodes) {\n      result[_key] = this.read(fragmentNodes[_key], fragmentRefs[_key], componentDisplayName, _key);\n    }\n\n    return result;\n  };\n\n  _proto2.subscribe = function subscribe(fragmentResult, callback) {\n    var _this5 = this;\n\n    var environment = this._environment;\n    var cacheKey = fragmentResult.cacheKey;\n    var renderedSnapshot = fragmentResult.snapshot;\n\n    if (!renderedSnapshot) {\n      return {\n        dispose: function dispose() {}\n      };\n    } // 1. Check for any updates missed during render phase\n    // TODO(T44066760): More efficiently detect if we missed an update\n\n\n    var _this$checkMissedUpda = this.checkMissedUpdates(fragmentResult),\n        didMissUpdates = _this$checkMissedUpda[0],\n        currentSnapshot = _this$checkMissedUpda[1]; // 2. If an update was missed, notify the component so it updates with\n    // the latest data.\n\n\n    if (didMissUpdates) {\n      callback();\n    } // 3. Establish subscriptions on the snapshot(s)\n\n\n    var disposables = [];\n\n    if (Array.isArray(renderedSnapshot)) {\n      !Array.isArray(currentSnapshot) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected snapshots to be plural. ' + \"If you're seeing this, this is likely a bug in Relay.\") : invariant(false) : void 0;\n      currentSnapshot.forEach(function (snapshot, idx) {\n        disposables.push(environment.subscribe(snapshot, function (latestSnapshot) {\n          var storeEpoch = environment.getStore().getEpoch();\n\n          _this5._updatePluralSnapshot(cacheKey, currentSnapshot, latestSnapshot, idx, storeEpoch);\n\n          callback();\n        }));\n      });\n    } else {\n      !(currentSnapshot != null && !Array.isArray(currentSnapshot)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected snapshot to be singular. ' + \"If you're seeing this, this is likely a bug in Relay.\") : invariant(false) : void 0;\n      disposables.push(environment.subscribe(currentSnapshot, function (latestSnapshot) {\n        var storeEpoch = environment.getStore().getEpoch();\n\n        _this5._cache.set(cacheKey, {\n          kind: 'done',\n          result: getFragmentResult(cacheKey, latestSnapshot, storeEpoch)\n        });\n\n        callback();\n      }));\n    }\n\n    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n      var _this$_clientEdgeQuer, _this$_clientEdgeQuer2;\n\n      var clientEdgeQueryResults = (_this$_clientEdgeQuer = (_this$_clientEdgeQuer2 = this._clientEdgeQueryResultsCache) === null || _this$_clientEdgeQuer2 === void 0 ? void 0 : _this$_clientEdgeQuer2.get(cacheKey)) !== null && _this$_clientEdgeQuer !== void 0 ? _this$_clientEdgeQuer : undefined;\n\n      if (clientEdgeQueryResults === null || clientEdgeQueryResults === void 0 ? void 0 : clientEdgeQueryResults.length) {\n        var queryResource = getQueryResourceForEnvironment(this._environment);\n        clientEdgeQueryResults.forEach(function (queryResult) {\n          disposables.push(queryResource.retain(queryResult));\n        });\n      }\n    }\n\n    return {\n      dispose: function dispose() {\n        disposables.forEach(function (s) {\n          return s.dispose();\n        });\n\n        _this5._cache[\"delete\"](cacheKey);\n      }\n    };\n  };\n\n  _proto2.subscribeSpec = function subscribeSpec(fragmentResults, callback) {\n    var _this6 = this;\n\n    var disposables = Object.keys(fragmentResults).map(function (key) {\n      return _this6.subscribe(fragmentResults[key], callback);\n    });\n    return {\n      dispose: function dispose() {\n        disposables.forEach(function (disposable) {\n          disposable.dispose();\n        });\n      }\n    };\n  };\n\n  _proto2.checkMissedUpdates = function checkMissedUpdates(fragmentResult) {\n    var environment = this._environment;\n    var renderedSnapshot = fragmentResult.snapshot;\n\n    if (!renderedSnapshot) {\n      return [false, null];\n    }\n\n    var storeEpoch = null; // Bail out if the store hasn't been written since last read\n\n    storeEpoch = environment.getStore().getEpoch();\n\n    if (fragmentResult.storeEpoch === storeEpoch) {\n      return [false, fragmentResult.snapshot];\n    }\n\n    var cacheKey = fragmentResult.cacheKey;\n\n    if (Array.isArray(renderedSnapshot)) {\n      var didMissUpdates = false;\n      var currentSnapshots = [];\n      renderedSnapshot.forEach(function (snapshot, idx) {\n        var currentSnapshot = environment.lookup(snapshot.selector);\n        var renderData = snapshot.data;\n        var currentData = currentSnapshot.data;\n        var updatedData = recycleNodesInto(renderData, currentData);\n\n        if (updatedData !== renderData) {\n          currentSnapshot = (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, currentSnapshot), {}, {\n            data: updatedData\n          });\n          didMissUpdates = true;\n        }\n\n        currentSnapshots[idx] = currentSnapshot;\n      }); // Only update the cache when the data is changed to avoid\n      // returning different `data` instances\n\n      if (didMissUpdates) {\n        this._cache.set(cacheKey, {\n          kind: 'done',\n          result: getFragmentResult(cacheKey, currentSnapshots, storeEpoch)\n        });\n      }\n\n      return [didMissUpdates, currentSnapshots];\n    }\n\n    var currentSnapshot = environment.lookup(renderedSnapshot.selector);\n    var renderData = renderedSnapshot.data;\n    var currentData = currentSnapshot.data;\n    var updatedData = recycleNodesInto(renderData, currentData);\n    var updatedCurrentSnapshot = {\n      data: updatedData,\n      isMissingData: currentSnapshot.isMissingData,\n      missingClientEdges: currentSnapshot.missingClientEdges,\n      seenRecords: currentSnapshot.seenRecords,\n      selector: currentSnapshot.selector,\n      missingRequiredFields: currentSnapshot.missingRequiredFields,\n      relayResolverErrors: currentSnapshot.relayResolverErrors\n    };\n\n    if (updatedData !== renderData) {\n      this._cache.set(cacheKey, {\n        kind: 'done',\n        result: getFragmentResult(cacheKey, updatedCurrentSnapshot, storeEpoch)\n      });\n    }\n\n    return [updatedData !== renderData, updatedCurrentSnapshot];\n  };\n\n  _proto2.checkMissedUpdatesSpec = function checkMissedUpdatesSpec(fragmentResults) {\n    var _this7 = this;\n\n    return Object.keys(fragmentResults).some(function (key) {\n      return _this7.checkMissedUpdates(fragmentResults[key])[0];\n    });\n  };\n\n  _proto2._getAndSavePromiseForFragmentRequestInFlight = function _getAndSavePromiseForFragmentRequestInFlight(cacheKey, fragmentNode, fragmentOwner, fragmentResult) {\n    var _this8 = this;\n\n    var pendingOperationsResult = getPendingOperationsForFragment(this._environment, fragmentNode, fragmentOwner);\n\n    if (pendingOperationsResult == null) {\n      return null;\n    } // When the Promise for the request resolves, we need to make sure to\n    // update the cache with the latest data available in the store before\n    // resolving the Promise\n\n\n    var networkPromise = pendingOperationsResult.promise;\n    var pendingOperations = pendingOperationsResult.pendingOperations;\n    var promise = networkPromise.then(function () {\n      _this8._cache[\"delete\"](cacheKey);\n    })[\"catch\"](function (error) {\n      _this8._cache[\"delete\"](cacheKey);\n    }); // $FlowExpectedError[prop-missing] Expando to annotate Promises.\n\n    promise.displayName = networkPromise.displayName;\n\n    this._cache.set(cacheKey, {\n      kind: 'pending',\n      pendingOperations: pendingOperations,\n      promise: promise,\n      result: fragmentResult\n    });\n\n    return {\n      promise: promise,\n      pendingOperations: pendingOperations\n    };\n  };\n\n  _proto2._updatePluralSnapshot = function _updatePluralSnapshot(cacheKey, baseSnapshots, latestSnapshot, idx, storeEpoch) {\n    var _currentFragmentResul;\n\n    var currentFragmentResult = this._cache.get(cacheKey);\n\n    if (isPromise(currentFragmentResult)) {\n      reportInvalidCachedData(latestSnapshot.selector.node.name);\n      return;\n    }\n\n    var currentSnapshot = currentFragmentResult === null || currentFragmentResult === void 0 ? void 0 : (_currentFragmentResul = currentFragmentResult.result) === null || _currentFragmentResul === void 0 ? void 0 : _currentFragmentResul.snapshot;\n\n    if (currentSnapshot && !Array.isArray(currentSnapshot)) {\n      reportInvalidCachedData(latestSnapshot.selector.node.name);\n      return;\n    }\n\n    var nextSnapshots = currentSnapshot ? (0, _toConsumableArray2[\"default\"])(currentSnapshot) : (0, _toConsumableArray2[\"default\"])(baseSnapshots);\n    nextSnapshots[idx] = latestSnapshot;\n\n    this._cache.set(cacheKey, {\n      kind: 'done',\n      result: getFragmentResult(cacheKey, nextSnapshots, storeEpoch)\n    });\n  };\n\n  return FragmentResourceImpl;\n}();\n\nfunction reportInvalidCachedData(nodeName) {\n  !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected to find cached data for plural fragment `%s` when ' + 'receiving a subscription. ' + \"If you're seeing this, this is likely a bug in Relay.\", nodeName) : invariant(false) : void 0;\n}\n\nfunction createFragmentResource(environment) {\n  return new FragmentResourceImpl(environment);\n}\n\nvar dataResources = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();\n\nfunction getFragmentResourceForEnvironment(environment) {\n  var cached = dataResources.get(environment);\n\n  if (cached) {\n    return cached;\n  }\n\n  var newDataResource = createFragmentResource(environment);\n  dataResources.set(environment, newDataResource);\n  return newDataResource;\n}\n\nmodule.exports = {\n  createFragmentResource: createFragmentResource,\n  getFragmentResourceForEnvironment: getFragmentResourceForEnvironment\n};", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./FragmentResource'),\n    getFragmentResourceForEnvironment = _require.getFragmentResourceForEnvironment;\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar _require2 = require('react'),\n    useEffect = _require2.useEffect,\n    useRef = _require2.useRef,\n    useState = _require2.useState;\n\nvar _require3 = require('relay-runtime'),\n    getFragmentIdentifier = _require3.getFragmentIdentifier;\n\nvar warning = require(\"fbjs/lib/warning\");\n\nfunction useFragmentNode(fragmentNode, fragmentRef, componentDisplayName) {\n  var environment = useRelayEnvironment();\n  var FragmentResource = getFragmentResourceForEnvironment(environment);\n  var isMountedRef = useRef(false);\n\n  var _useState = useState(0),\n      forceUpdate = _useState[1];\n\n  var fragmentIdentifier = getFragmentIdentifier(fragmentNode, fragmentRef); // Read fragment data; this might suspend.\n\n  var fragmentResult = FragmentResource.readWithIdentifier(fragmentNode, fragmentRef, fragmentIdentifier, componentDisplayName);\n  var isListeningForUpdatesRef = useRef(true);\n\n  function enableStoreUpdates() {\n    isListeningForUpdatesRef.current = true;\n    var didMissUpdates = FragmentResource.checkMissedUpdates(fragmentResult)[0];\n\n    if (didMissUpdates) {\n      handleDataUpdate();\n    }\n  }\n\n  function disableStoreUpdates() {\n    isListeningForUpdatesRef.current = false;\n  }\n\n  function handleDataUpdate() {\n    if (isMountedRef.current === false || isListeningForUpdatesRef.current === false) {\n      return;\n    } // React bails out on noop state updates as an optimization.\n    // If we want to force an update via setState, we need to pass an value.\n    // The actual value can be arbitrary though, e.g. an incremented number.\n\n\n    forceUpdate(function (count) {\n      return count + 1;\n    });\n  } // Establish Relay store subscriptions in the commit phase, only if\n  // rendering for the first time, or if we need to subscribe to new data\n  // If the fragment identifier changes, it means that the variables on the\n  // fragment owner changed, or the fragment ref points to different records.\n  // In this case, we need to resubscribe to the Relay store.\n\n\n  useEffect(function () {\n    isMountedRef.current = true;\n    var disposable = FragmentResource.subscribe(fragmentResult, handleDataUpdate);\n    return function () {\n      // When unmounting or resubscribing to new data, clean up current\n      // subscription. This will also make sure fragment data is no longer\n      // cached so that next time it its read, it will be freshly read from\n      // the Relay store\n      isMountedRef.current = false;\n      disposable.dispose();\n    }; // NOTE: We disable react-hooks-deps warning because environment and fragmentIdentifier\n    // is capturing all information about whether the effect should be re-ran.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environment, fragmentIdentifier]);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (fragmentRef != null && (fragmentResult.data === undefined || Array.isArray(fragmentResult.data) && fragmentResult.data.length > 0 && fragmentResult.data.every(function (data) {\n      return data === undefined;\n    }))) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Expected to have been able to read non-null data for ' + 'fragment `%s` declared in ' + '`%s`, since fragment reference was non-null. ' + \"Make sure that that `%s`'s parent isn't \" + 'holding on to and/or passing a fragment reference for data that ' + 'has been deleted.', fragmentNode.name, componentDisplayName, componentDisplayName) : void 0;\n    }\n  }\n\n  return {\n    // $FlowFixMe[incompatible-return]\n    data: fragmentResult.data,\n    disableStoreUpdates: disableStoreUpdates,\n    enableStoreUpdates: enableStoreUpdates\n  };\n}\n\nmodule.exports = useFragmentNode;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('react'),\n    useRef = _require.useRef;\n\nvar warning = require(\"fbjs/lib/warning\");\n\nfunction useStaticFragmentNodeWarning(fragmentNode, warningContext) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // This is calling `useRef` conditionally, but based on the environment\n    // __DEV__ setting which shouldn't change. This allows us to only pay the\n    // cost of `useRef` in development mode to produce the warning.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var initialPropRef = useRef(fragmentNode.name);\n    process.env.NODE_ENV !== \"production\" ? warning(initialPropRef.current === fragmentNode.name, 'Relay: The %s has to remain the same over the lifetime of a component. ' + 'Changing it is not supported and will result in unexpected behavior.', warningContext) : void 0;\n  }\n}\n\nmodule.exports = useStaticFragmentNodeWarning;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useFragmentNode = require('./useFragmentNode');\n\nvar useStaticFragmentNodeWarning = require('./useStaticFragmentNodeWarning');\n\nvar _require2 = require('react'),\n    useDebugValue = _require2.useDebugValue;\n\nvar _require3 = require('relay-runtime'),\n    getFragment = _require3.getFragment;\n\nfunction useFragment(fragment, key) {\n  // We need to use this hook in order to be able to track if\n  // loadQuery was called during render\n  useTrackLoadQueryInRender();\n  var fragmentNode = getFragment(fragment);\n  useStaticFragmentNodeWarning(fragmentNode, 'first argument of useFragment()');\n\n  var _useFragmentNode = useFragmentNode(fragmentNode, key, 'useFragment()'),\n      data = _useFragmentNode.data;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useDebugValue({\n      fragment: fragmentNode.name,\n      data: data\n    });\n  }\n\n  return data;\n}\n\nmodule.exports = useFragment;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('react'),\n    useCallback = _require.useCallback,\n    useEffect = _require.useEffect,\n    useRef = _require.useRef;\n/**\n * This hook returns a mutable React ref that holds the value of whether a\n * fetch request is in flight. The reason this is a mutable ref instead of\n * state is because we don't actually want to trigger an update when this\n * changes, but instead synchronously keep track of whether the network request\n * is in flight, for example in order to bail out of a request if one is\n * already in flight. If this was state, due to the nature of concurrent\n * updates, this value wouldn't be in sync with when the request is actually\n * in flight.\n * The additional functions returned by this Hook can be used to mutate\n * the ref.\n */\n\n\nfunction useFetchTrackingRef() {\n  var subscriptionRef = useRef(null);\n  var isFetchingRef = useRef(false);\n  var disposeFetch = useCallback(function () {\n    if (subscriptionRef.current != null) {\n      subscriptionRef.current.unsubscribe();\n      subscriptionRef.current = null;\n    }\n\n    isFetchingRef.current = false;\n  }, []);\n  var startFetch = useCallback(function (subscription) {\n    subscriptionRef.current = subscription;\n    isFetchingRef.current = true;\n  }, []);\n  var completeFetch = useCallback(function () {\n    subscriptionRef.current = null;\n    isFetchingRef.current = false;\n  }, []); // Dipose of ongoing fetch on unmount\n\n  useEffect(function () {\n    return disposeFetch;\n  }, [disposeFetch]);\n  return {\n    isFetchingRef: isFetchingRef,\n    startFetch: startFetch,\n    disposeFetch: disposeFetch,\n    completeFetch: completeFetch\n  };\n}\n\nmodule.exports = useFetchTrackingRef;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar ProfilerContext = require('./ProfilerContext');\n\nvar _require = require('./QueryResource'),\n    getQueryCacheIdentifier = _require.getQueryCacheIdentifier,\n    getQueryResourceForEnvironment = _require.getQueryResourceForEnvironment;\n\nvar useFetchTrackingRef = require('./useFetchTrackingRef');\n\nvar useFragmentNode = require('./useFragmentNode');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar React = require('react');\n\nvar useContext = React.useContext,\n    useEffect = React.useEffect,\n    useState = React.useState,\n    useRef = React.useRef;\n\nfunction useLazyLoadQueryNode(_ref) {\n  var query = _ref.query,\n      componentDisplayName = _ref.componentDisplayName,\n      fetchObservable = _ref.fetchObservable,\n      fetchPolicy = _ref.fetchPolicy,\n      fetchKey = _ref.fetchKey,\n      renderPolicy = _ref.renderPolicy;\n  var environment = useRelayEnvironment();\n  var profilerContext = useContext(ProfilerContext);\n  var QueryResource = getQueryResourceForEnvironment(environment);\n\n  var _useState = useState(0),\n      forceUpdateKey = _useState[0],\n      forceUpdate = _useState[1];\n\n  var _useFetchTrackingRef = useFetchTrackingRef(),\n      startFetch = _useFetchTrackingRef.startFetch,\n      completeFetch = _useFetchTrackingRef.completeFetch;\n\n  var cacheBreaker = \"\".concat(forceUpdateKey, \"-\").concat(fetchKey !== null && fetchKey !== void 0 ? fetchKey : '');\n  var cacheIdentifier = getQueryCacheIdentifier(environment, query, fetchPolicy, renderPolicy, cacheBreaker);\n  var preparedQueryResult = profilerContext.wrapPrepareQueryResource(function () {\n    return QueryResource.prepareWithIdentifier(cacheIdentifier, query, fetchObservable, fetchPolicy, renderPolicy, {\n      start: startFetch,\n      complete: completeFetch,\n      error: completeFetch\n    }, profilerContext);\n  });\n  var maybeHiddenOrFastRefresh = useRef(false);\n  useEffect(function () {\n    return function () {\n      // Attempt to detect if the component was\n      // hidden (by Offscreen API), or fast refresh occured;\n      // Only in these situations would the effect cleanup\n      // for \"unmounting\" run multiple times, so if\n      // we are ever able to read this ref with a value\n      // of true, it means that one of these cases\n      // has happened.\n      maybeHiddenOrFastRefresh.current = true;\n    };\n  }, []);\n  useEffect(function () {\n    if (maybeHiddenOrFastRefresh.current === true) {\n      // This block only runs if the component has previously \"unmounted\"\n      // due to it being hidden by the Offscreen API, or during fast refresh.\n      // At this point, the current cached resource will have been disposed\n      // by the previous cleanup, so instead of attempting to\n      // do our regular commit setup, which would incorrectly attempt to\n      // retain a cached query resource that was disposed, we need to force\n      // a re-render so that the cache entry for this query is re-intiliazed and\n      // and re-evaluated (and potentially cause a refetch).\n      maybeHiddenOrFastRefresh.current = false;\n      forceUpdate(function (n) {\n        return n + 1;\n      });\n      return;\n    }\n\n    var disposable = QueryResource.retain(preparedQueryResult, profilerContext);\n    return function () {\n      disposable.dispose();\n    }; // NOTE: We disable react-hooks-deps warning because the `environment`\n    // and `cacheIdentifier` identities are capturing all information about whether\n    // the effect should be re-executed and the query re-retained.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environment, cacheIdentifier]);\n  useEffect(function () {\n    // Release any temporary retain that's not released. At this point, if the\n    // cacheIdentifier doesn't change, the query is still permanently retained,\n    // and the temporary retain is redundant.\n    QueryResource.releaseTemporaryRetain(preparedQueryResult); // This effect is intended to run on every commit, thus no dependency\n  });\n  var fragmentNode = preparedQueryResult.fragmentNode,\n      fragmentRef = preparedQueryResult.fragmentRef;\n\n  var _useFragmentNode = useFragmentNode(fragmentNode, fragmentRef, componentDisplayName),\n      data = _useFragmentNode.data;\n\n  return data;\n}\n\nmodule.exports = useLazyLoadQueryNode;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar React = require('react');\n\nvar useMemo = React.useMemo,\n    useRef = React.useRef,\n    useState = React.useState;\n\nfunction useMemoVariables(variables) {\n  var _variablesChangedGene2;\n\n  // The value of this ref is a counter that should be incremented when\n  // variables change. This allows us to use the counter as a\n  // memoization value to indicate if the computation for useMemo\n  // should be re-executed.\n  var variablesChangedGenerationRef = useRef(0); // We mirror the variables to check if they have changed between renders\n\n  var _useState = useState(variables),\n      mirroredVariables = _useState[0],\n      setMirroredVariables = _useState[1];\n\n  var variablesChanged = !areEqual(variables, mirroredVariables);\n\n  if (variablesChanged) {\n    var _variablesChangedGene;\n\n    variablesChangedGenerationRef.current = ((_variablesChangedGene = variablesChangedGenerationRef.current) !== null && _variablesChangedGene !== void 0 ? _variablesChangedGene : 0) + 1;\n    setMirroredVariables(variables);\n  } // NOTE: We disable react-hooks-deps warning because we explicitly\n  // don't want to memoize on object identity\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  var memoVariables = useMemo(function () {\n    return variables;\n  }, [variablesChangedGenerationRef.current]);\n  return [memoVariables, (_variablesChangedGene2 = variablesChangedGenerationRef.current) !== null && _variablesChangedGene2 !== void 0 ? _variablesChangedGene2 : 0];\n}\n\nmodule.exports = useMemoVariables;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar useMemoVariables = require('./useMemoVariables');\n\nvar React = require('react');\n\nvar _require = require('relay-runtime'),\n    createOperationDescriptor = _require.createOperationDescriptor,\n    getRequest = _require.getRequest;\n\nvar useMemo = React.useMemo;\n\nfunction useMemoOperationDescriptor(gqlQuery, variables, cacheConfig) {\n  var _useMemoVariables = useMemoVariables(variables),\n      memoVariables = _useMemoVariables[0];\n\n  var _useMemoVariables2 = useMemoVariables(cacheConfig || {}),\n      memoCacheConfig = _useMemoVariables2[0];\n\n  return useMemo(function () {\n    return createOperationDescriptor(getRequest(gqlQuery), memoVariables, memoCacheConfig);\n  }, [gqlQuery, memoVariables, memoCacheConfig]);\n}\n\nmodule.exports = useMemoOperationDescriptor;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useLazyLoadQueryNode = require('./useLazyLoadQueryNode');\n\nvar useMemoOperationDescriptor = require('./useMemoOperationDescriptor');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar _require2 = require('relay-runtime'),\n    fetchQuery = _require2.__internal.fetchQuery;\n\nfunction useLazyLoadQuery(gqlQuery, variables, options) {\n  // We need to use this hook in order to be able to track if\n  // loadQuery was called during render\n  useTrackLoadQueryInRender();\n  var environment = useRelayEnvironment();\n  var query = useMemoOperationDescriptor(gqlQuery, variables, options && options.networkCacheConfig ? options.networkCacheConfig : {\n    force: true\n  });\n  var data = useLazyLoadQueryNode({\n    componentDisplayName: 'useLazyLoadQuery()',\n    fetchKey: options === null || options === void 0 ? void 0 : options.fetchKey,\n    fetchObservable: fetchQuery(environment, query),\n    fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n    query: query,\n    renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n  });\n  return data;\n}\n\nmodule.exports = useLazyLoadQuery;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar useIsMountedRef = require('./useIsMountedRef');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar React = require('react');\n\nvar _require = require('relay-runtime'),\n    defaultCommitMutation = _require.commitMutation;\n\nvar useState = React.useState,\n    useEffect = React.useEffect,\n    useRef = React.useRef,\n    useCallback = React.useCallback;\n\nfunction useMutation(mutation) {\n  var commitMutationFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultCommitMutation;\n  var environment = useRelayEnvironment();\n  var isMountedRef = useIsMountedRef();\n  var environmentRef = useRef(environment);\n  var mutationRef = useRef(mutation);\n  var inFlightMutationsRef = useRef(new Set());\n\n  var _useState = useState(false),\n      isMutationInFlight = _useState[0],\n      setMutationInFlight = _useState[1];\n\n  var cleanup = useCallback(function (disposable) {\n    if (environmentRef.current === environment && mutationRef.current === mutation) {\n      inFlightMutationsRef.current[\"delete\"](disposable);\n\n      if (isMountedRef.current) {\n        setMutationInFlight(inFlightMutationsRef.current.size > 0);\n      }\n    }\n  }, [environment, isMountedRef, mutation]);\n  useEffect(function () {\n    if (environmentRef.current !== environment || mutationRef.current !== mutation) {\n      inFlightMutationsRef.current = new Set();\n\n      if (isMountedRef.current) {\n        setMutationInFlight(false);\n      }\n\n      environmentRef.current = environment;\n      mutationRef.current = mutation;\n    }\n  }, [environment, isMountedRef, mutation]);\n  var commit = useCallback(function (config) {\n    var disposable = commitMutationFn(environment, (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, config), {}, {\n      mutation: mutation,\n      onCompleted: function onCompleted(response, errors) {\n        var _config$onCompleted;\n\n        cleanup(disposable);\n        (_config$onCompleted = config.onCompleted) === null || _config$onCompleted === void 0 ? void 0 : _config$onCompleted.call(config, response, errors);\n      },\n      onError: function onError(error) {\n        var _config$onError;\n\n        cleanup(disposable);\n        (_config$onError = config.onError) === null || _config$onError === void 0 ? void 0 : _config$onError.call(config, error);\n      },\n      onUnsubscribe: function onUnsubscribe() {\n        var _config$onUnsubscribe;\n\n        cleanup(disposable);\n        (_config$onUnsubscribe = config.onUnsubscribe) === null || _config$onUnsubscribe === void 0 ? void 0 : _config$onUnsubscribe.call(config);\n      },\n      onNext: function onNext() {\n        var _config$onNext;\n\n        (_config$onNext = config.onNext) === null || _config$onNext === void 0 ? void 0 : _config$onNext.call(config);\n      }\n    }));\n    inFlightMutationsRef.current.add(disposable);\n\n    if (isMountedRef.current) {\n      setMutationInFlight(true);\n    }\n\n    return disposable;\n  }, [cleanup, commitMutationFn, environment, isMountedRef, mutation]);\n  return [commit, isMutationInFlight];\n}\n\nmodule.exports = useMutation;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n'use strict';\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar invariant = require('invariant');\n\nvar React = require('react');\n\nvar _require = require('relay-runtime'),\n    getObservableForActiveRequest = _require.__internal.getObservableForActiveRequest,\n    getSelector = _require.getSelector;\n\nvar useEffect = React.useEffect,\n    useState = React.useState,\n    useMemo = React.useMemo;\n\nfunction useIsOperationNodeActive(fragmentNode, fragmentRef) {\n  var environment = useRelayEnvironment();\n  var observable = useMemo(function () {\n    var selector = getSelector(fragmentNode, fragmentRef);\n\n    if (selector == null) {\n      return null;\n    }\n\n    !(selector.kind === 'SingularReaderSelector') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'useIsOperationNodeActive: Plural fragments are not supported.') : invariant(false) : void 0;\n    return getObservableForActiveRequest(environment, selector.owner);\n  }, [environment, fragmentNode, fragmentRef]);\n\n  var _useState = useState(observable != null),\n      isActive = _useState[0],\n      setIsActive = _useState[1];\n\n  useEffect(function () {\n    var subscription;\n    setIsActive(observable != null);\n\n    if (observable != null) {\n      var onCompleteOrError = function onCompleteOrError() {\n        setIsActive(false);\n      };\n\n      subscription = observable.subscribe({\n        complete: onCompleteOrError,\n        error: onCompleteOrError\n      });\n    }\n\n    return function () {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n  }, [observable]);\n  return isActive;\n}\n\nmodule.exports = useIsOperationNodeActive;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar useFetchTrackingRef = require('./useFetchTrackingRef');\n\nvar useIsMountedRef = require('./useIsMountedRef');\n\nvar useIsOperationNodeActive = require('./useIsOperationNodeActive');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar invariant = require('invariant');\n\nvar _require = require('react'),\n    useCallback = _require.useCallback,\n    useEffect = _require.useEffect,\n    useState = _require.useState;\n\nvar _require2 = require('relay-runtime'),\n    ConnectionInterface = _require2.ConnectionInterface,\n    fetchQuery = _require2.__internal.fetchQuery,\n    createOperationDescriptor = _require2.createOperationDescriptor,\n    getPaginationVariables = _require2.getPaginationVariables,\n    getSelector = _require2.getSelector,\n    getValueAtPath = _require2.getValueAtPath;\n\nvar warning = require(\"fbjs/lib/warning\");\n\nfunction useLoadMoreFunction(args) {\n  var direction = args.direction,\n      fragmentNode = args.fragmentNode,\n      fragmentRef = args.fragmentRef,\n      fragmentIdentifier = args.fragmentIdentifier,\n      fragmentData = args.fragmentData,\n      connectionPathInFragmentData = args.connectionPathInFragmentData,\n      paginationRequest = args.paginationRequest,\n      paginationMetadata = args.paginationMetadata,\n      componentDisplayName = args.componentDisplayName,\n      observer = args.observer,\n      onReset = args.onReset,\n      identifierField = args.identifierField;\n  var environment = useRelayEnvironment();\n\n  var _useFetchTrackingRef = useFetchTrackingRef(),\n      isFetchingRef = _useFetchTrackingRef.isFetchingRef,\n      startFetch = _useFetchTrackingRef.startFetch,\n      disposeFetch = _useFetchTrackingRef.disposeFetch,\n      completeFetch = _useFetchTrackingRef.completeFetch;\n\n  var identifierValue = identifierField != null && fragmentData != null && typeof fragmentData === 'object' ? fragmentData[identifierField] : null;\n  var isMountedRef = useIsMountedRef();\n\n  var _useState = useState(environment),\n      mirroredEnvironment = _useState[0],\n      setMirroredEnvironment = _useState[1];\n\n  var _useState2 = useState(fragmentIdentifier),\n      mirroredFragmentIdentifier = _useState2[0],\n      setMirroredFragmentIdentifier = _useState2[1];\n\n  var isParentQueryActive = useIsOperationNodeActive(fragmentNode, fragmentRef);\n  var shouldReset = environment !== mirroredEnvironment || fragmentIdentifier !== mirroredFragmentIdentifier;\n\n  if (shouldReset) {\n    disposeFetch();\n    onReset();\n    setMirroredEnvironment(environment);\n    setMirroredFragmentIdentifier(fragmentIdentifier);\n  }\n\n  var _getConnectionState = getConnectionState(direction, fragmentNode, fragmentData, connectionPathInFragmentData),\n      cursor = _getConnectionState.cursor,\n      hasMore = _getConnectionState.hasMore; // Dispose of pagination requests in flight when unmounting\n\n\n  useEffect(function () {\n    return function () {\n      disposeFetch();\n    };\n  }, [disposeFetch]);\n  var loadMore = useCallback(function (count, options) {\n    // TODO(T41131846): Fetch/Caching policies for loadMore\n    var onComplete = options === null || options === void 0 ? void 0 : options.onComplete;\n\n    if (isMountedRef.current !== true) {\n      // Bail out and warn if we're trying to paginate after the component\n      // has unmounted\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Unexpected fetch on unmounted component for fragment ' + '`%s` in `%s`. It looks like some instances of your component are ' + 'still trying to fetch data but they already unmounted. ' + 'Please make sure you clear all timers, intervals, ' + 'async calls, etc that may trigger a fetch.', fragmentNode.name, componentDisplayName) : void 0;\n      return {\n        dispose: function dispose() {}\n      };\n    }\n\n    var fragmentSelector = getSelector(fragmentNode, fragmentRef);\n\n    if (isFetchingRef.current === true || fragmentData == null || isParentQueryActive) {\n      if (fragmentSelector == null) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Unexpected fetch while using a null fragment ref ' + 'for fragment `%s` in `%s`. When fetching more items, we expect ' + \"initial fragment data to be non-null. Please make sure you're \" + 'passing a valid fragment ref to `%s` before paginating.', fragmentNode.name, componentDisplayName, componentDisplayName) : void 0;\n      }\n\n      if (onComplete) {\n        onComplete(null);\n      }\n\n      return {\n        dispose: function dispose() {}\n      };\n    }\n\n    !(fragmentSelector != null && fragmentSelector.kind !== 'PluralReaderSelector') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected to be able to find a non-plural fragment owner for ' + \"fragment `%s` when using `%s`. If you're seeing this, \" + 'this is likely a bug in Relay.', fragmentNode.name, componentDisplayName) : invariant(false) : void 0;\n    var parentVariables = fragmentSelector.owner.variables;\n    var fragmentVariables = fragmentSelector.variables;\n    var extraVariables = options === null || options === void 0 ? void 0 : options.UNSTABLE_extraVariables;\n    var baseVariables = (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, parentVariables), fragmentVariables);\n    var paginationVariables = getPaginationVariables(direction, count, cursor, baseVariables, (0, _objectSpread2[\"default\"])({}, extraVariables), paginationMetadata); // If the query needs an identifier value ('id' or similar) and one\n    // was not explicitly provided, read it from the fragment data.\n\n    if (identifierField != null) {\n      // @refetchable fragments are guaranteed to have an `id` selection\n      // if the type is Node, implements Node, or is @fetchable. Double-check\n      // that there actually is a value at runtime.\n      if (typeof identifierValue !== 'string') {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Expected result to have a string  ' + '`%s` in order to refetch, got `%s`.', identifierField, identifierValue) : void 0;\n      }\n\n      paginationVariables.id = identifierValue;\n    }\n\n    var paginationQuery = createOperationDescriptor(paginationRequest, paginationVariables, {\n      force: true\n    });\n    fetchQuery(environment, paginationQuery).subscribe((0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, observer), {}, {\n      start: function start(subscription) {\n        startFetch(subscription);\n        observer.start && observer.start(subscription);\n      },\n      complete: function complete() {\n        completeFetch();\n        observer.complete && observer.complete();\n        onComplete && onComplete(null);\n      },\n      error: function error(_error) {\n        completeFetch();\n        observer.error && observer.error(_error);\n        onComplete && onComplete(_error);\n      }\n    }));\n    return {\n      dispose: disposeFetch\n    };\n  }, // NOTE: We disable react-hooks-deps warning because all values\n  // inside paginationMetadata are static\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [environment, identifierValue, direction, cursor, startFetch, disposeFetch, completeFetch, isFetchingRef, isParentQueryActive, fragmentData, fragmentNode.name, fragmentRef, componentDisplayName]);\n  return [loadMore, hasMore, disposeFetch];\n}\n\nfunction getConnectionState(direction, fragmentNode, fragmentData, connectionPathInFragmentData) {\n  var _pageInfo$END_CURSOR, _pageInfo$START_CURSO;\n\n  var _ConnectionInterface$ = ConnectionInterface.get(),\n      EDGES = _ConnectionInterface$.EDGES,\n      PAGE_INFO = _ConnectionInterface$.PAGE_INFO,\n      HAS_NEXT_PAGE = _ConnectionInterface$.HAS_NEXT_PAGE,\n      HAS_PREV_PAGE = _ConnectionInterface$.HAS_PREV_PAGE,\n      END_CURSOR = _ConnectionInterface$.END_CURSOR,\n      START_CURSOR = _ConnectionInterface$.START_CURSOR;\n\n  var connection = getValueAtPath(fragmentData, connectionPathInFragmentData);\n\n  if (connection == null) {\n    return {\n      cursor: null,\n      hasMore: false\n    };\n  }\n\n  !(typeof connection === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected connection in fragment `%s` to have been `null`, or ' + 'a plain object with %s and %s properties. Instead got `%s`.', fragmentNode.name, EDGES, PAGE_INFO, connection) : invariant(false) : void 0;\n  var edges = connection[EDGES];\n  var pageInfo = connection[PAGE_INFO];\n\n  if (edges == null || pageInfo == null) {\n    return {\n      cursor: null,\n      hasMore: false\n    };\n  }\n\n  !Array.isArray(edges) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected connection in fragment `%s` to have a plural `%s` field. ' + 'Instead got `%s`.', fragmentNode.name, EDGES, edges) : invariant(false) : void 0;\n  !(typeof pageInfo === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected connection in fragment `%s` to have a `%s` field. ' + 'Instead got `%s`.', fragmentNode.name, PAGE_INFO, pageInfo) : invariant(false) : void 0;\n  var cursor = direction === 'forward' ? (_pageInfo$END_CURSOR = pageInfo[END_CURSOR]) !== null && _pageInfo$END_CURSOR !== void 0 ? _pageInfo$END_CURSOR : null : (_pageInfo$START_CURSO = pageInfo[START_CURSOR]) !== null && _pageInfo$START_CURSO !== void 0 ? _pageInfo$START_CURSO : null;\n  !(cursor === null || typeof cursor === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected page info for connection in fragment `%s` to have a ' + 'valid `%s`. Instead got `%s`.', fragmentNode.name, START_CURSOR, cursor) : invariant(false) : void 0;\n  var hasMore;\n\n  if (direction === 'forward') {\n    hasMore = cursor != null && pageInfo[HAS_NEXT_PAGE] === true;\n  } else {\n    hasMore = cursor != null && pageInfo[HAS_PREV_PAGE] === true;\n  }\n\n  return {\n    cursor: cursor,\n    hasMore: hasMore\n  };\n}\n\nmodule.exports = useLoadMoreFunction;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar _require = require('./loadQuery'),\n    loadQuery = _require.loadQuery,\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useIsMountedRef = require('./useIsMountedRef');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar _require2 = require('react'),\n    useCallback = _require2.useCallback,\n    useEffect = _require2.useEffect,\n    useRef = _require2.useRef,\n    useState = _require2.useState;\n\nvar _require3 = require('relay-runtime'),\n    getRequest = _require3.getRequest;\n\nvar initialNullQueryReferenceState = {\n  kind: 'NullQueryReference'\n};\n\nfunction requestIsLiveQuery(preloadableRequest) {\n  if (preloadableRequest.kind === 'PreloadableConcreteRequest') {\n    return preloadableRequest.params.metadata.live !== undefined;\n  }\n\n  var request = getRequest(preloadableRequest);\n  return request.params.metadata.live !== undefined;\n}\n\nfunction useQueryLoader(preloadableRequest, initialQueryReference) {\n  /**\n   * We want to always call `queryReference.dispose()` for every call to\n   * `setQueryReference(loadQuery(...))` so that no leaks of data in Relay stores\n   * will occur.\n   *\n   * However, a call to `setState(newState)` is not always followed by a commit where\n   * this value is reflected in the state. Thus, we cannot reliably clean up each\n   * ref with `useEffect(() => () => queryReference.dispose(), [queryReference])`.\n   *\n   * Instead, we keep track of each call to `loadQuery` in a ref.\n   * Relying on the fact that if a state change commits, no state changes that were\n   * initiated prior to the currently committing state change will ever subsequently\n   * commit, we can safely dispose of all preloaded query references\n   * associated with state changes initiated prior to the currently committing state\n   * change.\n   *\n   * Finally, when the hook unmounts, we also dispose of all remaining uncommitted\n   * query references.\n   */\n  var initialQueryReferenceInternal = initialQueryReference !== null && initialQueryReference !== void 0 ? initialQueryReference : initialNullQueryReferenceState;\n  var environment = useRelayEnvironment();\n  useTrackLoadQueryInRender();\n  var isMountedRef = useIsMountedRef();\n  var undisposedQueryReferencesRef = useRef(new Set([initialQueryReferenceInternal]));\n\n  var _useState = useState(function () {\n    return initialQueryReferenceInternal;\n  }),\n      queryReference = _useState[0],\n      setQueryReference = _useState[1];\n\n  var _useState2 = useState(function () {\n    return initialQueryReferenceInternal;\n  }),\n      previousInitialQueryReference = _useState2[0],\n      setPreviousInitialQueryReference = _useState2[1];\n\n  if (initialQueryReferenceInternal !== previousInitialQueryReference) {\n    // Rendering the query reference makes it \"managed\" by this hook, so\n    // we start keeping track of it so we can dispose it when it is no longer\n    // necessary here\n    // TODO(T78446637): Handle disposal of managed query references in\n    // components that were never mounted after rendering\n    undisposedQueryReferencesRef.current.add(initialQueryReferenceInternal);\n    setPreviousInitialQueryReference(initialQueryReferenceInternal);\n    setQueryReference(initialQueryReferenceInternal);\n  }\n\n  var disposeQuery = useCallback(function () {\n    if (isMountedRef.current) {\n      undisposedQueryReferencesRef.current.add(initialNullQueryReferenceState);\n      setQueryReference(initialNullQueryReferenceState);\n    }\n  }, [isMountedRef]);\n  var queryLoaderCallback = useCallback(function (variables, options) {\n    var mergedOptions = options != null && options.hasOwnProperty('__environment') ? {\n      fetchPolicy: options.fetchPolicy,\n      networkCacheConfig: options.networkCacheConfig,\n      __nameForWarning: options.__nameForWarning\n    } : options;\n\n    if (isMountedRef.current) {\n      var _options$__environmen;\n\n      var updatedQueryReference = loadQuery((_options$__environmen = options === null || options === void 0 ? void 0 : options.__environment) !== null && _options$__environmen !== void 0 ? _options$__environmen : environment, preloadableRequest, variables, mergedOptions);\n      undisposedQueryReferencesRef.current.add(updatedQueryReference);\n      setQueryReference(updatedQueryReference);\n    }\n  }, [environment, preloadableRequest, setQueryReference, isMountedRef]);\n  var maybeHiddenOrFastRefresh = useRef(false);\n  useEffect(function () {\n    return function () {\n      // Attempt to detect if the component was\n      // hidden (by Offscreen API), or fast refresh occured;\n      // Only in these situations would the effect cleanup\n      // for \"unmounting\" run multiple times, so if\n      // we are ever able to read this ref with a value\n      // of true, it means that one of these cases\n      // has happened.\n      maybeHiddenOrFastRefresh.current = true;\n    };\n  }, []);\n  useEffect(function () {\n    if (maybeHiddenOrFastRefresh.current === true) {\n      // This block only runs if the component has previously \"unmounted\"\n      // due to it being hidden by the Offscreen API, or during fast refresh.\n      // At this point, the current queryReference will have been disposed\n      // by the previous cleanup, so instead of attempting to\n      // do our regular commit setup, which would incorrectly leave our\n      // current queryReference disposed, we need to load the query again\n      // and force a re-render by calling queryLoaderCallback again,\n      // so that the queryReference is correctly re-retained, and\n      // potentially refetched if necessary.\n      maybeHiddenOrFastRefresh.current = false;\n\n      if (queryReference.kind !== 'NullQueryReference') {\n        queryLoaderCallback(queryReference.variables, {\n          fetchPolicy: queryReference.fetchPolicy,\n          networkCacheConfig: queryReference.networkCacheConfig\n        });\n      }\n\n      return;\n    } // When a new queryReference is committed, we iterate over all\n    // query references in undisposedQueryReferences and dispose all of\n    // the refs that aren't the currently committed one. This ensures\n    // that we don't leave any dangling query references for the\n    // case that loadQuery is called multiple times before commit; when\n    // this happens, multiple state updates will be scheduled, but only one\n    // will commit, meaning that we need to keep track of and dispose any\n    // query references that don't end up committing.\n    // - We are relying on the fact that sets iterate in insertion order, and we\n    // can remove items from a set as we iterate over it (i.e. no iterator\n    // invalidation issues.) Thus, it is safe to loop through\n    // undisposedQueryReferences until we find queryReference, and\n    // remove and dispose all previous references.\n    // - We are guaranteed to find queryReference in the set, because if a\n    // state update results in a commit, no state updates initiated prior to that\n    // one will be committed, and we are disposing and removing references\n    // associated with updates that were scheduled prior to the currently\n    // committing state change. (A useEffect callback is called during the commit\n    // phase.)\n\n\n    var undisposedQueryReferences = undisposedQueryReferencesRef.current;\n\n    if (isMountedRef.current) {\n      var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(undisposedQueryReferences),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var undisposedQueryReference = _step.value;\n\n          if (undisposedQueryReference === queryReference) {\n            break;\n          }\n\n          undisposedQueryReferences[\"delete\"](undisposedQueryReference);\n\n          if (undisposedQueryReference.kind !== 'NullQueryReference') {\n            if (requestIsLiveQuery(preloadableRequest)) {\n              undisposedQueryReference.dispose && undisposedQueryReference.dispose();\n            } else {\n              undisposedQueryReference.releaseQuery && undisposedQueryReference.releaseQuery();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, [queryReference, isMountedRef, queryLoaderCallback, preloadableRequest]);\n  useEffect(function () {\n    return function disposeAllRemainingQueryReferences() {\n      // undisposedQueryReferences.current is never reassigned\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(undisposedQueryReferencesRef.current),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var undisposedQueryReference = _step2.value;\n\n          if (undisposedQueryReference.kind !== 'NullQueryReference') {\n            if (requestIsLiveQuery(preloadableRequest)) {\n              undisposedQueryReference.dispose && undisposedQueryReference.dispose();\n            } else {\n              undisposedQueryReference.releaseQuery && undisposedQueryReference.releaseQuery();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    };\n  }, [preloadableRequest]);\n  return [queryReference.kind === 'NullQueryReference' ? null : queryReference, queryLoaderCallback, disposeQuery];\n}\n\nmodule.exports = useQueryLoader;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _require = require('./FragmentResource'),\n    getFragmentResourceForEnvironment = _require.getFragmentResourceForEnvironment;\n\nvar ProfilerContext = require('./ProfilerContext');\n\nvar _require2 = require('./QueryResource'),\n    getQueryResourceForEnvironment = _require2.getQueryResourceForEnvironment;\n\nvar useFragmentNode = require('./useFragmentNode');\n\nvar useIsMountedRef = require('./useIsMountedRef');\n\nvar useQueryLoader = require('./useQueryLoader');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar invariant = require('invariant');\n\nvar _require3 = require('react'),\n    useCallback = _require3.useCallback,\n    useContext = _require3.useContext,\n    useReducer = _require3.useReducer;\n\nvar _require4 = require('relay-runtime'),\n    fetchQuery = _require4.__internal.fetchQuery,\n    createOperationDescriptor = _require4.createOperationDescriptor,\n    getFragmentIdentifier = _require4.getFragmentIdentifier,\n    getRefetchMetadata = _require4.getRefetchMetadata,\n    getSelector = _require4.getSelector,\n    getValueAtPath = _require4.getValueAtPath;\n\nvar warning = require(\"fbjs/lib/warning\");\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'refetch':\n      {\n        var _action$refetchEnviro;\n\n        return (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, state), {}, {\n          fetchPolicy: action.fetchPolicy,\n          mirroredEnvironment: (_action$refetchEnviro = action.refetchEnvironment) !== null && _action$refetchEnviro !== void 0 ? _action$refetchEnviro : state.mirroredEnvironment,\n          onComplete: action.onComplete,\n          refetchEnvironment: action.refetchEnvironment,\n          refetchQuery: action.refetchQuery,\n          renderPolicy: action.renderPolicy\n        });\n      }\n\n    case 'reset':\n      {\n        return {\n          fetchPolicy: undefined,\n          mirroredEnvironment: action.environment,\n          mirroredFragmentIdentifier: action.fragmentIdentifier,\n          onComplete: undefined,\n          refetchQuery: null,\n          renderPolicy: undefined\n        };\n      }\n\n    default:\n      {\n        action.type;\n        throw new Error('useRefetchableFragmentNode: Unexpected action type');\n      }\n  }\n}\n\nfunction useRefetchableFragmentNode(fragmentNode, parentFragmentRef, componentDisplayName) {\n  var parentEnvironment = useRelayEnvironment();\n\n  var _getRefetchMetadata = getRefetchMetadata(fragmentNode, componentDisplayName),\n      refetchableRequest = _getRefetchMetadata.refetchableRequest,\n      fragmentRefPathInResponse = _getRefetchMetadata.fragmentRefPathInResponse,\n      identifierField = _getRefetchMetadata.identifierField;\n\n  var fragmentIdentifier = getFragmentIdentifier(fragmentNode, parentFragmentRef);\n\n  var _useReducer = useReducer(reducer, {\n    fetchPolicy: undefined,\n    mirroredEnvironment: parentEnvironment,\n    mirroredFragmentIdentifier: fragmentIdentifier,\n    onComplete: undefined,\n    refetchEnvironment: null,\n    refetchQuery: null,\n    renderPolicy: undefined\n  }),\n      refetchState = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var fetchPolicy = refetchState.fetchPolicy,\n      mirroredEnvironment = refetchState.mirroredEnvironment,\n      mirroredFragmentIdentifier = refetchState.mirroredFragmentIdentifier,\n      onComplete = refetchState.onComplete,\n      refetchEnvironment = refetchState.refetchEnvironment,\n      refetchQuery = refetchState.refetchQuery,\n      renderPolicy = refetchState.renderPolicy;\n  var environment = refetchEnvironment !== null && refetchEnvironment !== void 0 ? refetchEnvironment : parentEnvironment;\n  var QueryResource = getQueryResourceForEnvironment(environment);\n  var FragmentResource = getFragmentResourceForEnvironment(environment);\n  var profilerContext = useContext(ProfilerContext);\n  var shouldReset = environment !== mirroredEnvironment || fragmentIdentifier !== mirroredFragmentIdentifier;\n\n  var _useQueryLoader = useQueryLoader(refetchableRequest),\n      queryRef = _useQueryLoader[0],\n      loadQuery = _useQueryLoader[1],\n      disposeQuery = _useQueryLoader[2];\n\n  var fragmentRef = parentFragmentRef;\n\n  if (shouldReset) {\n    dispatch({\n      type: 'reset',\n      environment: environment,\n      fragmentIdentifier: fragmentIdentifier\n    });\n    disposeQuery();\n  } else if (refetchQuery != null && queryRef != null) {\n    // If refetch was called, we expect to have a refetchQuery and queryRef\n    // in state, since both state updates to set the refetchQuery and the\n    // queryRef occur simultaneously.\n    // In this case, we need to read the refetched query data (potentially\n    // suspending if it's in flight), and extract the new fragment ref\n    // from the query in order read the current @refetchable fragment\n    // with the updated fragment owner as the new refetchQuery.\n    // Before observing the refetch, record the current ID and typename\n    // so that, if we are refetching existing data on\n    // a field that implements Node, after refetching we\n    // can validate that the received data is consistent\n    var debugPreviousIDAndTypename;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      debugPreviousIDAndTypename = debugFunctions.getInitialIDAndType(refetchQuery.request.variables, fragmentRefPathInResponse, environment);\n    }\n\n    var handleQueryCompleted = function handleQueryCompleted(maybeError) {\n      onComplete && onComplete(maybeError !== null && maybeError !== void 0 ? maybeError : null);\n    }; // The queryRef.source obtained from useQueryLoader will be\n    // an observable we can consume /if/ a network request was\n    // started. Otherwise, given that QueryResource.prepare\n    // always expects an observable we fall back to a new network\n    // observable. Note however that if loadQuery did not make a network\n    // request, we don't expect to make one here, unless the state of\n    // the cache has changed between the call to refetch and this\n    // render.\n\n\n    var fetchObservable = queryRef.source != null ? queryRef.source : fetchQuery(environment, refetchQuery); // Now wwe can we read the refetch query here using the\n    // queryRef provided from useQueryLoader. Note that the\n    // network request is started during the call to refetch,\n    // but if the refetch query is still in flight, we will suspend\n    // at this point:\n\n    var queryResult = profilerContext.wrapPrepareQueryResource(function () {\n      return QueryResource.prepare(refetchQuery, fetchObservable, fetchPolicy, renderPolicy, {\n        error: handleQueryCompleted,\n        complete: function complete() {\n          // Validate that the type of the object we got back matches the type\n          // of the object already in the store\n          if (process.env.NODE_ENV !== \"production\") {\n            debugFunctions.checkSameTypeAfterRefetch(debugPreviousIDAndTypename, environment, fragmentNode, componentDisplayName);\n          }\n\n          handleQueryCompleted();\n        }\n      }, queryRef.fetchKey, profilerContext);\n    });\n    var queryData = FragmentResource.read(queryResult.fragmentNode, queryResult.fragmentRef, componentDisplayName).data;\n    !(queryData != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected to be able to read refetch query response. ' + \"If you're seeing this, this is likely a bug in Relay.\") : invariant(false) : void 0; // After reading/fetching the refetch query, we extract from the\n    // refetch query response the new fragment ref we need to use to read\n    // the fragment. The new fragment ref will point to the refetch query\n    // as its fragment owner.\n\n    var refetchedFragmentRef = getValueAtPath(queryData, fragmentRefPathInResponse);\n    fragmentRef = refetchedFragmentRef;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      // Validate that the id of the object we got back matches the id\n      // we queried for in the variables.\n      // We do this during render instead of onComplete to make sure we are\n      // only validating the most recent refetch.\n      debugFunctions.checkSameIDAfterRefetch(debugPreviousIDAndTypename, fragmentRef, fragmentNode, componentDisplayName);\n    }\n  } // We read and subscribe to the fragment using useFragmentNode.\n  // If refetch was called, we read the fragment using the new computed\n  // fragment ref from the refetch query response; otherwise, we use the\n  // fragment ref passed by the caller as normal.\n\n\n  var _useFragmentNode = useFragmentNode(fragmentNode, fragmentRef, componentDisplayName),\n      fragmentData = _useFragmentNode.data,\n      disableStoreUpdates = _useFragmentNode.disableStoreUpdates,\n      enableStoreUpdates = _useFragmentNode.enableStoreUpdates;\n\n  var refetch = useRefetchFunction(componentDisplayName, dispatch, disposeQuery, fragmentData, fragmentIdentifier, fragmentNode, fragmentRefPathInResponse, identifierField, loadQuery, parentFragmentRef, refetchableRequest);\n  return {\n    fragmentData: fragmentData,\n    fragmentRef: fragmentRef,\n    refetch: refetch,\n    disableStoreUpdates: disableStoreUpdates,\n    enableStoreUpdates: enableStoreUpdates\n  };\n}\n\nfunction useRefetchFunction(componentDisplayName, dispatch, disposeQuery, fragmentData, fragmentIdentifier, fragmentNode, fragmentRefPathInResponse, identifierField, loadQuery, parentFragmentRef, refetchableRequest) {\n  var isMountedRef = useIsMountedRef();\n  var identifierValue = identifierField != null && fragmentData != null && typeof fragmentData === 'object' ? fragmentData[identifierField] : null;\n  return useCallback(function (providedRefetchVariables, options) {\n    // Bail out and warn if we're trying to refetch after the component\n    // has unmounted\n    if (isMountedRef.current !== true) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Unexpected call to `refetch` on unmounted component for fragment ' + '`%s` in `%s`. It looks like some instances of your component are ' + 'still trying to fetch data but they already unmounted. ' + 'Please make sure you clear all timers, intervals, ' + 'async calls, etc that may trigger a fetch.', fragmentNode.name, componentDisplayName) : void 0;\n      return {\n        dispose: function dispose() {}\n      };\n    }\n\n    if (parentFragmentRef == null) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Unexpected call to `refetch` while using a null fragment ref ' + 'for fragment `%s` in `%s`. When calling `refetch`, we expect ' + \"initial fragment data to be non-null. Please make sure you're \" + 'passing a valid fragment ref to `%s` before calling ' + '`refetch`, or make sure you pass all required variables to `refetch`.', fragmentNode.name, componentDisplayName, componentDisplayName) : void 0;\n    }\n\n    var refetchEnvironment = options === null || options === void 0 ? void 0 : options.__environment;\n    var fetchPolicy = options === null || options === void 0 ? void 0 : options.fetchPolicy;\n    var renderPolicy = options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy;\n    var onComplete = options === null || options === void 0 ? void 0 : options.onComplete;\n    var fragmentSelector = getSelector(fragmentNode, parentFragmentRef);\n    var parentVariables;\n    var fragmentVariables;\n\n    if (fragmentSelector == null) {\n      parentVariables = {};\n      fragmentVariables = {};\n    } else if (fragmentSelector.kind === 'PluralReaderSelector') {\n      var _fragmentSelector$sel, _fragmentSelector$sel2, _fragmentSelector$sel3, _fragmentSelector$sel4;\n\n      parentVariables = (_fragmentSelector$sel = (_fragmentSelector$sel2 = fragmentSelector.selectors[0]) === null || _fragmentSelector$sel2 === void 0 ? void 0 : _fragmentSelector$sel2.owner.variables) !== null && _fragmentSelector$sel !== void 0 ? _fragmentSelector$sel : {};\n      fragmentVariables = (_fragmentSelector$sel3 = (_fragmentSelector$sel4 = fragmentSelector.selectors[0]) === null || _fragmentSelector$sel4 === void 0 ? void 0 : _fragmentSelector$sel4.variables) !== null && _fragmentSelector$sel3 !== void 0 ? _fragmentSelector$sel3 : {};\n    } else {\n      parentVariables = fragmentSelector.owner.variables;\n      fragmentVariables = fragmentSelector.variables;\n    } // A user of `useRefetchableFragment()` may pass a subset of\n    // all variables required by the fragment when calling `refetch()`.\n    // We fill in any variables not passed by the call to `refetch()` with the\n    // variables from the original parent fragment owner.\n\n\n    var refetchVariables = (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, parentVariables), fragmentVariables), providedRefetchVariables); // If the query needs an identifier value ('id' or similar) and one\n    // was not explicitly provided, read it from the fragment data.\n\n    if (identifierField != null && !providedRefetchVariables.hasOwnProperty('id')) {\n      // @refetchable fragments are guaranteed to have an `id` selection\n      // if the type is Node, implements Node, or is @fetchable. Double-check\n      // that there actually is a value at runtime.\n      if (typeof identifierValue !== 'string') {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Expected result to have a string  ' + '`%s` in order to refetch, got `%s`.', identifierField, identifierValue) : void 0;\n      }\n\n      refetchVariables.id = identifierValue;\n    }\n\n    var refetchQuery = createOperationDescriptor(refetchableRequest, refetchVariables, {\n      force: true\n    }); // We call loadQuery which will start a network request if necessary\n    // and update the querRef from useQueryLoader.\n    // Note the following:\n    // - loadQuery will dispose of any previously refetched queries.\n    // - We use the variables extracted off the OperationDescriptor\n    // so that they have been filtered out to include only the\n    // variables actually declared in the query.\n\n    loadQuery(refetchQuery.request.variables, {\n      fetchPolicy: fetchPolicy,\n      __environment: refetchEnvironment,\n      __nameForWarning: 'refetch'\n    });\n    dispatch({\n      type: 'refetch',\n      fetchPolicy: fetchPolicy,\n      onComplete: onComplete,\n      refetchEnvironment: refetchEnvironment,\n      refetchQuery: refetchQuery,\n      renderPolicy: renderPolicy\n    });\n    return {\n      dispose: disposeQuery\n    };\n  }, // NOTE: We disable react-hooks-deps warning because:\n  //   - We know fragmentRefPathInResponse is static, so it can be omitted from\n  //     deps\n  //   - We know fragmentNode is static, so it can be omitted from deps.\n  //   - fragmentNode and parentFragmentRef are also captured by including\n  //     fragmentIdentifier\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [fragmentIdentifier, dispatch, disposeQuery, identifierValue, loadQuery]);\n}\n\nvar debugFunctions;\n\nif (process.env.NODE_ENV !== \"production\") {\n  debugFunctions = {\n    getInitialIDAndType: function getInitialIDAndType(memoRefetchVariables, fragmentRefPathInResponse, environment) {\n      var _require5 = require('relay-runtime'),\n          Record = _require5.Record;\n\n      var id = memoRefetchVariables === null || memoRefetchVariables === void 0 ? void 0 : memoRefetchVariables.id;\n\n      if (fragmentRefPathInResponse.length !== 1 || fragmentRefPathInResponse[0] !== 'node' || id == null) {\n        return null;\n      }\n\n      var recordSource = environment.getStore().getSource();\n      var record = recordSource.get(id);\n      var typename = record && Record.getType(record);\n\n      if (typename == null) {\n        return null;\n      }\n\n      return {\n        id: id,\n        typename: typename\n      };\n    },\n    checkSameTypeAfterRefetch: function checkSameTypeAfterRefetch(previousIDAndType, environment, fragmentNode, componentDisplayName) {\n      var _require6 = require('relay-runtime'),\n          Record = _require6.Record;\n\n      if (!previousIDAndType) {\n        return;\n      }\n\n      var recordSource = environment.getStore().getSource();\n      var record = recordSource.get(previousIDAndType.id);\n      var typename = record && Record.getType(record);\n\n      if (typename !== previousIDAndType.typename) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Call to `refetch` returned data with a different ' + '__typename: was `%s`, now `%s`, on `%s` in `%s`. ' + 'Please make sure the server correctly implements' + 'unique id requirement.', previousIDAndType.typename, typename, fragmentNode.name, componentDisplayName) : void 0;\n      }\n    },\n    checkSameIDAfterRefetch: function checkSameIDAfterRefetch(previousIDAndTypename, refetchedFragmentRef, fragmentNode, componentDisplayName) {\n      if (previousIDAndTypename == null) {\n        return;\n      }\n\n      var _require7 = require('relay-runtime'),\n          ID_KEY = _require7.ID_KEY; // $FlowExpectedError[incompatible-use]\n\n\n      var resultID = refetchedFragmentRef[ID_KEY];\n\n      if (resultID != null && resultID !== previousIDAndTypename.id) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Call to `refetch` returned a different id, expected ' + '`%s`, got `%s`, on `%s` in `%s`. ' + 'Please make sure the server correctly implements ' + 'unique id requirement.', resultID, previousIDAndTypename.id, fragmentNode.name, componentDisplayName) : void 0;\n      }\n    }\n  };\n}\n\nmodule.exports = useRefetchableFragmentNode;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar useLoadMoreFunction = require('./useLoadMoreFunction');\n\nvar useRefetchableFragmentNode = require('./useRefetchableFragmentNode');\n\nvar useStaticFragmentNodeWarning = require('./useStaticFragmentNodeWarning');\n\nvar _require = require('react'),\n    useCallback = _require.useCallback,\n    useDebugValue = _require.useDebugValue,\n    useState = _require.useState;\n\nvar _require2 = require('relay-runtime'),\n    getFragment = _require2.getFragment,\n    getFragmentIdentifier = _require2.getFragmentIdentifier,\n    getPaginationMetadata = _require2.getPaginationMetadata;\n\nfunction usePaginationFragment(fragmentInput, parentFragmentRef) {\n  var fragmentNode = getFragment(fragmentInput);\n  useStaticFragmentNodeWarning(fragmentNode, 'first argument of usePaginationFragment()');\n  var componentDisplayName = 'usePaginationFragment()';\n\n  var _getPaginationMetadat = getPaginationMetadata(fragmentNode, componentDisplayName),\n      connectionPathInFragmentData = _getPaginationMetadat.connectionPathInFragmentData,\n      paginationRequest = _getPaginationMetadat.paginationRequest,\n      paginationMetadata = _getPaginationMetadat.paginationMetadata,\n      identifierField = _getPaginationMetadat.identifierField;\n\n  var _useRefetchableFragme = useRefetchableFragmentNode(fragmentNode, parentFragmentRef, componentDisplayName),\n      fragmentData = _useRefetchableFragme.fragmentData,\n      fragmentRef = _useRefetchableFragme.fragmentRef,\n      refetch = _useRefetchableFragme.refetch;\n\n  var fragmentIdentifier = getFragmentIdentifier(fragmentNode, fragmentRef); // Backward pagination\n\n  var _useLoadMore = useLoadMore({\n    componentDisplayName: componentDisplayName,\n    connectionPathInFragmentData: connectionPathInFragmentData,\n    direction: 'backward',\n    fragmentData: fragmentData,\n    fragmentIdentifier: fragmentIdentifier,\n    fragmentNode: fragmentNode,\n    fragmentRef: fragmentRef,\n    identifierField: identifierField,\n    paginationMetadata: paginationMetadata,\n    paginationRequest: paginationRequest\n  }),\n      loadPrevious = _useLoadMore[0],\n      hasPrevious = _useLoadMore[1],\n      isLoadingPrevious = _useLoadMore[2],\n      disposeFetchPrevious = _useLoadMore[3]; // Forward pagination\n\n\n  var _useLoadMore2 = useLoadMore({\n    componentDisplayName: componentDisplayName,\n    connectionPathInFragmentData: connectionPathInFragmentData,\n    direction: 'forward',\n    fragmentData: fragmentData,\n    fragmentIdentifier: fragmentIdentifier,\n    fragmentNode: fragmentNode,\n    fragmentRef: fragmentRef,\n    identifierField: identifierField,\n    paginationMetadata: paginationMetadata,\n    paginationRequest: paginationRequest\n  }),\n      loadNext = _useLoadMore2[0],\n      hasNext = _useLoadMore2[1],\n      isLoadingNext = _useLoadMore2[2],\n      disposeFetchNext = _useLoadMore2[3];\n\n  var refetchPagination = useCallback(function (variables, options) {\n    disposeFetchNext();\n    disposeFetchPrevious();\n    return refetch(variables, (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, options), {}, {\n      __environment: undefined\n    }));\n  }, [disposeFetchNext, disposeFetchPrevious, refetch]);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useDebugValue({\n      fragment: fragmentNode.name,\n      data: fragmentData,\n      hasNext: hasNext,\n      isLoadingNext: isLoadingNext,\n      hasPrevious: hasPrevious,\n      isLoadingPrevious: isLoadingPrevious\n    });\n  }\n\n  return {\n    data: fragmentData,\n    loadNext: loadNext,\n    loadPrevious: loadPrevious,\n    hasNext: hasNext,\n    hasPrevious: hasPrevious,\n    isLoadingNext: isLoadingNext,\n    isLoadingPrevious: isLoadingPrevious,\n    refetch: refetchPagination\n  };\n}\n\nfunction useLoadMore(args) {\n  var _useState = useState(false),\n      isLoadingMore = _useState[0],\n      setIsLoadingMore = _useState[1];\n\n  var observer = {\n    start: function start() {\n      return setIsLoadingMore(true);\n    },\n    complete: function complete() {\n      return setIsLoadingMore(false);\n    },\n    error: function error() {\n      return setIsLoadingMore(false);\n    }\n  };\n\n  var handleReset = function handleReset() {\n    return setIsLoadingMore(false);\n  };\n\n  var _useLoadMoreFunction = useLoadMoreFunction((0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, args), {}, {\n    observer: observer,\n    onReset: handleReset\n  })),\n      loadMore = _useLoadMoreFunction[0],\n      hasMore = _useLoadMoreFunction[1],\n      disposeFetch = _useLoadMoreFunction[2];\n\n  return [loadMore, hasMore, isLoadingMore, disposeFetch];\n}\n\nmodule.exports = usePaginationFragment;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useLazyLoadQueryNode = require('./useLazyLoadQueryNode');\n\nvar useMemoOperationDescriptor = require('./useMemoOperationDescriptor');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar invariant = require('invariant');\n\nvar _require2 = require('react'),\n    useDebugValue = _require2.useDebugValue;\n\nvar _require3 = require('relay-runtime'),\n    _require3$__internal = _require3.__internal,\n    fetchQueryDeduped = _require3$__internal.fetchQueryDeduped,\n    fetchQuery = _require3$__internal.fetchQuery;\n\nvar warning = require(\"fbjs/lib/warning\");\n\nfunction usePreloadedQuery(gqlQuery, preloadedQuery, options) {\n  // We need to use this hook in order to be able to track if\n  // loadQuery was called during render\n  useTrackLoadQueryInRender();\n  var environment = useRelayEnvironment();\n  var fetchKey = preloadedQuery.fetchKey,\n      fetchPolicy = preloadedQuery.fetchPolicy,\n      source = preloadedQuery.source,\n      variables = preloadedQuery.variables,\n      networkCacheConfig = preloadedQuery.networkCacheConfig;\n  var operation = useMemoOperationDescriptor(gqlQuery, variables, networkCacheConfig);\n  var useLazyLoadQueryNodeParams;\n\n  if (preloadedQuery.kind === 'PreloadedQuery_DEPRECATED') {\n    !(operation.request.node.params.name === preloadedQuery.name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'usePreloadedQuery(): Expected data to be prefetched for query `%s`, ' + 'got prefetch results for query `%s`.', operation.request.node.params.name, preloadedQuery.name) : invariant(false) : void 0;\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchKey: fetchKey,\n      fetchObservable: fetchQueryDeduped(environment, operation.request.identifier, function () {\n        if (environment === preloadedQuery.environment && source != null) {\n          return environment.executeWithSource({\n            operation: operation,\n            source: source\n          });\n        } else {\n          return environment.execute({\n            operation: operation\n          });\n        }\n      }),\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  } else {\n    process.env.NODE_ENV !== \"production\" ? warning(preloadedQuery.isDisposed === false, 'usePreloadedQuery(): Expected preloadedQuery to not be disposed yet. ' + 'This is because disposing the query marks it for future garbage ' + 'collection, and as such query results may no longer be present in the Relay ' + 'store. In the future, this will become a hard error.') : void 0;\n    var fallbackFetchObservable = fetchQuery(environment, operation);\n    var fetchObservable;\n\n    if (source != null && environment === preloadedQuery.environment) {\n      // If the source observable exists and the environments match, reuse\n      // the source observable.\n      // If the source observable happens to be empty, we need to fall back\n      // and re-execute and de-dupe the query (at render time).\n      fetchObservable = source.ifEmpty(fallbackFetchObservable);\n    } else if (environment !== preloadedQuery.environment) {\n      // If a call to loadQuery is made with a particular environment, and that\n      // preloaded query is passed to usePreloadedQuery in a different environment\n      // context, we cannot re-use the existing preloaded query.\n      // Instead, we need to fall back and re-execute and de-dupe the query with\n      // the new environment (at render time).\n      // TODO T68036756 track occurences of this warning and turn it into a hard error\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'usePreloadedQuery(): usePreloadedQuery was passed a preloaded query ' + 'that was created with a different environment than the one that is currently ' + 'in context. In the future, this will become a hard error.') : void 0;\n      fetchObservable = fallbackFetchObservable;\n    } else {\n      // if (source == null)\n      // If the source observable does not exist, we need to\n      // fall back and re-execute and de-dupe the query (at render time).\n      fetchObservable = fallbackFetchObservable;\n    }\n\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchObservable: fetchObservable,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  }\n\n  var data = useLazyLoadQueryNode(useLazyLoadQueryNodeParams);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useDebugValue({\n      query: preloadedQuery.name,\n      variables: preloadedQuery.variables,\n      data: data,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    });\n  }\n\n  return data;\n}\n\nmodule.exports = usePreloadedQuery;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar useRefetchableFragmentNode = require('./useRefetchableFragmentNode');\n\nvar useStaticFragmentNodeWarning = require('./useStaticFragmentNodeWarning');\n\nvar _require = require('react'),\n    useDebugValue = _require.useDebugValue;\n\nvar _require2 = require('relay-runtime'),\n    getFragment = _require2.getFragment;\n\nfunction useRefetchableFragment(fragmentInput, fragmentRef) {\n  var fragmentNode = getFragment(fragmentInput);\n  useStaticFragmentNodeWarning(fragmentNode, 'first argument of useRefetchableFragment()');\n\n  var _useRefetchableFragme = useRefetchableFragmentNode(fragmentNode, fragmentRef, 'useRefetchableFragment()'),\n      fragmentData = _useRefetchableFragme.fragmentData,\n      refetch = _useRefetchableFragme.refetch;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useDebugValue({\n      fragment: fragmentNode.name,\n      data: fragmentData\n    });\n  }\n  /* $FlowExpectedError[prop-missing] : Exposed options is a subset of internal\n   * options */\n\n\n  return [fragmentData, refetch];\n}\n\nmodule.exports = useRefetchableFragment;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar _require = require('react'),\n    useEffect = _require.useEffect,\n    useRef = _require.useRef;\n/**\n * This hook subscribes a callback to the invalidation state of the given data\n * ids.\n * Any time the invalidation state of the given data ids changes, the provided\n * callback will be called.\n * If new ids or a new callback are provided, the subscription will be\n * re-established and the previous one will be disposed.\n * The subscription will automatically be disposed on unmount\n */\n\n\nfunction useSubscribeToInvalidationState(dataIDs, callback) {\n  var environment = useRelayEnvironment();\n  var disposableRef = useRef(null);\n  var stableDataIDs = Array.from(dataIDs).sort().join('');\n  useEffect(function () {\n    var store = environment.getStore();\n    var invalidationState = store.lookupInvalidationState(dataIDs);\n    var disposable = store.subscribeToInvalidationState(invalidationState, callback);\n    disposableRef.current = disposable;\n    return function () {\n      return disposable.dispose();\n    }; // Intentionally excluding dataIDs, since we're using stableDataIDs\n    // instead\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableDataIDs, callback, environment]);\n  return {\n    dispose: function dispose() {\n      if (disposableRef.current != null) {\n        disposableRef.current.dispose();\n      }\n    }\n  };\n}\n\nmodule.exports = useSubscribeToInvalidationState;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar _require = require('react'),\n    useEffect = _require.useEffect;\n\nvar _require2 = require('relay-runtime'),\n    requestSubscription = _require2.requestSubscription;\n\nfunction useSubscription(config, requestSubscriptionFn) {\n  // N.B. this will re-subscribe every render if config or requestSubscriptionFn\n  // are not memoized.\n  // Please do not pass an object defined in-line.\n  var actualRequestSubscription = requestSubscriptionFn !== null && requestSubscriptionFn !== void 0 ? requestSubscriptionFn : requestSubscription;\n  var environment = useRelayEnvironment();\n  useEffect(function () {\n    // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n    var _actualRequestSubscri = actualRequestSubscription(environment, config),\n        dispose = _actualRequestSubscri.dispose; // $FlowFixMe[incompatible-call]\n\n\n    return dispose;\n  }, [environment, config, actualRequestSubscription]);\n}\n\nmodule.exports = useSubscription;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar ReactRelayContext = require('./ReactRelayContext');\n\nvar ReactRelayFragmentContainer = require('./ReactRelayFragmentContainer');\n\nvar ReactRelayLocalQueryRenderer = require('./ReactRelayLocalQueryRenderer');\n\nvar ReactRelayPaginationContainer = require('./ReactRelayPaginationContainer');\n\nvar ReactRelayQueryRenderer = require('./ReactRelayQueryRenderer');\n\nvar ReactRelayRefetchContainer = require('./ReactRelayRefetchContainer');\n\nvar EntryPointContainer = require('./relay-hooks/EntryPointContainer.react');\n\nvar loadEntryPoint = require('./relay-hooks/loadEntryPoint');\n\nvar _require = require('./relay-hooks/loadQuery'),\n    loadQuery = _require.loadQuery;\n\nvar RelayEnvironmentProvider = require('./relay-hooks/RelayEnvironmentProvider');\n\nvar useEntryPointLoader = require('./relay-hooks/useEntryPointLoader');\n\nvar useFragment = require('./relay-hooks/useFragment');\n\nvar useLazyLoadQuery = require('./relay-hooks/useLazyLoadQuery');\n\nvar useMutation = require('./relay-hooks/useMutation');\n\nvar usePaginationFragment = require('./relay-hooks/usePaginationFragment');\n\nvar usePreloadedQuery = require('./relay-hooks/usePreloadedQuery');\n\nvar useQueryLoader = require('./relay-hooks/useQueryLoader');\n\nvar useRefetchableFragment = require('./relay-hooks/useRefetchableFragment');\n\nvar useRelayEnvironment = require('./relay-hooks/useRelayEnvironment');\n\nvar useSubscribeToInvalidationState = require('./relay-hooks/useSubscribeToInvalidationState');\n\nvar useSubscription = require('./relay-hooks/useSubscription');\n\nvar RelayRuntime = require('relay-runtime');\n\n/**\n * The public interface to react-relay.\n * Currently contains both Relay Hooks and legacy Container APIs.\n * Will eventually only export the interface from ./hooks.js.\n */\nmodule.exports = {\n  ConnectionHandler: RelayRuntime.ConnectionHandler,\n  QueryRenderer: ReactRelayQueryRenderer,\n  LocalQueryRenderer: ReactRelayLocalQueryRenderer,\n  MutationTypes: RelayRuntime.MutationTypes,\n  RangeOperations: RelayRuntime.RangeOperations,\n  ReactRelayContext: ReactRelayContext,\n  applyOptimisticMutation: RelayRuntime.applyOptimisticMutation,\n  commitLocalUpdate: RelayRuntime.commitLocalUpdate,\n  commitMutation: RelayRuntime.commitMutation,\n  createFragmentContainer: ReactRelayFragmentContainer.createContainer,\n  createPaginationContainer: ReactRelayPaginationContainer.createContainer,\n  createRefetchContainer: ReactRelayRefetchContainer.createContainer,\n  fetchQuery_DEPRECATED: RelayRuntime.fetchQuery_DEPRECATED,\n  graphql: RelayRuntime.graphql,\n  readInlineData: RelayRuntime.readInlineData,\n  requestSubscription: RelayRuntime.requestSubscription,\n  // Relay Hooks\n  EntryPointContainer: EntryPointContainer,\n  RelayEnvironmentProvider: RelayEnvironmentProvider,\n  fetchQuery: RelayRuntime.fetchQuery,\n  loadQuery: loadQuery,\n  loadEntryPoint: loadEntryPoint,\n  useFragment: useFragment,\n  useLazyLoadQuery: useLazyLoadQuery,\n  useEntryPointLoader: useEntryPointLoader,\n  useQueryLoader: useQueryLoader,\n  useMutation: useMutation,\n  usePaginationFragment: usePaginationFragment,\n  usePreloadedQuery: usePreloadedQuery,\n  useRefetchableFragment: useRefetchableFragment,\n  useRelayEnvironment: useRelayEnvironment,\n  useSubscribeToInvalidationState: useSubscribeToInvalidationState,\n  useSubscription: useSubscription\n};", "/**\n * Relay v13.2.0\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nmodule.exports = require('./lib/index.js');\n", "export default require(\"./node_modules/.store/react-relay-virtual-e8fb7c2d42/node_modules/react-relay/index.js\");"],
  "mappings": "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",
  "names": []
}
